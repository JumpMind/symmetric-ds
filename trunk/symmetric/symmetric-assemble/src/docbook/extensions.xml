<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="extensions" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml">         
    <title>Extension Points</title>           
        <para>
             SymmetricDS has a pluggable architecture that can be extended. A Java class that implements 
             the appropriate extension point interface, can implement custom logic and change the behavior
             of SymmetricDS to suit special needs.  All supported extension 
             points extend the <literal>IExtensionPoint</literal> interface.  The available extension points are documented in the following sections.  
        </para>
        <para>
             When SymmetricDS starts up, the <literal>ExtensionPointManager</literal> searches a <ulink url="http://springframework.org">Spring Framework</ulink> 
             context for classes that implement the <literal>IExtensionPoint</literal> interface, then creates and registers
             the class with the appropriate SymmetricDS component.  
        </para>
        <para>
             If an extension point needs access to SymmetricDS services or needs to connect to the database
             it may implement the <literal>ISymmetricEngineAware</literal> interface in order to
             get a handle to the <literal>ISymmetricEngine</literal>.
        </para>
        <para>
             The <literal>INodeGroupExtensionPoint</literal> interface may be optionally implemented to indicate that a registered 
             extension point should only be registered with specific node groups.
             <programlisting><![CDATA[/**
 * Only apply this extension point to the 'root' node group.
 */
 public String[] getNodeGroupIdsToApplyTo() {
     return new String[] { "root" };
 }
]]></programlisting>             
        </para>        
        <para>
             Extensions are configured in the <literal>conf/symmetric-extensions.xml</literal> file.
        </para>
        <section id="extensions-parameter-filter">
            <title>IParameterFilter</title>
            <para>
                Parameter values can be specified in code using a parameter filter.  Note that there can be only one parameter
                filter per engine instance.  The IParameterFilter replaces the deprecated IRuntimeConfig from prior releases.
                <programlisting><![CDATA[public class MyParameterFilter 
    implements IParameterFilter, INodeGroupExtensionPoint {

    /**
     * Only apply this filter to stores
     */
    public String[] getNodeGroupIdsToApplyTo() {
        return new String[] { "store" };
    }

    public String filterParameter(String key, String value) {
        // look up a store number from an already existing properties file.
        if (key.equals(ParameterConstants.EXTERNAL_ID)) {
            return StoreProperties.getStoreProperties().
              getProperty(StoreProperties.STORE_NUMBER);
        } 
        return value;
    }

    public boolean isAutoRegister() {
        return true;
    }

}]]></programlisting> 
            </para>
        </section>        
        <section id="extensions-data-loader-filter">
            <title>IDatabaseWriterFilter</title>         
            <para>
                Data can be filtered or manipulated before it is loaded into the target database.              
                A filter can change the
                data in a column, save it somewhere else or do something else with the data entirely.  
                It can also specify by the
                return value of the function call that the data loader should continue on 
                and load the data (by returning true) or ignore it (by returning false). One 
                possible use of the filter, for example, might be to
                route credit card data to a secure database and blank it out as it loads 
                into a less-restricted reporting database.
            </para>
            <para>
                A <literal>DataContext</literal> is passed to each of the callback methods.  A new 
                context is created for each synchronization.  The context provides a mechanism  
                to share data during the load of a batch between different rows of data that are 
                committed in a single database transaction. 
            </para>  
            <para>
                The filter also provide callback methods for the batch lifecycle.  The <literal>DatabaseWriterFilterAdapter</literal>
                may be used if not all methods are required.
            </para>          
            <para>
                A class implementing the IDatabaseWriterFilter interface is injected onto the
                DataLoaderService in order to receive callbacks when data is inserted,
                updated, or deleted.
                
                <programlisting><![CDATA[public class MyFilter extends DatabaseWriterFilterAdapter {

    @Override
    public boolean beforeWrite(DataContext context, Table table, CsvData data) {
        if (table.getName().equalsIgnoreCase("CREDIT_CARD_TENDER")
                && data.getDataEventType().equals(DataEventType.INSERT)) {
            String[] parsedData = data.getParsedData(CsvData.ROW_DATA);
            // blank out credit card number
            parsedData[table.getColumnIndex("CREDIT_CARD_NUMBER")] = null;
        }
        return true;
    }
}]]></programlisting>
            </para>
            <para>
                The filter class should be specified in <literal>conf/symmetric-extensions.xml</literal> as follows.
                
                <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd">
 
    <bean id="myFilter" class="com.mydomain.MyFilter"/>
     
</beans>]]></programlisting>
            </para>
        </section>
        <section id="extensions-acknowledge-event-listener">
            <title>IAcknowledgeEventListener</title>
            <para>
            Implement this extension point to receive callback events when a batch is acknowledged.  
            The callback for this listener happens at the point of extraction.
            </para>
        </section>                
        <section id="extensions-reload-listener">
            <title>IReloadListener</title>
            <para>
            Implement this extension point to listen in and take
            action before or after a reload is requested for a Node.  The callback for this listener
            happens at the point of extraction.
            </para>
        </section>                
        <section id="extensions-sync-url-extension">
            <title>ISyncUrlExtension</title>
            <para>
             This extension point is used to select an appropriate URL based on
             the URI provided in the <literal>sync_url</literal> column of <literal>sym_node</literal>.
            </para>
            <para>
             To use this extension point configure the sync_url for a node with the
             protocol of ext://beanName. The beanName is the name you give the extension
             point in the extension xml file.
            </para>
        </section>        
        <section id="extensions-node-id-generator">
            <title>INodeIdGenerator</title>
            <para>
             This extension point allows SymmetricDS users to implement their own algorithms for how 
             node ids and passwords are generated or selected during the registration process.  There may be 
             only one node generator per SymmetricDS instance.
            </para>
        </section>
        <section id="extensions-trigger-creation-listener">
            <title>ITriggerCreationListener</title>
            <para>
            Implement this extension point to get status callbacks during trigger creation.
            </para>
        </section>       
        <section id="extensions-batch-algorithm">
            <title>IBatchAlgorithm</title>
            <para>
            Implement this extension point and set the name of the Spring bean on the batch_algorithm column of the Channel table to use.
            This extension point gives fine grained control over how a channel is batched.
            </para>
        </section>                   
        <section id="extensions-data-router">
            <title>IDataRouter</title>
            <para>
            Implement this extension point and set the name of the Spring bean on the router_type column
            of the Router table to use.  This extension point gives the ability to programatically decide
            which nodes data should be routed to.
            </para>
        </section>  
        <section id="extensions-heartbeat-listener">
            <title>IHeartbeatListener</title>
            <para>
            Implement this extension point to get callbacks during the heartbeat job.
            </para>
        </section>
        <section id="extensions-offline-client-listener">
            <title>IOfflineClientListener</title>
            <para>
            Implement this extension point to get callbacks for offline events on client nodes.
            </para>
        </section>
        <section id="extensions-offline-server-listener">
            <title>IOfflineServerListener</title>
            <para>
            Implement this extension point to get callbacks for offline events detected on a server node during monitoring of client nodes.
            </para>
        </section>
        <section id="extensions-node-password">
            <title>INodePasswordFilter</title>
            <para>
            Implement this extension point to intercept the saving and rendering of the node password.
            </para>
        </section>        
    </section>