# Naming convention for keys
# Noun (Object), verb, condition (completed, failed, etc)
# Camel case
#
# If the string is related to a unit test, please prefix with "Test"

Common.Option.engine=The name of a configured engine.  The name should correspond to a engine.name setting in one of the properties files in the engines directory.
Common.Option.properties=The properties file with settings for the SymmetricDS engine.  If not provided, defaults are used, then overridden with first symmetric.properties in classpath, then overridden with symmetric.properties values in user.home directory.
Common.Option.debug=Print debug information in logging.
Common.Option.noconsole=No output will be sent to the console.
Common.Option.nologfile=No output will be sent to the log file.
Common.Option.verbose=Use verbose format for console output.
Common.Option.storepass=Password for keystore [changeit].
Common.Option.storetype=Type of keystore format [jks].
Common.Option.providerClass=Class name of alternate crypto provider.
Common.Option.help=Print help with each option and description.

Launcher.Option.server=Start an embedded instance of SymmetricDS that accepts HTTP.
Launcher.Option.client=Start an embedded, client-only, instance of SymmetricDS.
Launcher.Option.secure-server=Start an embedded instance of SymmetricDS that accepts HTTPS.
Launcher.Option.mixed-server=Start an embedded instance of SymmetricDS that accepts HTTP/HTTPS.
Launcher.Option.host=Optionally pass in the network interface the server should bind to.  If this option is not provided, the server will bind to all interfaces.
Launcher.Option.port=Optionally pass in the HTTP port number to use for the server instance.
Launcher.Option.secure-port=Optionally pass in the HTTPS port number to use for the server instance.
Launcher.Option.max-idle-time=Max idle time in milliseconds when a connection is forced to close [900000].
Launcher.Option.no-nio=Do not use Non-blocking IO for the HTTP connector.
Launcher.Option.no-directbuffer=Do not use direct buffers for the NIO HTTP connector.

SymAdmin.Cmd.reload-node=Reload data at a node (or initial load)
SymAdmin.Cmd.reload-table=Reload data at a node for a table
SymAdmin.Cmd.export-batch=Export batch CSV data from database
SymAdmin.Cmd.import-batch=Import batch CSV data into database
SymAdmin.Cmd.run-purge=Run the purge job
SymAdmin.Cmd.encrypt-text=Encrypt text string
SymAdmin.Cmd.create-war=Create web archive for deployment
SymAdmin.Cmd.create-sym-tables=Create tables required by SymmetricDS
SymAdmin.Cmd.export-sym-tables=Export tables required by SymmetricDS
SymAdmin.Cmd.open-registration=Open registration for a node
SymAdmin.Cmd.sync-triggers=Create database triggers
SymAdmin.Cmd.export-properties=Export default properties
SymAdmin.Cmd.send-sql=Send SQL statement to node
SymAdmin.Cmd.send-schema=Send schema change to node
SymAdmin.Cmd.send-script=Send script to node
SymAdmin.Usage.reload-node=<node-id>
SymAdmin.Usage.reload-table=<table>
SymAdmin.Usage.export-batch=<batch number> [<filename>]
SymAdmin.Usage.import-batch=[<filename>]
SymAdmin.Usage.run-purge=[all | outgoing | incoming | data-gaps]
SymAdmin.Usage.encrypt-text=<text>
SymAdmin.Usage.create-war=<filename>
SymAdmin.Usage.create-sym-tables=
SymAdmin.Usage.export-sym-tables=<filename>
SymAdmin.Usage.open-registration=<node group> <external id>
SymAdmin.Usage.sync-triggers=
SymAdmin.Usage.export-properties=[<filename>]
SymAdmin.Usage.send-sql=<table> <sql>
SymAdmin.Usage.send-schema=<table>
SymAdmin.Usage.send-script=<filename>
SymAdmin.Help.export-sym-tables=Output the SQL to create the SymmetricDS tables.  If a filename is given, the SQL statements are written to it, otherwise standard output is used.
SymAdmin.Help.run-purge=Run the purge process against the configured database.
SymAdmin.Help.export-properties=Export all properties with their default values, along with comments describing them.  If a filename is given, the properties are written to it, otherwise standard output is used.
SymAdmin.Help.create-sym-tables=Attempts to create the symmetric tables in the configured database.
SymAdmin.Help.open-registration=Open registration for the passed in node group and external id.
SymAdmin.Help.export-batch=Export the batch CSV data for the given batch ID.  If a filename is given, the data is written to file, otherwise it uses standard output.
SymAdmin.Help.import-batch=Import the batch CSV data from the specified file into the database.  If a filename is given, the batch data is read from it, otherwise standard input is used.
SymAdmin.Help.sync-triggers=Run the sync triggers process to create database triggers that are missing or re-create database triggers that have a configuration change.  If a filename is specified, the SQL statements are also written to file.  If triggers should not be applied automatically then set the auto.sync.triggers property to false.
SymAdmin.Help.encrypt-text=Encrypts the given text for use with db.user and db.password properties.
SymAdmin.Help.create-war=Generate a web archive that can be deployed to a web server like Tomcat.  The name of the output file must be provided.  If a properties file is designated, it will be renamed and packaged as symmetric.properties.  Other than the optional properties file, a war is made up of the contents of the web directory and the conf directory of the standalone installation.
SymAdmin.Help.reload-node=Send an initial load of data to reload a remote node.
SymAdmin.Help.reload-table=Send the data from the specified table <table> to a node or group of nodes.
SymAdmin.Help.send-sql=Send a SQL statement to be executed on a remote node.
SymAdmin.Help.send-schema=Send a schema update for a table to be executed on a remote node.  The table definition is sent in torque XML format.  If the target table is missing, it is created; if it exists it will be altered, if possible, otherwise dropped and re-created.
SymAdmin.Help.send-script=Send a script to a node to be run there.  The script is read from the filename provided as an argument or read from standard input.  Only BeanShell scripts are supported.
SymAdmin.Option.catalog=Look for tables in catalog.
SymAdmin.Option.schema=Look for tables in schema.
SymAdmin.Option.where=Add where clause to SQL statement that selects data from table.
SymAdmin.Option.node=Send to this node ID.
SymAdmin.Option.node-group=Send to all nodes in this node group ID.
SymAdmin.Option.force=Force triggers to regenerate even if no change is detected.

DbExport.Option.compatible=Change export to be compatible with given database: db2, derby, firebird, greenplum, h2, hsqldb, hsqldb2, informix, interbase, mssql, mysql, oracle, postgresql, sybase.
DbExport.Option.add-drop-table=Add drop table commands to output.
DbExport.Option.no-create-info=Do not write statements to create tables.
DbExport.Option.no-indices=Do not write statements to create indices.
DbExport.Option.no-foreign-keys=Do not write statements to create foreign keys.
DbExport.Option.no-data=Do not write statements to insert into tables.
DbExport.Option.use-variable-dates=Substitute dates as ${curdate+-millis}.
DbExport.Option.comments=Write informational comments.
DbExport.Option.format=Output format: SQL, CSV, or XML.
DbExport.Option.catalog=Look for tables in catalog.
DbExport.Option.schema=Look for tables in schema.
DbExport.Option.sql=Run custom SQL to select data.

DbImport.Option.format=Input format: SQL, CSV, or XML.
DbImport.Option.catalog=Look for tables in catalog.
DbImport.Option.schema=Look for tables in schema.
DbImport.Option.table=Specify table to import.
DbExport.Option.use-variable-dates=Allow date substitution using format ${curdate+-millis}.
