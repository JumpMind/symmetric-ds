<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<book>
    <bookinfo>
        <title>SymmetricDS User Guide</title>
        <authorgroup>
            <author>
                <firstname>Eric</firstname>
                <surname>Long</surname>
            </author>
            <author>
                <firstname>Chris</firstname>
                <surname>Henson</surname>
            </author>
        </authorgroup>
        <edition>Version 1.0 for SymmetricDS v1.0.0</edition>
        <copyright>
            <year>2007</year>
            <holder>Eric Long and Chris Henson</holder>
        </copyright>
        <legalnotice>
            <para>
                Permission to use, copy, modify, and distribute the SymmetricDS User Guide Version
                1.0 for any purpose and without fee is hereby granted in perpetuity, provided that
                the above copyright notice and this paragraph appear in all copies.
            </para>
        </legalnotice>
    </bookinfo>
    <preface>
        <title>Preface</title>
        <para>
            SymmetricDS is web-enabled, database independent, data synchronization software. It uses
            web and database technologies to replicate tables between relational databases in near
            real time. The software was designed to scale for a large number of databases, work
            across low-bandwidth connections, and withstand periods of network outage.
        </para>
        <para>
            This User Guide describes the SymmetricDS library for data synchronization. It is
            intended for users who want to be quickly familiarized with the software, configure it,
            and use its features.
        </para>
    </preface>
    <chapter>
        <title>Introduction</title>
        <section>
            <title>The Problem of Synchronization</title>
            <para>
                SymmetricDS includes features that solve a particular set of synchronization
                problems.
            </para>
            <section>
                <title>Notification Schemes</title>
                <para>
                    After a change to the database is recorded, the nodes interested in the change
                    are notified. Change notification is configured to perform a push (trickle-back)
                    or a pull (trickle-poll) of data. When several nodes target their changes to a
                    central node, it is efficient to push the changes instead of waiting for the
                    central node to pull from each source node. When network configuration protects
                    a node with a firewall, a pull configuration allows the node to receive data
                    changes that might otherwise be blocked using push. The frequency of the change
                    notification is configured by default to one minute.
                </para>
            </section>
            <section>
                <title>Two-Way Table Synchronization</title>
                <para>
                    Some data may synchronize in one direction. For example, a retail store sends
                    its sales transactions to a central office, and the central office sends its
                    stock items to the store. Some data may synchronize in both directions. For
                    example, the retail store sends the central office an inventory document, and
                    the central office updates the document status, which is sent back to the store.
                    SymmetricDS supports bi-directional synchronization and avoids getting into
                    update loops by only recording data changes outside of synchronization.
                </para>
            </section>
            <section>
                <title>Data Channels</title>
                <para>
                    Data synchronization is defined at the table (or table subset) level. Each
                    managed table can be assigned to a channel that helps control the flow of data.
                    A channel is a category of data that is be prioritized and synchronized
                    independently of other channels. For example, in a retail environment, users may
                    be waiting for inventory documents to update while a promotional sale event
                    updates a large number of items. If processed in order, the item updates would
                    delay the inventory updates even though the data is unrelated. By assigning item
                    table changes to the "item" channel and inventory table changes to the
                    "inventory" channel, the changes are processed independently so inventory can
                    get through.
                </para>
            </section>
            <section>
                <title>Transaction Awareness</title>
                <para>
                Many databases provide a unique transaction identifier associated with the 
                rows that are committed together.  SymmetricDS stores the transaction ID
                along with the data that changed so it can play back the transaction exactly
                the way it happened.  This means the target database maintains the same
                integrity as its source.  Support for transaction ID is included in the Database
                Dialects for both MySQL and Oracle in this release.
                </para>
            </section>
            <section>
                <title>Data Filtering and Rerouting</title>
                <para>
                Data can be filtered as it is recorded, extracted, and loaded.
                Columns can be excluded from synchronization so they are never recorded when
                the table is changed.  As data changes are extracted from the source database,
                a class implementing <literal>IExtractorListener</literal> is called to
                filter data or route it somewhere else.  As data changes are loaded in the
                target database, a class implementing <literal>IDataLoaderFilter</literal>
                can filter data or route it somewhere else.  For example, an employee 
                table may be synchronized to a retail store database, but the employee's
                password is only synchronized on the initial insert.
                Another example is routing credit card data to a secure database and filtering
                it out as it loads into a central office database.
                </para>
            </section>
            <section>
                <title>HTTP Transport</title>
                <para>
                    By default, SymmetricDS uses web-based HTTP in a style called Representation State 
                    Transfer (REST) that is lightweight and easy to manage.
                    A series of filters are also provided to enforce authentication and to
                    restrict the number of simultaneous syncrhonization streams.
                    The <literal>ITransportManager</literal> interface allows other transports to
                    be implemented.  (The unit tests for SymmetricDS take advantage of this
                    by using an <literal>InternalTransportManager</literal> that makes it easy
                    to run automated tests locally.)
                </para>
            </section>
            <section>
                <title>Remote Management</title>
                <para>
                    Administration functions are exposed through Java Management Extensions (JMX)
                    that can be accessed from the Java JConsole or through an application server.
                    Functions include opening registration, reloading data, purging old data,
                    and viewing batches.
                    A number of configuration and runtime properties are available to be viewed
                    as well. 
                </para>
            </section>
        </section>
        <section>
            <title>Requirements</title>
            <para>
                SymmetricDS is written in Java 5 and requires a Java SE Runtime Environment (JRE) or
                Java SE Development Kit (JDK) version 5.0 or above.
            </para>
            <para>
                Any database with trigger technology and a JDBC driver has the potential to run
                SymmetricDS. The database is abstracted through a Database Dialect in order to
                support specific features of each database. The following Database Dialects have
                been included with release 1.0:
            </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>MySQL version 5.0.2 and above</para>
                </listitem>
                <listitem>
                    <para>Oracle version 8.1.7 and above</para>
                </listitem>
            </itemizedlist>
        </section>
        <section>
            <title>Background</title>
            <para>
                While implementing a commercial Point of Sale (POS) system for a large retailer, the
                development team concluded that the software available for trickling back
                transactions to the general office did not meet the project needs. The list of
                problems in the requirements made finding the ideal solution difficult:
            </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>
                        Sending and receiving data with 2000 stores during peak holiday loads.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Supporting one database platform at the store and another at general office.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Synchronizing some data in one direction, and other data in both directions.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Filtering out sensitive data and re-routing it to a protected database.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Preparing the store database with an initial load of data from general
                        office.
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                The team created a custom solution that met the requirements and made the project
                successful. From this initial challenge came the knowledge and experience that
                SymmetricDS benefits from today.
            </para>
        </section>
        <section>
            <title>Version Numbering</title>
            <para>
                The software is released with a version number based on the
                <ulink url="http://apr.apache.org/versioning.html">
                    Apache Portable Runtime Project
                </ulink>
                version guidelines. In summary, the version is denoted as three integers in the
                format of MAJOR.MINOR.PATCH. Major versions are incompatible at the API level, and
                they can include any kind of change. Minor versions are compatible with older
                versions at the API and binary level, and they can intoduce new functions or remove
                old ones. Patch versions are perfectly compatible, and they are released to fix
                defects.
            </para>
        </section>
    </chapter>
    <chapter>
        <title>Getting Started</title>
        <para>
            This chapter is a hands-on tutorial that demonstrates how to synchronize the sample
            database between two running nodes of SymmetricDS.
        </para>
        <para>
            To get started, you create a root (central source) database and a client (remote target)
            database that each run the SymmetricDS software to synchronize changes. You open
            registration for the client, which registers with the root to receive the
            synchronization configuration. You ask the root to reload the client in order to perform
            an initial synchronization. Then you make changes to each database and observe the
            changes propagating.
        </para>
        <section>
            <title>Installing SymmetricDS</title>
            <para>
                Install the SymmetricDS software and configure it with your database connection
                information.
            </para>
            <procedure>
                <step>
                    <para>
                        Download the
                        <ulink url="http://sourceforge.net/project/showfiles.php?group_id=206470">
                            symmetric-ds.zip
                        </ulink>
                        file from
                        <ulink url="http://www.symmetricds.org/">http://www.symmetricds.org/</ulink>
                    </para>
                </step>
                <step>
                    <para>
                        Unzip the file, which creates a
                        <filename class="directory">symmetric-ds-1.0.0</filename>
                        subdirectory.
                    </para>
                </step>
                <step>
                    <para>Edit the database properties for the root and client nodes.</para>
                    <substeps>
                        <step>
                            <para>
                                Edit the
                                <filename>samples/root.properties</filename>
                                for the root node.
                            </para>
                        </step>
                        <step>
                            <para>
                                Edit the
                                <filename>samples/client.properties</filename>
                                for the client node.
                            </para>
                        </step>
                    </substeps>
                </step>
                <step>
                    <para>
                        Set the following properties in both files for the corresponding databases:
                    </para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                <literal>db.driver</literal>
                                - The class name for the JDBC Driver
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>db.url</literal>
                                - The JDBC URL used to connect to the database
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>db.user</literal>
                                - The user to login as who can create and update tables
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>db.password</literal>
                                - The password for the user to login as
                            </para>
                        </listitem>
                    </itemizedlist>
                </step>
                <step>
                    <para>
                        Set the following properties in the
                        <filename>client.properties</filename>
                        file:
                    </para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                <literal>symmetric.runtime.registration.url</literal>
                                - The HTTP URL of the root node to contact for registration
                                (http://hostname:8080/sync)
                            </para>
                        </listitem>
                    </itemizedlist>
                </step>
            </procedure>
        </section>
        <section>
            <title>Creating and Populating Your Databases</title>
            <important>
                <para>
                    You must first create the databases for your root and client nodes using the
                    administration tools provided by your database vendor. Make sure the name of the
                    databases you create match the settings in the properties files.
                </para>
            </important>
            <para>
                Create and load the root node tables with sample data and the synchronization
                configuration. Create the tables in the client node database to prepare it.
            </para>
            <procedure>
                <step>
                    <para>
                        Open a command prompt and navigate to the
                        <filename class="directory">samples</filename>
                        subdirectory of your SymmetricDS installation.
                    </para>
                </step>
                <step>
                    <para>Create the sample tables in both the root and client databases.</para>
                    <para>
                        <command>../bin/sym -p root.properties --run-ddl create_sample.xml</command>
                    </para>
                    <para>
                        <command>
                            ../bin/sym -p client.properties --run-ddl create_sample.xml
                        </command>
                    </para>
                    <para>
                        Note that the command may output warnings about altering foreign keys on the
                        tables, which are safe to ignore.
                    </para>
                </step>
                <step>
                    <para>
                        Create the symmetric tables in the root node database. These tables will
                        contain the configuration for synchronization. The following command uses
                        the auto-creation feature to create all the necessary symmetric system
                        tables.
                    </para>
                    <para>
                        <command>../bin/sym -p root.properties --auto-create</command>
                    </para>
                </step>
                <step>
                    <para>Load sample data and configuration into the root node database.</para>
                    <para>
                        <command>../bin/sym -p root.properties --run-sql insert_sample.sql</command>
                    </para>
                </step>
                <step>
                    <para>Verify the databases by logging in and listing the tables.</para>
                </step>
            </procedure>
        </section>
        <section>
            <title>Starting SymmetricDS</title>
            <para>Start the SymmetricDS nodes and observe the logging output.</para>
            <procedure>
                <step>
                    <para>
                        Open a command prompt and navigate to the
                        <filename class="directory">samples</filename>
                        subdirectory of your SymmetricDS installation.
                    </para>
                </step>
                <step>
                    <para>Start the root node server.</para>
                    <para>
                        <command>../bin/sym -p root.properties --port 8080 --server</command>
                    </para>
                    <para>
                        The root node server starts up and creates all the triggers that were
                        configured by the sample configuration. It listens on port 8080 for
                        synchronization and registration requests.
                    </para>
                </step>
                <step>
                    <para>Start the client node server.</para>
                    <para>
                        <command>../bin/sym -p client.properties --port 9090 --server</command>
                    </para>
                    <para>
                        The client node server starts up and uses the auto-creation feature to
                        create the symmetric system tables. It begins polling the root node in order
                        to register. Since registration is not yet open, the client node receives an
                        authorization failure (HTTP response of 403).
                    </para>
                </step>
            </procedure>
        </section>
        <section>
            <title>Registering a Node</title>
            <para>
                Open registration for the client node using the root node administration feature.
            </para>
            <procedure>
                <step>
                    <para>
                        Open a command prompt and navigate to the
                        <filename class="directory">samples</filename>
                        subdirectory of your SymmetricDS installation.
                    </para>
                </step>
                <step>
                    <para>Open registration for the client node server.</para>
                    <para>
                        <command>
                            ../bin/sym -p root.properties --open-registration "store,1"
                        </command>
                    </para>
                    <para>
                        The registration is opened for a node group called "store" with an external
                        identifier of "1".
                    </para>
                </step>
                <step>
                    <para>
                        Watch the logging output of the client node to see it successfully register
                        with the root node. The client is configured to attempt registration each
                        minute. Once registered, the root and client are enabled for
                        synchronization.
                    </para>
                </step>
            </procedure>
        </section>
        <section>
            <title>Sending Initial Load</title>
            <para>
                Send an initial load of data to the client node using the root node administration
                feature.
            </para>
            <procedure>
                <step>
                    <para>
                        Open a command prompt and navigate to the
                        <filename class="directory">samples</filename>
                        subdirectory of your SymmetricDS installation.
                    </para>
                </step>
                <step>
                    <para>Send an initial load of data to the client node server.</para>
                    <para>
                        <command>../bin/sym -p root.properties --reload-node 1</command>
                    </para>
                    <para>
                        With this command, the root node queues up an initial load for the client
                        node that will sent the next time the client performs its pull. The initial
                        load includes data for each table that is configured for synchronization.
                    </para>
                </step>
                <step>
                    <para>
                        Watch the logging output of both nodes to see the data transfer. The client
                        is configured to pull data from the root each minute.
                    </para>
                </step>
            </procedure>
        </section>
        <section>
            <title>Pulling Data</title>
            <para>
                Modify data in the root database. The changes are propagated to the client database
                during pull synchronization.
            </para>
            <procedure>
                <step>
                    <para>Open an interactive SQL session with the root database.</para>
                </step>
                <step>
                    <para>Add a new item for sale to the root database</para>
                    <para>
                        <command>
                            insert into item_selling_price (price_id, price) values (55, 0.65);
                        </command>
                    </para>
                    <para>
                        <command>
                            insert into item (item_id, price_id, name) values (110000055, 55, 'Soft
                            Drink');
                        </command>
                    </para>
                    <para>
                        Once the statements are committed, the data change is captured and queued
                        for the client node to pull.
                    </para>
                </step>
                <step>
                    <para>
                        Watch the logging output of both nodes to see the data transfer. The client
                        is configured to pull data from the root each minute.
                    </para>
                </step>
                <step>
                    <para>
                        Verify that the new data arrives in the client database using another
                        interactive SQL session.
                    </para>
                </step>
            </procedure>
        </section>
        <section>
            <title>Pushing Data</title>
            <para>
                Modify data in the client database. The changes are propagated to the root database
                during push synchronization.
            </para>
            <procedure>
                <step>
                    <para>Open an interactive SQL session with the client database.</para>
                </step>
                <step>
                    <para>Add a new sale to the client database</para>
                    <para>
                        <command>
                            insert into transaction (tran_id, store, workstation, day, seq) values
                            (1000, '1', '3', '2007-11-01', 100);
                        </command>
                    </para>
                    <para>
                        <command>
                            insert into sale_return_line_item (tran_id, item_id, price, quantity)
                            values (1000, 110000055, 0.65, 1);
                        </command>
                    </para>
                    <para>
                        Once the statements are committed, the data change is captured and queued
                        for the client node to push.
                    </para>
                </step>
                <step>
                    <para>
                        Watch the logging output of both nodes to see the data transfer. The client
                        is configured to push data to the root each minute.
                    </para>
                </step>
                <step>
                    <para>
                        Verify that the new data arrives in the root database using another
                        interactive SQL session.
                    </para>
                </step>
            </procedure>
        </section>
    </chapter>
    <chapter>
        <title>Concepts</title>
        <section>
            <title>Data Model</title>
            <para></para>
        </section>
        <section>
            <title>Node</title>
            <para>
                An instance of SymmetricDS that synchronizes data with one or more nodes. Each node
                has a unique identifier (nodeId) that is used when communicating, as well as a
                domain-specific identifier (externalId) that provides context within the local
                system.
            </para>
            <para>
                <table>
                    <title>Node</title>
                    <tgroup cols="6">
                        <thead>
                            <row>
                                <entry>Column Name</entry>
                                <entry>Type</entry>
                                <entry>Null</entry>
                                <entry>Key</entry>
                                <entry>Default</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>node_id</entry>
                                <entry>varchar(50)</entry>
                                <entry>N</entry>
                                <entry>PK</entry>
                                <entry></entry>
                                <entry>Unique identifier for a node</entry>
                            </row>
                            <row>
                                <entry>node_group_id</entry>
                                <entry>varchar(50)</entry>
                                <entry>N</entry>
                                <entry>FK</entry>
                                <entry></entry>
                                <entry>
                                    The node group that this node belongs to, such as "store"
                                </entry>
                            </row>
                            <row>
                                <entry>external_id</entry>
                                <entry>varchar(50)</entry>
                                <entry>N</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                    A domain-specific identifier for context within the local
                                    system. For example, the retail store number.
                                </entry>
                            </row>
                            <row>
                                <entry>sync_enabled</entry>
                                <entry>booleanint</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry>0</entry>
                                <entry>
                                    Indicates whether this node should be sent synchronization.
                                    Disabled nodes are ignored by the triggers, so no entries are
                                    made in DataEvent for the node.
                                </entry>
                            </row>
                            <row>
                                <entry>sync_url</entry>
                                <entry>varchar(2000)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>The URL to contact the node for synchronization.</entry>
                            </row>
                            <row>
                                <entry>schema_version</entry>
                                <entry>varchar(50)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                    The version of the database schema this node manages. Useful for
                                    specifying synchronization by version.
                                </entry>
                            </row>
                            <row>
                                <entry>symmetric_version</entry>
                                <entry>varchar(50)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>The version of SymmetricDS running at this node.</entry>
                            </row>
                            <row>
                                <entry>database_type</entry>
                                <entry>varchar(50)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                    The database product name at this node as reported by JDBC.
                                </entry>
                            </row>
                            <row>
                                <entry>database_version</entry>
                                <entry>varchar(50)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                    The database product version at this node as reported by JDBC.
                                </entry>
                            </row>
                            <row>
                                <entry>heartbeat_time</entry>
                                <entry>timestamp</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                    The last timestamp when the node sent a heartbeat, which is
                                    attempted every ten minutes by default.
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </para>
        </section>
        <section>
            <title>Node Security</title>
            <para>
                Security features like node passwords and open registration flag are stored in the
                NodeSecurity table.
            </para>
            <para>
                <table>
                    <title>Node Security</title>
                    <tgroup cols="6">
                        <thead>
                            <row>
                                <entry>Column Name</entry>
                                <entry>Type</entry>
                                <entry>Null</entry>
                                <entry>Key</entry>
                                <entry>Default</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>node_id</entry>
                                <entry>varchar(50)</entry>
                                <entry>N</entry>
                                <entry>PK FK</entry>
                                <entry></entry>
                                <entry>Unique identifier for a node</entry>
                            </row>
                            <row>
                                <entry>password</entry>
                                <entry>varchar(50)</entry>
                                <entry>N</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                    The password used by the node to prove its identity during
                                    synchronization.
                                </entry>
                            </row>
                            <row>
                                <entry>registration_enabled</entry>
                                <entry>booleanint</entry>
                                <entry>N</entry>
                                <entry></entry>
                                <entry>0</entry>
                                <entry>Indicates whether registration is open for this node.</entry>
                            </row>
                            <row>
                                <entry>registration_time</entry>
                                <entry>timestamp</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>The timestamp when this node was registered.</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </para>

        </section>
        <section>
            <title>Node Group</title>
            <para>
                A category of Nodes that synchronizes data with one or more NodeGroups. A common use
                of NodeGroup is to describe a level in a hierarchy of data synchronization.
            </para>
            <para>
                <table>
                    <title>Node Group</title>
                    <tgroup cols="6">
                        <thead>
                            <row>
                                <entry>Column Name</entry>
                                <entry>Type</entry>
                                <entry>Null</entry>
                                <entry>Key</entry>
                                <entry>Default</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>node_group_id</entry>
                                <entry>varchar(50)</entry>
                                <entry>N</entry>
                                <entry>PK</entry>
                                <entry></entry>
                                <entry>
                                    Unique identifier for a node group, usually named something
                                    meaningful, like "store" or "warehouse".
                                </entry>
                            </row>
                            <row>
                                <entry>description</entry>
                                <entry>varchar(50)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>A description of this node group.</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </para>
        </section>
        <section>
            <title>Node Group Link</title>
            <para>
                A source NodeGroup sends its data updates to a target NodeGroup using a pull, push,
                or custom technique.
            </para>
            <para>
                <table>
                    <title>Node Group Link</title>
                    <tgroup cols="6">
                        <thead>
                            <row>
                                <entry>Column Name</entry>
                                <entry>Type</entry>
                                <entry>Null</entry>
                                <entry>Key</entry>
                                <entry>Default</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>source_node_group_id</entry>
                                <entry>varchar(50)</entry>
                                <entry>N</entry>
                                <entry>PK FK</entry>
                                <entry></entry>
                                <entry>The node group where data changes should be captured.</entry>
                            </row>
                            <row>
                                <entry>target_node_group_id</entry>
                                <entry>varchar(50)</entry>
                                <entry>N</entry>
                                <entry>PK FK</entry>
                                <entry></entry>
                                <entry>The node group where data changes will be sent.</entry>
                            </row>
                            <row>
                                <entry>data_event_action</entry>
                                <entry>char(1)</entry>
                                <entry>N</entry>
                                <entry></entry>
                                <entry>W</entry>
                                <entry>
                                    The notification scheme used to send data changes to the target
                                    node group. (P = Push, W = Wait for Pull, X = Extract Listener)
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </para>
        </section>
        <section>
            <title>Channel</title>
            <para>
                A category of data that can be synchronized independently of other Channels.
                Channels allow control over the type of data flowing and prevents one type of
                synchronization from contending with another.
            </para>
            <para>
                <table>
                    <title>Channel</title>
                    <tgroup cols="6">
                        <thead>
                            <row>
                                <entry>Column Name</entry>
                                <entry>Type</entry>
                                <entry>Null</entry>
                                <entry>Key</entry>
                                <entry>Default</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>channel_id</entry>
                                <entry>varchar(50)</entry>
                                <entry>N</entry>
                                <entry>PK</entry>
                                <entry></entry>
                                <entry>A unique identifer, usually named something
                                    meaningful, like "sales" or "inventory".
                                </entry>
                            </row>
                            <row>
                                <entry>processing_order</entry>
                                <entry>integer</entry>
                                <entry>N</entry>
                                <entry></entry>
                                <entry>1</entry>
                                <entry>Order of sequence to process channel data.</entry>
                            </row>
                            <row>
                                <entry>max_batch_size</entry>
                                <entry>integer</entry>
                                <entry>N</entry>
                                <entry></entry>
                                <entry>1000</entry>
                                <entry>
                                    The maximum number of Data Events to process within a batch
                                    for this channel.
                                </entry>
                            </row>
                            <row>
                                <entry>enabled</entry>
                                <entry>booleanint</entry>
                                <entry>N</entry>
                                <entry></entry>
                                <entry>1</entry>
                                <entry>Indicates whether channel is enabled or not.</entry>
                            </row>
                            <row>
                                <entry>description</entry>
                                <entry>varchar(1000)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>Description on the type of data carried in this channel.</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </para>
        </section>
        <section>
            <title>Node Channel Control</title>
            <para>
                The Node Channel Control is used to ignore or suspend a channel.
                A channel that is ignored will have its Data Events batched and they will
                immediately be marked as "OK" without sending them.  A channel that is suspended
                is skipped when batching Data Events.
            </para>
            <para>
                <table>
                    <title>Node Channel Control</title>
                    <tgroup cols="6">
                        <thead>
                            <row>
                                <entry>Column Name</entry>
                                <entry>Type</entry>
                                <entry>Null</entry>
                                <entry>Key</entry>
                                <entry>Default</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>node_id</entry>
                                <entry>varchar(50)</entry>
                                <entry>N</entry>
                                <entry>PK FK</entry>
                                <entry></entry>
                                <entry>Unique identifier for a node</entry>
                            </row>
                            <row>
                                <entry>channel_id</entry>
                                <entry>varchar(50)</entry>
                                <entry>N</entry>
                                <entry>PK FK</entry>
                                <entry></entry>
                                <entry>A unique identifer, usually named something
                                    meaningful, like "sales" or "inventory".
                                </entry>
                            </row>
                            <row>
                                <entry>suspend_enabled</entry>
                                <entry>booleanint</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry>0</entry>
                                <entry>
                                    Indicates if this channel is suspended, which prevents its
                                    Data Events from being batched. 
                                </entry>
                            </row>
                            <row>
                                <entry>ignore_enabled</entry>
                                <entry>booleanint</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry>0</entry>
                                <entry>
                                    Indicates if this channel is ignored, which marks its
                                    Data Events as if they were actually processed.
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </para>
        </section>
        <section>
            <title>Trigger</title>
            <para>
                The database triggers that capture changes in the database are automatically
                generated by SymmetricDS. Configuration of which triggers are generated and how they
                will behave is stored in the Trigger table.
            </para>
            <para>
                <table>
                    <title>Trigger</title>
                    <tgroup cols="6">
                        <thead>
                            <row>
                                <entry>Column Name</entry>
                                <entry>Type</entry>
                                <entry>Null</entry>
                                <entry>Key</entry>
                                <entry>Default</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>trigger_id</entry>
                                <entry>integer</entry>
                                <entry>N</entry>
                                <entry>PK</entry>
                                <entry></entry>
                                <entry>Unique identifier for a trigger.</entry>
                            </row>
                            <row>
                                <entry>source_schema_name</entry>
                                <entry>varchar(50)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>The schema name where the source table resides.</entry>
                            </row>
                            <row>
                                <entry>source_table_name</entry>
                                <entry>varchar(50)</entry>
                                <entry>N</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                The name of the source table that will have a trigger installed to
                                watch for data changes.
                                </entry>
                            </row>
                            <row>
                                <entry>target_schema_name</entry>
                                <entry>varchar(50)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                The schema name where the target table resides.
                                </entry>
                            </row>
                            <row>
                                <entry>target_table_name</entry>
                                <entry>varchar(50)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                The name of the target table that will have data changes
                                synchronized to it.
                                </entry>
                            </row>
                            <row>
                                <entry>source_node_group_id</entry>
                                <entry>varchar(50)</entry>
                                <entry>N</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                The node group that will install this trigger to watch
                                for data changes,
                                </entry>
                            </row>
                            <row>
                                <entry>target_node_group_id</entry>
                                <entry>varchar(50)</entry>
                                <entry>N</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                The node group that will have data changes synchronized to it.
                                </entry>
                            </row>
                            <row>
                                <entry>channel_id</entry>
                                <entry>varchar(50)</entry>
                                <entry>N</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                The channel that data changes will flow through.
                                </entry>
                            </row>
                            <row>
                                <entry>sync_on_update</entry>
                                <entry>booleanint</entry>
                                <entry>N</entry>
                                <entry></entry>
                                <entry>1</entry>
                                <entry>
                                Whether or not to install an update trigger.
                                </entry>
                            </row>
                            <row>
                                <entry>sync_on_insert</entry>
                                <entry>booleanint</entry>
                                <entry>N</entry>
                                <entry></entry>
                                <entry>1</entry>
                                <entry>
                                Whether or not to install an insert trigger.
                                </entry>
                            </row>
                            <row>
                                <entry>sync_on_delete</entry>
                                <entry>booleanint</entry>
                                <entry>N</entry>
                                <entry></entry>
                                <entry>1</entry>
                                <entry>
                                Whether or not to install a delete trigger.
                                </entry>
                            </row>
                            <row>
                                <entry>sync_on_incoming_batch</entry>
                                <entry>booleanint</entry>
                                <entry>N</entry>
                                <entry></entry>
                                <entry>0</entry>
                                <entry>
                                Whether or not an incoming batch that loads data into this table
                                should cause the triggers to capture Data Events.
                                Be careful turning this on, because an update loop is possible.
                                </entry>
                            </row>
                            <row>
                                <entry>name_for_update_trigger</entry>
                                <entry>varchar(30)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                Override the default generated name for the update trigger.
                                </entry>
                            </row>
                            <row>
                                <entry>name_for_insert_trigger</entry>
                                <entry>varchar(30)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                Override the default generated name for the insert trigger.
                                </entry>
                            </row>
                            <row>
                                <entry>name_for_delete_trigger</entry>
                                <entry>varchar(30)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                Override the default generated name for the delete trigger.
                                </entry>
                            </row>
                            <row>
                                <entry>sync_on_update_condition</entry>
                                <entry>varchar(1000)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                Specify a condition for the update trigger firing using an expression
                                specific to the database.
                                </entry>
                            </row>
                            <row>
                                <entry>sync_on_insert_condition</entry>
                                <entry>varchar(1000)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                Specify a condition for the insert trigger firing using an expression
                                specific to the database.
                                </entry>
                            </row>
                            <row>
                                <entry>sync_on_delete_condition</entry>
                                <entry>varchar(1000)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                Specify a condition for the delete trigger firing using an expression
                                specific to the database.
                                </entry>
                            </row>
                            <row>
                                <entry>initial_load_select</entry>
                                <entry>varchar(1000)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                Specify a where-clause for an initial load of this table.
                                The table is aliased as "t".
                                </entry>
                            </row>
                            <row>
                                <entry>node_select</entry>
                                <entry>varchar(1000)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                Specify a where-clause for selecting the nodes that will receive
                                data changes.  The node table is aliased as "c".
                                </entry>
                            </row>
                            <row>
                                <entry>tx_id_expression</entry>
                                <entry>varchar(1000)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                Override the default expression for the transaction identifier
                                that groups the data changes that were committed together.
                                </entry>
                            </row>
                            <row>
                                <entry>excluded_column_names</entry>
                                <entry>varchar(1000)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                Specify a comma-delimited list of columns that should not be
                                synchronized from this table.
                                </entry>
                            </row>
                            <row>
                                <entry>initial_load_order</entry>
                                <entry>integer</entry>
                                <entry>N</entry>
                                <entry></entry>
                                <entry>1</entry>
                                <entry>
                                Order sequence of this table when an initial load is sent to a node.
                                </entry>
                            </row>
                            <row>
                                <entry>create_time</entry>
                                <entry>timestamp</entry>
                                <entry>N</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                Timestamp when this entry was created.
                                </entry>
                            </row>
                            <row>
                                <entry>inactive_time</entry>
                                <entry>timestamp</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                Timestamp when this entry was inactivated, which stops
                                capturing of data changes.
                                </entry>
                            </row>
                            <row>
                                <entry>last_updated_by</entry>
                                <entry>varchar(50)</entry>
                                <entry>Y</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                The user who last updated this entry.
                                </entry>
                            </row>
                            <row>
                                <entry>last_updated_time</entry>
                                <entry>timestamp</entry>
                                <entry>N</entry>
                                <entry></entry>
                                <entry></entry>
                                <entry>
                                Timestamp when a user last updated this entry.
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </para>
        </section>
    </chapter>
    <chapter>
        <title>Architecture</title>
        <section>
            <title>Software Components</title>
            <para></para>
        </section>
        <section>
            <title>Deployment Options</title>
            <para></para>
        </section>
    </chapter>
    <chapter>
        <title>Basic Configuration</title>
        <section>
            <title>Nodes</title>
            <para></para>
        </section>
    </chapter>
    <chapter>
        <title>Advanced Configuration</title>
        <section>
            <title>Dead Triggers</title>
            <para></para>
        </section>
        <section>
            <title>Auto Creation</title>
            <para></para>
        </section>
        <section>
            <title>Secure Transport</title>
            <para></para>
        </section>
    </chapter>
    <chapter>
        <title>Administration</title>
        <section>
            <title>Rebuilding Triggers</title>
            <para></para>
        </section>
        <section>
            <title>Opening Registration</title>
            <para></para>
        </section>
        <section>
            <title>Enabling and Disabling Synchronization</title>
            <para></para>
        </section>
        <section>
            <title>Viewing Batches</title>
            <para></para>
        </section>
    </chapter>
    <appendix>
        <title>SymmetricDS Data Format</title>
        <para>
            The SymmetricDS Data Format is used to stream data from node to another. The data format
            reader and writer are pluggable with an initial implementation using a format based on
            Comma Separated Values (CSV). Each line in the stream is a record with fields separated
            by commas. String fields are surrounded with double quotes. Double quotes and
            backslashes used in a string field are escaped with a backslash. Binary values are
            represented as a string with hex values in "\0xab" format. The absence of any value in
            the field indicates a null value. Extra spacing is ignored and lines starting with a
            hash are ignored.
        </para>
        <para>
            The first field of each line gives the directive for the line. The following directives
            are used:

            <variablelist>
                <varlistentry>
                    <term>
                        <command>version {major},{minor},{patch}</command>
                    </term>
                    <listitem>
                        <para>Indicates the version of the file format</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>table {table name}</command>
                    </term>
                    <listitem>
                        <para>Sets the context of which table to operate on</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>keys {column name...}</command>
                    </term>
                    <listitem>
                        <para>
                            Lists the column names that are used as the primary key for the table.
                            Only needs to occur after the first occurrence of the table.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>columns {column name...}</command>
                    </term>
                    <listitem>
                        <para>
                            Lists all the column names of the table. Only needs to occur after the
                            first occurrence of the table.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>insert {column value...}</command>
                    </term>
                    <listitem>
                        <para>
                            Insert into the table with the values that correspond with the columns
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>update {old key value...},{new column value...}</command>
                    </term>
                    <listitem>
                        <para>
                            Update the table using the old key values to set the new column values
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>delete {old key value...}</command>
                    </term>
                    <listitem>
                        <para>Delete from the table using the old key values</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </para>
        <example>
            <title>Data Format Stream</title>
            <programlisting>
                <![CDATA[
version, 1,0,0
table, item_selling_price
keys, price_id
columns, price, cost
insert, 55, 0.65, 0.55
table, item
keys, item_id 
columns, item_id, price_id, name
insert, 110000055, 55, "Soft Drink"
delete, 110000001
table, item_selling_price
update, 55, 55, 0.75, 0.65
                ]]>
            </programlisting>
        </example>
    </appendix>
</book>
