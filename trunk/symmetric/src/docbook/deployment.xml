<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="deployment" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml">
    <title>Deployment</title>
    <para>
       This chapter focuses on the deployment options and configuration of SymmetricDS.  Issues 
       such as starting SymmetricDS as a service, clustering, and encryption are among the topics.
    </para>


<section id="deployment-options">
        <title>Deployment Options</title>
        <para>An instance of SymmetricDS can be deployed in several ways:</para>
        <itemizedlist>
            <listitem>
                <para>Web application archive (WAR) deployed to an application server</para>
                <para>
                    This option means packaging a WAR file and deploying to your favorite
                    web server, like Apache Tomcat.  It's a little more work, but you
                    can configure the web server to do whatever you need.  SymmetricDS can also 
                    be embedded in an existing web application, if desired.
                </para>                
            </listitem>
            <listitem>
                <para>Standalone service that embeds Jetty web server</para>
                <para>
                    This option means running the <emphasis>sym</emphasis> command line, which launches the built-in Jetty web server.  
                    This is a simple option because it is already provided, but you lose the flexibility to configure 
                    the web server any further.
                </para>
            </listitem>
            <listitem>
                <para>Embedded as a Java library in an application</para>
                <para>
                    This option means you must write a wrapper Java program that runs
                    SymmetricDS.  You would probably use Jetty web server, which is also embeddable.
                    You could bring up an embedded database like Derby or H2.  You could configure the
                    web server, database, or SymmetricDS to do whatever you needed, but it's also
                    the most work of the three options discussed thus far.
                </para>
            </listitem>
            <listitem>
                <para>Grails Application</para>
                <para>                
                    A <ulink url="http://grails.org/plugin/symmetricds">Grails SymmetricDS plugin</ulink> is 
                    provided at the default Grails plugin site.  This option ends up being a WAR deployment, but allows 
                    for the use of the Grails SDK for configuring and building the deployment.  The plugin also
                    provides Gorm (Hibernate) access to many of the core database tables.   
                </para>
            </listitem>            
        </itemizedlist>
        <para>
            The deployment model you choose depends on how much flexibility you need versus how easy you
            want it to be.  Both Jetty and Tomcat are excellent, scalable web servers that
            compete with each other and have great performance.  Most people choose either
            the <emphasis>Standalone</emphasis> or <emphasis>Web Archive</emphasis> with Tomcat 5.5 or 6.  Deploying to Tomcat
            is a good middle-of-the-road decision that requires a little more work for more flexibility.
        </para>
        <para>Next, we will go into a little more detail on the first three deployment options listed above.</para>
        <section id="deployment-options-web-archive">
            <title>Web Archive</title>
            <para>
                As a web application archive, a WAR or EAR file is deployed to an application server,
                such as Tomcat, Jetty, or JBoss.  The structure of the archive should have a <literal>web.xml</literal>
                file in the <literal>WEB-INF</literal> folder, the <filename>symmetric.properties</filename> file in the <literal>WEB-INF/classes</literal> folder,
                and the required JAR files in the <literal>WEB-INF/lib</literal> folder.
            </para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/symmetric_war.gif" format="GIF" />
                </imageobject>
            </mediaobject>
            <para>
                The <filename>WEB-INF/web.xml</filename> file
                is configured with a <literal>SymmetricEngineContextLoaderListener</literal>,
                the required SymmetricFilter mapping, and the required SymmetricServlet mapping.
           
            </para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
        http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    version="2.5">

    <display-name>sync</display-name>
    
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <!-- You can optionally specify other Spring files to 
                load into same context here -->
        <param-value>classpath:symmetric.xml</param-value>
    </context-param>
    
    <filter>
        <filter-name>SymmetricFilter</filter-name>
        <filter-class>
            org.jumpmind.symmetric.web.SymmetricFilter
        </filter-class>
    </filter>
    
    <filter-mapping>
        <filter-name>SymmetricFilter</filter-name>
        <servlet-name>/*</servlet-name>
    </filter-mapping>
    
    <listener>
        <listener-class>
            org.jumpmind.symmetric.SymmetricEngineContextLoaderListener
        </listener-class>
    </listener>
    
    <servlet>
        <servlet-name>SymmetricServlet</servlet-name>
        <servlet-class>
            org.jumpmind.symmetric.web.SymmetricServlet
        </servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>SymmetricServlet</servlet-name>
        <url-pattern>/*</url-pattern>
    </servlet-mapping>

</web-app>]]></programlisting>
            <para>
                This example starts all the SymmetricDS Servlets with Filters to compress the
                stream, authenticate nodes, and reject nodes when the server is too busy.
            </para>
            <para>
                The <literal>web.base.servlet.path</literal> property in <filename>symmetric.properties</filename> can be set if the SymmetricServlet needs to
                coexist with other Servlets.
            </para>            
        </section>
        <section id="deployment-options-standalone">
            <title>Standalone</title>
            <para>
                A standalone service can use the <literal>sym</literal> command line options to start
                a server.  An embedded instance of Jetty is used to service web
                requests for all the servlets.
            </para>
            <programlisting><![CDATA[/symmetric/bin/sym --properties root.properties --port 8080 --server
]]></programlisting>
            <para>
                This example starts the SymmetricDS server on port 8080 with the startup
                properties found in the <filename>root.properties</filename> file.
            </para>
        </section>
        <section id="deployment-options-embedded">
            <title>Embedded</title>
            <para>
                A Java application with the SymmetricDS Java Archive (JAR) library on its
                classpath can use the <literal>SymmetricWebServer</literal> to start the server.
            </para>
            <programlisting><![CDATA[
import org.jumpmind.symmetric.SymmetricWebServer;

public class StartSymmetricEngine {

    /**
     * Start an engine that is configured by two properties files. One is
     * packaged with the application and contains overridden properties that are
     * specific to the application. The other is found in the application's
     * working directory. It can be used to setup environment specific
     * properties.
     */
    public static void main(String[] args) throws Exception {
    
        SymmetricWebServer node = new SymmetricWebServer(
                                   "classpath://my-application.properties");

        // this will create the database, sync triggers, start jobs running
        node.start(8080);
        
        // this will stop the node
        node.stop();
    }   

}]]></programlisting>
            <para>
                This example starts the SymmetricDS server on port 8080 with startup properies found
                in two locations.  The first file, <filename>my-application.properties</filename>,
                is packaged in the application to provide properties that override the SymmetricDS 
                default values.
            </para>
        </section>
    </section> 
    
    <section id="running-service-windows">
        <title>Running as a Windows Service</title>
        <para>
            SymmetricDS uses the
            <ulink url="http://wrapper.tanukisoftware.org/">Java Service Wrapper</ulink>
            product from Tanuki Software to run in the background as a Windows system service.
            The Java Service Wrapper executable is named <filename class="file">sym_service.exe</filename>
            so it can be easily identified from a list of running processes.
            To install the service, use the provided script:
            <programlisting>bin\install_service.bat</programlisting>
        </para>
        <para>
            The service configuration is found in <filename class="filename">conf/sym_service.conf</filename>.
            Edit this file if you want to change the default port number (8080), initial memory size
            (256 MB), log file size (10 MB), or other settings.
            When started, the server will look in the <filename class="directory">conf</filename> directory
            for the <filename class="filename">symmetric.properties</filename> file
            and the  <filename class="filename">log4j.xml</filename> file.
            Logging for standard out, error, and application are written to the
            <filename class="directory">logs</filename> directory.
        </para>
        <para>
            Most configuration changes do not require the service to be re-installed. 
            To un-install the service, use the provided script:
            <programlisting>bin\uninstall_service.bat</programlisting>
        </para>
        <para>
            Use the <command>net</command> command to start and stop the service: 
            <programlisting>net start symmetric
net stop symmetric</programlisting>
        </para>
    </section>
    <section id="running-service-unix">
        <title>Running as a Nix Service</title>
        <para>
            SymmetricDS uses the
            <ulink url="http://wrapper.tanukisoftware.org/">Java Service Wrapper</ulink>
            product from Tanuki Software to run in the background as a Unix system service.
            The Java Service Wrapper executable is named <filename class="file">sym_service</filename>
            so it can be easily identified from a list of running processes.
            The service configuration is found in <filename class="filename">conf/sym_service.conf</filename>.
            Edit this file if you want to change the default port number (8080), initial memory size
            (256 MB), log file size (10 MB), or other settings.
        </para>
        <para>
            An init script is provided to work with standard Unix run configuration levels.
            The <filename class="file">sym_service.initd</filename> file follows the
            Linux Standard Base specification, which should work on many systems, including
            Fedora and Debian-based distributions.  
            To install the script, copy it into the system init directory:
        </para>
        <para>
            <programlisting>cp bin/sym_service.initd /etc/init.d/sym_service</programlisting>
        </para>
        <para>
            Edit the init script to set the SYM_HOME variable to the directory
            where SymmetricDS is located.  The init script calls the
            <filename class="file">sym_service</filename> executable.
        </para>
        <para>
            To enable the service to run automatically when the system is started:
            <programlisting>/sbin/chkconfig --add sym_service</programlisting>
        </para>
        <para>
            To disable the service from running automatically:
            <programlisting>/sbin/chkconfig --del sym_service</programlisting>
        </para>
        <para>
            On Suse Linux install the service by calling:
            <programlisting>/usr/lib/lsb/install_initd sym_service</programlisting>
            Remove the service by calling:
            <programlisting>/usr/lib/lsb/remove_initd sym_service</programlisting>
        </para>          
        <para>
            Use the <command>service</command> command to start, stop, and query
            the status of the service: 
            <programlisting>/sbin/service sym_service start
/sbin/service sym_service stop
/sbin/service sym_service status</programlisting>
        </para>  
        <para>
            Alternatively, call the init.d script directly:
            <programlisting>/etc/init.d/sym_service start
/etc/init.d/sym_service stop
/etc/init.d/sym_service status
            </programlisting>
        </para>    
    </section>
        <section id="clustering">
        <title>Clustering</title>
        <para>
        A single SymmetricDS node may be clustered across a series of instances, creating a web farm.  A node might be clustered to provide load balancing and failover, for example.
        </para>
        <para>
        When clustered, a hardware load balancer is typically used
        to round robin client requests to the cluster.  The load balancer should be configured for stateless connections.  
        Also, the <literal>sync.url</literal> (discussed in <xref linkend="basic-configuration"/>)
        SymmetricDS property should be set to the URL of the load balancer.  
        </para>
        <para>
        If the cluster will be running any of the SymmetricDS jobs, then the <literal>cluster.lock.enabled</literal> property should be set to <literal>true</literal>. 
        By setting this property to true, SymmetricDS will use a row in the <xref linkend="table_lock" xrefstyle="table"/> table as a semaphore to make sure that only one instance at a time
        runs a job.  When a lock is acquired, a row is updated in the lock table with the time of the lock and the server id of the locking job.  The lock time is set back to null
        when the job is finished running.  Another instance of SymmetricDS cannot aquire a lock until the locking instance (according to the server id) releases the lock.  If an 
        instance is terminated while the lock is still held, an instance with the same server id is allowed to reaquire the lock.  If the locking instance remains down, the lock can be 
        broken after a period of time, specified by the <literal>cluster.lock.timeout.ms</literal> property, has expired.  Note that if the job is still running and the lock
        expires, two jobs could be running at the same time which could cause database deadlocks. 
        </para>
        <para>
        By default, the locking server id is the hostname of the server.  If two clustered instances are running on the same server, then the <literal>cluster.server.id</literal> property 
        may be set to indicate the name that the instance should use for its server id.
        </para>
        <para>
        When deploying SymmetricDS to an application server like Tomcat or JBoss, no special session clustering needs to be configured for the application server.  
        </para>
    </section>   
      <section id="encrypted-passwords">
        <title>Encrypted Passwords</title>
        <para>
            The <literal>db.user</literal> and <literal>db.password properties</literal> will accept encrypted text, which protects
            against casual observation.  The text is prefixed with <literal>enc:</literal> to indicate
            that it is encrypted.  To encrypt text, use the following command:
        </para>
        <para>
            <command>sym -e secret</command>
        </para>
        <para>
            The text is encrypted by the cipher defined as alias "sym.secret" in the 
            Java keystore.  The keystore is specified by the "sym.keystore.file" system property, which
            defaults to <filename class="filename">security/keystore</filename>.
            If a cipher is not found, a default cipher using Triple DES with a random password
            is generated.
        </para>
    </section>
    <section id="secure-transport">
        <title>Secure Transport</title>
        <para>
            By specifying the "https" protocol for a URL, SymmetricDS will communicate over
            Secure Sockets Layer (SSL) for an encrypted transport.  The following properties
            need to be set with "https" in the URL:
            <variablelist>
                <varlistentry>
                    <term>
                        <command>sync.url</command>
                    </term>
                    <listitem>
                        <para>
                            This is the URL of the current node, so if you want to force other
                            nodes to communicate over SSL with this node, you specify "https" in the URL.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>registration.url</command>
                    </term>
                    <listitem>
                        <para>
                            This is the URL where the node will connect for registration when it 
                            first starts up.  To protect the registration with SSL, you specify
                            "https" in the URL.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            For incoming HTTPS connections, SymmetricDS depends on the webserver where
            it is deployed, so the webserver must be configured for HTTPS.
            As a standalone deployment, the "sym" launcher command provides options for 
            enabling HTTPS support.
        </para>
        <section id="secure-transport-sym">
            <title>Sym Launcher</title>
            <para>
                The "sym" launch command uses Jetty as an embedded web server.
                Using command line options, the web server can be told to listen for 
                HTTP, HTTPS, or both.
            </para>
            <para>
                <command>sym --port 8080 --server</command>
            </para>
            <para>
                <command>sym --secure-port 8443 --secure-server</command>
            </para>
            <para>
                <command>sym --port 8080 --secure-port 8443 --mixed-server</command>
            </para>
        </section>
        <section id="secure-transport-tomcat">
            <title>Tomcat</title>
            <para>
                If you deploy SymmetricDS to Apache Tomcat, it can be secured by editing the
                <filename class="filename">TOMCAT_HOME/conf/server.xml</filename>
                configuration file.  There is already a line that can be uncommented
                and changed to the following:
                
                <programlisting>
<![CDATA[<Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true" 
  maxThreads="150" scheme="https" secure="true" 
  clientAuth="false" sslProtocol="TLS"
  keystoreFile="/symmetric-ds-1.x.x/security/keystore" />]]></programlisting>
            </para>
        </section>
        <section id="secure-transport-keystore">
            <title>Keystores</title>
            <para>
                When SymmetricDS connects to a URL with HTTPS, Java checks the validity of the
                certificate using the built-in trusted keystore located at
                <filename class="filename">JRE_HOME/lib/security/cacerts</filename>.
                The "sym" launcher command overrides the trusted keystore to use its own
                trusted keystore instead, which is located at
                <filename class="filename">security/cacerts</filename>.
                This keystore contains the certificate aliased as "sym" for use in testing
                and easing deployments.                
                The trusted keystore can be overridden
                by specifying the <literal>javax.net.ssl.trustStore</literal> system property.
            </para>
            <para>
                When SymmetricDS is run as a secure server with the "sym" launcher,
                it accepts incoming requests using the key installed in the keystore
                located at
                <filename class="filename">security/keystore</filename>.
                The default key is provided for convenience of testing, but should be
                re-generated for security.
            </para>
        </section>
        <section id="secure-transport-keys">
            <title>Generating Keys</title>
            <para>
                To generate new keys and install a server certificate, use the
                following steps:
            </para>
            <procedure>
                <step>
                    <para>
                        Open a command prompt and navigate to the
                        <filename class="directory">security</filename>
                        subdirectory of your SymmetricDS installation.
                    </para>
                </step>
                <step>
                    <para>Delete the old key pair and certificate.</para>
                    <para>
                        <command>keytool -keystore keystore -delete -alias sym</command>
                    </para>
                    <para>
                        <command>keytool -keystore cacerts -delete -alias sym</command>
                    </para>
                    <programlisting><![CDATA[Enter keystore password:  changeit]]></programlisting>
                </step>
                <step>
                    <para>Generate a new key pair.</para>
                    <para>
                        <command>keytool -keystore keystore -alias sym -genkey -keyalg RSA -validity 10950</command>
                    </para>
                    <programlisting>
<![CDATA[Enter keystore password:  changeit
What is your first and last name?
  [Unknown]:  localhost
What is the name of your organizational unit?
  [Unknown]:  SymmetricDS
What is the name of your organization?
  [Unknown]:  JumpMind
What is the name of your City or Locality?
  [Unknown]:
What is the name of your State or Province?
  [Unknown]:
What is the two-letter country code for this unit?
  [Unknown]:
Is CN=localhost, OU=SymmetricDS, O=JumpMind, L=Unknown, ST=Unknown, C=Unknown
correct?
  [no]:  yes

Enter key password for <sym>
        (RETURN if same as keystore password):]]></programlisting>
                </step>
                <step>
                    <para>Export the certificate from the private keystore.</para>
                    <para>
                        <command>keytool -keystore keystore -export -alias sym -rfc -file sym.cer</command>
                    </para>
                </step>
                <step>
                    <para>Install the certificate in the trusted keystore.</para>
                    <para>
                        <command>keytool -keystore cacerts -import -alias sym -file sym.cer</command>
                    </para>
                </step>
            </procedure>
        </section>
    </section>
    <section id="basic-auth">
        <title>Basic Authentication</title>
        <para>
            SymmetricDS supports basic authentication for client and server nodes. 
            To configure a client node to use basic authentication when communicating with a server node, 
            specify the following startup parameters:
        </para>
            <variablelist>
                <varlistentry>
                    <term>
                        <command>http.basic.auth.username</command>
                    </term>
                    <listitem>
                        <para>
                            username for client node basic authentication.
                            [&#xA0;Default:&#xA0;]
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>http.basic.auth.password</command>
                    </term>
                    <listitem>
                        <para>
                            password for client node basic authentication.
                            [&#xA0;Default:&#xA0;]
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        <para>
            The SymmetricDS Standalone and Embedded Server also support basic authentication.
            This feature is enabled by specifying the basic authentication username and
            password using the following startup parameters:
        </para>
            <variablelist>
                <varlistentry>
                    <term>
                        <command>embedded.webserver.basic.auth.username</command>
                    </term>
                    <listitem>
                        <para>
                            username for basic authentication for an embedded server
                            or standalone server node.
                            [&#xA0;Default:&#xA0;]
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>embedded.webserver.basic.auth.password</command>
                    </term>
                    <listitem>
                        <para>
                            password for basic authentication for an embedded server
                            or standalone server node.
                            [&#xA0;Default:&#xA0;]
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        <para>
            If the server node is deployed to Tomcat or another application server as a WAR or EAR file, then 
            basic authentication is setup with the standard configuration in the WEB.xml file. 
        </para>
    </section>
    
     <section id="ip-filtering">
        <title>IP Filtering</title>
        <para>
            SymmetricDS supports restricting IP addresses of clients that are allowed to 
            connect to servers. The following filtering functionality is supported for IPv4
            addresses (IPv6 is currently not supported).
        </para> 
        <itemizedlist>
            <listitem>
                <para>CIDR (Classless Inter-Domain Routing) notation</para>
            </listitem>
            <listitem>
                <para>Wildcarding</para>
            </listitem>
            <listitem>
                <para>Range</para>
            </listitem>
            <listitem>
                <para>Literal</para>
            </listitem>            
        </itemizedlist>
    
    <section xml:id="filter.cidr">
        <title>CIDR Filter</title>
        <para>
            Classless Inter-Domain Routing, <ulink url='http://www.ietf.org/rfc/rfc1519.txt'>CIDR</ulink>, notation 
            is the preferred notation for restricting client connections to a server node in a SymmetricDS tree. 
            It is a commonly utilized format for IP address filtering. Many established frameworks, such as 
            <ulink url='http://httpd.apache.org/docs/1.3/mod/mod_access.html'>Apache</ulink>, utilize this notation for
            filtering IP addresses.
        </para>
        <para>
            The basis for implementing CIDR notation is defining the IP address block and significant
            bits of that address that are to be checked. The filter must be a well formatted IP address
            with a ending with a <quote>/</quote> followed by a numeric value between 0 and 32. The use
            of <quote>0</quote> denotes that all IP addresses are allowed (in which case it's fairly pointless
            to enable the filtering framework), and <quote>32</quote> signifies only the precesding IP address
            would be authorized. In the latter case, a <xref linkend="filter.literal" xrefstyle="table"/> string 
            would be recommended as it is significantly more obvious that only that address is allowed.
        </para>
        <example xml:id="ex.ip.cidr.filter">
        <title>CIDR Filter String Definition in symmetric.properties</title>
            <programlisting>
                #
                # Filter string definition to restrict connecting client
                # IP addresses
                #
                ip.filters=10.10.4.32/27, 10.5.0.0/16
            </programlisting>
        </example>

    </section>
    <section xml:id="filter.literal">
        <title>Literal Filter</title>
        <para>
            Literal filter definitions are just that: they define a single IP address that is authorized
            to connect to the server. The only requirement is that the filter string is a complete, well
            formatted IP address.
        </para>        
    </section>     
    <section xml:id="filter.wildcarding">
        <title>Wildcarding</title>
        <para>
            The wildcard notation allows all values for a specific piece of an IP address to be valid (0 to 255 for IPv4 addresses).
            This is denoted with a <quote>*</quote> within the specific piece (octet for IPv4) of an IP
            address. The wildcard character is the only allowable character within that piece of the address
            (no other characters included whitespace).
        </para>
        <para>
            Wildcard filters may be combined with <xref linkend="filter.range" xrefstyle="table"/>. 
            They may NOT be combined with  <xref linkend="filter.cidr" xrefstyle="table"/>.
        </para>
        <example xml:id="ex.ip.wildcard.filter">
        <title>Wildcard Filter String Definition in symmetric.properties</title>
            <programlisting>
                #
                # Filter string definition to restrict connecting client
                # IP addresses
                #
                ip.filters=10.10.*.40
            </programlisting>
        </example>        
    </section>
    <section  xml:id="filter.range">
        <title>Range Filters</title>
        <para>
            Range filter definitions allow for a numeric range to be specified within an address filter. A
            range must be a valid numeric range for an piece of an IP address (i.e. an octet in IPv4). The range
            definition must be in the form: 
        </para>   
        <example xml:id="ex.ip.range.filter">
        <title>Filter String Definition in symmetric.properties</title>
            <programlisting>
                #
                # Filter string definition to restrict connecting client
                # IP addresses
                #
                ip.filters=10.10.40-20.200-1
            </programlisting>
        </example>         
    </section>   
    <section xml:id='filter.innerworking'>
        <title>Inner workings</title>
        <para>
            Filter strings are compiled on startup, so the hit (although very small) of compiling
            the authorizers is incurred only once. Once compiled each request is passed through
            the chain of authorizers until either a authorization is passed or the chain is exhausted. In
            the latter case the request is denied and a protocol specific response is sent to the client. In 
            the case of HTTP this would be a response code of 401 (FORBIDDEN).
        </para>
    </section>
    <section xml:id='filter.configuration'>
        <title>Configuration</title>
        <para>
            Configuring IP filter strings is done through defining the following property in the
            SymmetricDS configuration (one of the symmetric .properties files). One need only to 
            define the <varname>ip.filter</varname> property and assign a comma <quote>,</quote> delimited 
            string of filter tokens to provide to the filter framework.
        </para>
        <example xml:id="ex.ip.filter">
        <title>Filter String Definition in symmetric.properties</title>
            <programlisting>
                #
                # Filter string definition to restrict connecting client
                # IP addresses
                #
                ip.filters=10.10.4.32/27, 100.50-40.10-5.*, 35.58.124.89
            </programlisting>
        </example>
    </section>
    
    <important>
        <para>
            Note, that there is obvious overlap between the some of the filtering notation, and hence, functionality. 
            The <xref linkend="filter.wildcarding" xrefstyle="table"/> and 
            <xref linkend="filter.range" xrefstyle="table"/>
            functionality exists to provide workarounds for scenarios where <xref linkend="filter.cidr" xrefstyle="table"/>
            notation and <xref linkend="filter.literal" xrefstyle="table"/> will not suffice.
        </para>
    </important>    
        
    <warning>
        <para>
            Take care in defining your filter string as it is possible to overlap filters. Also, as with
            the definition of any other property in the SymmetricDS configuration, if the property is
            defined in multiple properties files the property file that is read in last will override any
            previous filter string definitions.
        </para>
    </warning>
    </section>
</chapter>
