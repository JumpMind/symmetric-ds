<?xml version="1.0" encoding="UTF-8"?>
  <section id="terminology">
        <title>Terminology</title>
     
         <para>Before we provide the complete data model, however, a few key terms are worth additional consideration. Terms such as "nodes", "channels", "routers", 
        and "triggers" are fundamental to understanding SymmetricDS, and thus we will define them now.</para>
        <section id="terminology-nodes">
            <title>Nodes</title>
            <para>
                A <emphasis>node</emphasis> is a single instance of SymmetricDS, and can be thought of as a location which
                captures and <emphasis>synchronizes</emphasis> (receives or sends) data. Normally a node has a corresponding database that is
                associated with the node. Examples of nodes include:
                <itemizedlist>
                    <listitem>A single retail store register which contains a database that contains item information, item
                        prices, and saves sale information.</listitem>
                    <listitem>A laptop computer that is used to collect new employee hire information for later sending to a
                        central server.</listitem>
                    <listitem>A central office server that is used for aggregating sales data that has been sent from retail store
                        registers.</listitem>
                   
                </itemizedlist>
                In all of these examples, an instance of SymmetricDS would be installed on the computer and would interact with
                the database on the computer.
            </para>
            <para>A node also has a domain-specific identifier, an <emphasis>externalId</emphasis> that provides context within the local system.
           <!--  MDH:  Chris - can you provide an example of when this is useful? -->
           </para>
        </section>
        <section id="terminology-node-topology">
            <title>Node Topology</title>
            <para> Nodes in SymmetricDS are organized into an overall node topology, such as hub-and-spoke, tree-hiearchy, etc.
                The hierarchy chosen varies based on the particular goals of the SymmetricDS installation.</para>
            <para> For example, consider a small retail company which has a single register in each store. The company wishes to
                collect sales data on a common, central server, for use in tracking and reporting sales. The company might also
                want to be able to update prices on the central server and have the prices automatically sent down to each
                register. This is a simple SymmetricDS hub-and-spoke topology, with the central server serving as the hub and the
                registers as the nodes at the end of each spoke. If this hub-and-spoke topology where drawn as a tree hierarchy,
                the central office server would be the top node in the tree, and a series of child nodes representing each
                individual register would represent the lower level of the hierarchy.</para>
            <para> More complex topologies can also be used. Consider, for example, the same retail company that has expanded to
                have multiple registers in each store. The company may choose to place store servers in each store to perform
                tasks such as opening the store for the day, reconciling registers, assigning employees, etc. One approach to this
                could be to create a three-tier tree hierarchy. The highest tier, the central office, connects with each store's
                server. The store servers, in turn, communicate with the individual registers at the store.</para>
        </section>
        <section id="terminology-node-groups">
            <title>Node Groups</title>
            <para>
                As you can see, the individual nodes in a SymmetricDS installation (registers, servers, etc.) naturally organize
                into tiers or levels in an overall hierarchy, and typically the grouped nodes share common attributes. In fact, it
                is quite common for SymmetricDS to have hundreds or thousands of nodes sending and receiving information. Nodes
                which share common attributes are assigned to <emphasis>node groups</emphasis>. These node groups are frequently used to represent
                all nodes at a particular level of the overall node hierarchy. For the examples above, we might define a node
                group of:
                <itemizedlist>
                    <listitem>"register", to represent each store register</listitem>
                    <listitem>"hr-laptop", to represent all laptops that are used to collect employee information when detached
                        from the network.</listitem>
                    <listitem>"corp" or "central-office" to represent the node(s) that are aggregating sales data.</listitem>
                    <listitem>"store-server" to represent the back-office server that interacts with store registers and sends and
                        receives data from a central office server.</listitem>
                </itemizedlist>
                Node groups are used to ease configuration, primarily. For example, you can define the method in which data is
                synchronized by node group. In addition, specifying the specific data to be synchronized is done based on node
                groups.
            </para>
        </section>
        <section id="terminology-node-group-links">
            <title>Moving Data - Node Group Links and Push/Pull</title>
            <para> In SymmetricDS, a node group is <emphasis>linked</emphasis> to another node group through a node group link. In addition to
                establishing the flow of data between the two node groups, the link also specifies whether data is <emphasis>pushed</emphasis> to or
                <emphasis>pulled</emphasis> from a node.</para>
        </section>
        <section id="terminology-channels">
            <title>Channels</title>
            <para> In most SymmetricDS applications, not all data is created the same. Inevitably, some data is more important
                than the other data. SymmetricDS supports this idea through the concept of data channels, or <emphasis>channels</emphasis> for short.
                In SymmetricDS, you can assign a priority to individual channels such that your most important data is
                synchronized first. Through the use of channels you can also control how much data is synchronized in each channel
                each time. In addition, if synchronization errors should occur, the errors only block the individual channel in
                which they have occurred. Thus, other channels can continue synchronizing even if a particular channel is in
                error. Finally, data synchronization can be enabled or disabled by channel.</para>
            </section>
               <section id="terminology-triggers-routers">
                <title>Synch Conditions (Triggers and Routers)</title>
         
            <para> SymmetricDS makes extensive use of database triggers to capture and record changes to data of interest to a
                particular SymmetricDS instance. SymmetricDS creates these triggers automatically for the user based on
                configuration specified in the SymmetricDS <emphasis>trigger</emphasis> configuration tables. Triggers can be quite simple or quite
                sophisticated. You can, for example, control whether data changes are captured on inserts, deletes, updates, or
                any combination thereof. You can control whether you trigger changes when data has been received from other nodes
                (i.e., synchronize on incoming batches). Triggers are configured based on source and target <emphasis>node groups</emphasis>.</para>
            <para> While triggers specify which data changes to capture, <emphasis>routers</emphasis> are used to specify when and where the data
                changes are to be sent. You can, for example, choose to only route data when certain column values match a
                particular constant or come from a particular node.</para>
            <para> Routers can also specify whether to route when a node is undergoing what is known as an initial load (a clean,
                fresh load of data) or whether to route under normal (non-initial-load) synchronizing situations). Finally,
                routers can even be used to override default behavior and route by way of XML publishing.</para>
            <para>
                Routers provided in the base implementation currently include:
                <itemizedlist>
                    <listitem>Column Match Router - a router that compares old or new column values to a constant value or the
                        value of a node's external_id or node_id.</listitem>
                    <listitem>Sub-select Router - a router that executes a SQL expression against the database to select nodes to
                        route to. This SQL expression can be passed values of old and new column values.</listitem>
                    <listitem>Bean Shell Router - a router that executes a BSH expression in order to select nodes to route to.
                        The BSH expression can use the the old and new column values.</listitem>
                    <listitem>Xml Publishing Router - a router the publishes data changes directly to a messaging solution instead
                        of transmitting changes to registered nodes.</listitem>
                </itemizedlist>
                The mapping between the set of triggers and set of routers is many-to-many. More than one trigger can make use of
                a given router and vice versa.
            </para>
        </section>
    </section>
    