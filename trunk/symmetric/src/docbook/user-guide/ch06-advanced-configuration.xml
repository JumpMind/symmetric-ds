<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="ch06-advanced-configuration" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml">
    <title>Advanced Configuration</title>
    <section>
        <title>Multi-Tiered Synchronization</title>
        <para>
            At times, there may be scenarios where data needs to flow through multiple tiers of nodes that
            are organized in a tree-like network with each tier requiring a different subset of data.  For example,
            you may have a system where the lowest tier may by a computer or device located in a store.  Those devices 
            may connect to a server located physically at that store.  Then the store server may communicate with 
            a corporate server or even a regional server.
        </para>
        <para>
            The different tiers would be device, store, region and corporate.  A tier is typically represented by a node group.  Each node in 
            the tier would belong to the node group representing that tier.  
        </para>
        <para>
            A node will always push and pull data to other node groups according to the node group link configuration.  
            A node can only pull and push data to other nodes that are represented as rows in the node table in its database.  Because of this, a tree-like 
            hierarchy of nodes can be created by having only a subset of nodes belonging to the same node group represented at the different branches of the tree.  
        </para>
        <para>
            If auto registration is turned <emphasis>off</emphasis>, then this setup must occur manually by opening registration 
            for the desired nodes at the desired parent node and by configuring each node's registration.url to be the parent node's URL.  
            The parent node is always tracked by the setting of the parent's node_id in the created_at_node_id column of the new node.  
            When a node registers and downloads its configuration it is always provided the configuration for all nodes that were 
            <emphasis>created</emphasis> at the node that it is registering with.
        </para>
        <para>
            Most tiers will require the SymmetricDS <emphasis>server</emphasis> software.  It must be deployed to any node that is pulled from or pushed to.  If the node only pushes and pulls from other nodes, then only
            the client software (no HTTP server) is required.
        </para> 
        <para>
            Nodes that service many clients may be deployed as a web farm for scalability purposes.  In this scenario a single node may have multiple SymmetricDS server 
            instances that are configured the same and are fronted by some type of stateless load balancer. 
        </para>        
    </section>
    <section>
        <title>Node Select</title>
        <para>
            Synchronized data can be routed to a specific node or group of nodes by providing a SQL expression in the trigger configuration table called a node_select expression.
            If your table has a column named client_id which contains the same value as your node's external_id, then you can use node_select like this: 
            <programlisting><![CDATA[
            and c.external_id = $(curTriggerValue).client_id 
            ]]></programlisting> 
            The triggerValue variables let you specify if you want the before, after, or current value of the row being changed. Here are the variables: 
            <itemizedlist>
               <listitem>
                   <para>$(newTriggerValue)  </para>
               </listitem>
               <listitem>
                   <para>$(oldTriggerValue) </para>
               </listitem>
               <listitem>
                   <para>$(curTriggerValue)  </para>
               </listitem>
            </itemizedlist>
            These get replaced with something that can be understood by the database you are using. For example, on Oracle the "$(newTriggerValue)" is 
            replaced with ":new". The curTriggerValue will use the oldTriggerValue on a delete change, otherwise use newTriggerValue. 
        </para>
    </section>    
    <section>
        <title>Initial Load</title>
        <para>
            There are variables you can use when specifying the initial_load_select SQL for
            a Trigger that will be replaced at runtime:
        </para> 
        <itemizedlist>
            <listitem>
                <para>$(nodeId) - the node ID of the target node </para>
            </listitem>
            <listitem>
                <para>$(groupId) - the node group ID of the target node  </para>
            </listitem>
            <listitem>
                <para>$(externalId) - the external ID of the target node </para>
            </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>Bi-Directional Synchronization</title>
        <para>
            SymmetricDS allows tables to be synchronized bi-directionally.  Note that an outgoing 
            synchronization does not process changes during an incoming synchronization on the same node unless the trigger 
            was created with the sync_on_incoming_batch flag set.  If the sync_on_incoming_batch flag
            is set, then update loops are prevented by a feature that is available in most database dialects.  
            During an incoming synchronization the source node_id is put into a database session variable that is 
            available to the database trigger.  Data events are not generated if the target node_id 
            on an outgoing synchronization is equal to the source node_id.  
        </para> 
        <para>
            When synchronizing tables in both directions, the sync_column_level flag may be enabled.  
            This indicates to the data loader that only columns that have changed should be updated.  
            In order to accomplish this, both old and new data are transmitted from the source node 
            to the target node.  Because of the extra data overhead this feature should only be 
            enabled if needed.
        </para>         
        <para>
            More complex conflict resolution strategies can be accomplished by using the 
            <literal>IDataLoaderFilter</literal> extension point which has access to both 
            old and new data.
        </para>         
    </section>    
    <section>
        <title>Dead Triggers</title>
        <para>
            Normally a Trigger is specified to capture data changes to a table and send them to
            a target Node Group.  A dead Trigger is one that does not capture data changes.
            In other words, the sync_on_insert, sync_on_update, and sync_on_delete properties
            for the Trigger are all set to false.  Because the Trigger is specified, it will
            be included in the initial load of data for target Nodes.
        </para>
        <para>
            A dead Trigger might be used to load a read-only lookup table.  It could be used
            to load a table that needs populated with example or default data.
            Another use is a recovery load of data for tables that have a single direction
            of synchronization.  For example, a retail store records sales transaction that
            synchronize in one direction by trickling back to the central office.
            If the retail store needs to recover all the sales transactions, they can be sent
            are part of an initial load from the central office by setting up dead Triggers
            that "sync" in that direction.
        </para>
        <para>
            The following SQL statement sets up a non-syncing dead Trigger that sends
            the sale_transaction table to the "store" Node Group from the "corp" Node Group during
            an initial load.
            <programlisting>
<![CDATA[insert into SYM_TRIGGER 
  (source_table_name, source_node_group_id, target_node_group_id, channel_id, 
   sync_on_insert, sync_on_update, sync_on_delete, 
   initial_load_order, last_updated_by, last_updated_time, create_time)
values
  ('sale_transaction', 'corp', 'store', 'sale_transaction', 
   0, 0, 0, 
   105, 'demo', current_timestamp, current_timestamp);]]></programlisting>
        </para>
    </section>
    <section>
        <title>Database Purging</title>
    </section>
    <section>
        <title>Clustering</title>
    </section>    
    <section>
        <title>Extension Points</title>
        <para>
             SymmetricDS may be extended via a plug-in like architecture where extension point interfaces 
             may be implemented by a custom class and registered with the synchronization engine.  All supported extension 
             points extend the IExtensionPoint interface.  The currently available extension points are documented in the following sections.  
        </para>
        <para>
             When the synchronization engine starts up, a Spring 
             post processor searches the Spring ApplicationContext for any registered classes which implement 
             IExtensionPoint.  An IExtensionPoint designates whether it should be auto registered or not.  If the extension point 
             is to be auto registered then the post processor registers the known interface with the appropriate service.
        </para>
        <para>
             The INodeGroupExtensionPoint interface may be optionally implemented to designate that auto registered 
             extension points should only be auto registered with specific node groups.
             <programlisting><![CDATA[/**
 * Only apply this extension point to the 'root' node group.
 */
 public String[] getNodeGroupIdsToApplyTo() {
     return new String[] { "root" };
 }
]]></programlisting>             
        </para>
        <para>
             SymmetricDS will look for Spring configured extensions in the application Classpath by importing any Spring 
             XML configuration files found matching the following pattern: META-INF/services/symmetric-*-ext.xml.
        </para>
        <section>
            <title>IParameterFilter</title>
            <para>
                Parameter values can be specified in code using a parameter filter.  Note that there can be only one parameter
                filter per engine instance.  The IParameterFilter replaces the depreciated IRuntimeConfig from prior releases.
                <programlisting><![CDATA[public class MyParameterFilter 
    implements IParameterFilter, INodeGroupExtensionPoint {

    /**
     * Only apply this filter to stores
     */
    public String[] getNodeGroupIdsToApplyTo() {
        return new String[] { "store" };
    }

    public String filterParameter(String key, String value) {
        // look up a store number from an already existing properties file.
        if (key.equals(ParameterConstants.EXTERNAL_ID)) {
            return StoreProperties.getStoreProperties().
              getProperty(StoreProperties.STORE_NUMBER);
        } 
        return value;
    }

    public boolean isAutoRegister() {
        return true;
    }

}]]></programlisting> 
            </para>
        </section>        
        <section>
            <title>IDataLoaderFilter</title>         
            <para>
                Data can be filtered as it is loaded into the target database or when
                it is extracted from the source database.
            </para>            
            <para>
                As data is loaded into the target database, a filter can change the
                data in a column or save it somewhere else.  It can also specify by the
                return type of the function call that the data loader should continue on 
                and load the data (by returning true) or ignore it (by returning false). One 
                possible use of the filter might be to
                route credit card data to a secure database and blank it out as it loads 
                into less-restricted reporting database.
            </para>
            <para>
                An IDataLoaderContext is passed to each of the callback methods.  A new 
                context is created for each synchronization.  The context provides methods to 
                lookup column indexes by column name, get table meta data, and provides access to 
                old data if the sync_column_level flag is enabled.  The context also provides a means 
                to share data during a synchronization between different rows of data that are 
                committed in a  database transaction and are in the same channel.  It does so by 
                providing a context cache which can be populated by the extension point.
            </para>  
            <para>
                Many times the IDataLoaderFilter will be combined with the IBatchListener.  The 
                XmlPublisherFilter (in the org.jumpmind.symmetric.ext package) is a good example 
                of using the combination of the two extension points in order to create XML messages 
                to be published to JMS.
            </para>          
            <para>
                A class implementing the IDataLoaderFilter interface is injected onto the
                DataLoaderService in order to receive callbacks when data is inserted,
                updated, or deleted.
                
                <programlisting><![CDATA[public MyFilter implements IDataLoaderFilter {
                
    public boolean isAutoRegister() {
        return true;
    }
 
    public boolean filterInsert(IDataLoaderContext context,
        String[] columnValues) {
        return true;
    }
    
    public boolean filterUpdate(IDataLoaderContext context, 
        String[] columnValues, String[] keyValues) {
        return true;
    }
    
    public void filterDelete(IDataLoaderContext context, 
        String[] keyValues) {
        return true;
    }

}]]></programlisting>
            </para>
            <para>
                The filter class is specified as a Spring-managed bean.  A custom Spring XML file
                is specified as follows in a jar at META-INF/services/symmetric-myfilter-ext.xml.
                
                <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd">
 
    <bean id="myFilter" class="com.mydomain.MyFilter"/>
     
</beans>]]></programlisting>
            </para>
        </section>
        <section>
            <title>IColumnFilter</title>
            <para></para>
        </section>
        <section>
            <title>IBatchListener</title>
            <para></para>
        </section>
        <section>
            <title>IReloadListener</title>
            <para></para>
        </section>                
        <section>
            <title>IExtractorFilter</title>
            <para></para>
        </section>
        <section>
            <title>INodeIdGenerator</title>
            <para>
             This extension point allows SymmetricDS users to implement their own algorithms for how 
             node ids and passwords are generated or selected during the registration process.  There may be 
             only one node generator per SymmetricDS instance.
            </para>
        </section>
        <section>
            <title>ITriggerCreationListener</title>
            <para></para>
        </section>                
    </section>
    <section>
        <title>Secure Transport</title>
        <para>
            By specifying the "https" protocol for a URL, SymmetricDS will communicate over
            Secure Sockets Layer (SSL) for an encrypted transport.  The following properties
            need to be set with "https" in the URL:
            <variablelist>
                <varlistentry>
                    <term>
                        <command>my.url</command>
                    </term>
                    <listitem>
                        <para>
                            This is the URL of the current node, so if you want to force other
                            nodes to communicate over SSL with this node, you specify "https" in the URL.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>registration.url</command>
                    </term>
                    <listitem>
                        <para>
                            This is the URL where the node will connect for registration when it 
                            first starts up.  To protect the registration with SSL, you specify
                            "https" in the URL.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            For incoming HTTPS connections, SymmetricDS depends on the webserver where
            it is deployed, so the webserver must be configured for HTTPS.
            As a standalone deployment, the "sym" launcher command provides options for 
            enabling HTTPS support.
        </para>
        <section>
            <title>Sym Launcher</title>
            <para>
                The "sym" launch command uses Jetty as an embedded web server.
                Using command line options, the web server can be told to listen for 
                HTTP, HTTPS, or both.
            </para>
            <para>
                <command>sym --port 8080 --server</command>
            </para>
            <para>
                <command>sym --secure-port 8443 --secure-server</command>
            </para>
            <para>
                <command>sym --port 8080 --secure-port 8443 --mixed-server</command>
            </para>
        </section>
        <section>
            <title>Tomcat</title>
            <para>
                If you deploy SymmetricDS to Apache Tomcat, it can be secured by editing the
                <filename class="filename">TOMCAT_HOME/conf/server.xml</filename>
                configuration file.  There is already a line that can be uncommented
                and changed to the following:
                
                <programlisting>
<![CDATA[<Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true" 
  maxThreads="150" scheme="https" secure="true" 
  clientAuth="false" sslProtocol="TLS"
  keystoreFile="/symmetric-ds-1.x.x/security/keystore" />]]></programlisting>
            </para>
        </section>
        <section>
            <title>Keystores</title>
            <para>
                When SymmetricDS connects to a URL with HTTPS, Java checks the validity of the
                certificate using the built-in trusted keystore located at
                <filename class="filename">JRE_HOME/lib/security/cacerts</filename>.
                The "sym" launcher command overrides the trusted keystore to use its own
                trusted keystore instead, which is located at
                <filename class="filename">security/cacerts</filename>.
                This keystore contains the certificate aliased as "sym" for use in testing
                and easing deployments.                
                The trusted keystore can be overridden
                by specifying the "javax.net.ssl.trustStore" system property.
            </para>
            <para>
                When SymmetricDS is run as a secure server with the "sym" launcher,
                it accepts incoming requests using the key installed in the keystore
                located at
                <filename class="filename">security/keystore</filename>.
                The default key is provided for convenience of testing, but should be
                re-generated for security.
            </para>
        </section>
        <section>
            <title>Generating Keys</title>
            <para>
                To generate new keys and install a server certificate, use the
                following steps:
            </para>
            <procedure>
                <step>
                    <para>
                        Open a command prompt and navigate to the
                        <filename class="directory">security</filename>
                        subdirectory of your SymmetricDS installation.
                    </para>
                </step>
                <step>
                    <para>Delete the old key pair and certificate.</para>
                    <para>
                        <command>keytool -keystore keystore -delete -alias sym</command>
                    </para>
                    <para>
                        <command>keytool -keystore cacerts -delete -alias sym</command>
                    </para>
                    <programlisting><![CDATA[Enter keystore password:  changeit]]></programlisting>
                </step>
                <step>
                    <para>Generate a new key pair.</para>
                    <para>
                        <command>keytool -keystore keystore -alias sym -genkey -keyalg RSA -validity 10950</command>
                    </para>
                    <programlisting>
<![CDATA[Enter keystore password:  changeit
What is your first and last name?
  [Unknown]:  localhost
What is the name of your organizational unit?
  [Unknown]:  SymmetricDS
What is the name of your organization?
  [Unknown]:  JumpMind
What is the name of your City or Locality?
  [Unknown]:
What is the name of your State or Province?
  [Unknown]:
What is the two-letter country code for this unit?
  [Unknown]:
Is CN=localhost, OU=SymmetricDS, O=JumpMind, L=Unknown, ST=Unknown, C=Unknown
correct?
  [no]:  yes

Enter key password for <sym>
        (RETURN if same as keystore password):]]></programlisting>
                </step>
                <step>
                    <para>Export the certificate from the private keystore.</para>
                    <para>
                        <command>keytool -keystore keystore -export -alias sym -rfc -file sym.cer</command>
                    </para>
                </step>
                <step>
                    <para>Install the certificate in the trusted keystore.</para>
                    <para>
                        <command>keytool -keystore cacerts -import -alias sym -file sym.cer</command>
                    </para>
                </step>
            </procedure>
        </section>
    </section>
</chapter>
