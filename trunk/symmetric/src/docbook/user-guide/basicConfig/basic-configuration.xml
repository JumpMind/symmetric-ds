<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="ch05-basic-configuration" xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns="http://docbook.org/ns/docbook"
    xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml">
    <title>Basic Configuration</title>
    <para>
        To get an instance of SymmetricDS running, it needs to be given an identity and it needs to know how
        to connect to the database it will manage.  A basic way to specify this is to place properties
        in the symmetric.properties file.  When started up, the SymmetricDS reads the configuration
        and state from the database.  If the configuration tables are missing, they are created
        automatically (auto creation can be disabled).  A basic configuration describes the
        following:
            <itemizedlist>
                <listitem>
                    <para><emphasis role="bold">Node Group</emphasis> - each node belongs to a group</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">Node Group Link</emphasis> - two nodes groups are linked together for synchronization</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">Node</emphasis> - an instance of SymmetricDS</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">Channel</emphasis> - data is categorized to synchronize independently</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">Trigger</emphasis> - specify tables for which changes in the database should be captured</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">Router</emphasis> - specify the node groups between which changes should be synchronized</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">TriggerRouter</emphasis> - map routers to triggers</para>
                </listitem>
            </itemizedlist>
        During start up, the Triggers are verified against the database, and database triggers
        are installed on tables that require data changes to be captured.  The route job, pull job and push job
        begin running as required to synchronize changes with other nodes.
    </para>
    <section id="ch05-basic-properties">
        <title>Basic Properties</title>
        <para>
            Each node requires properties that will connect it to the database and register
            it with a parent node.  To give a node its identity, the following properties are used:
        </para>
        <variablelist>
            <varlistentry>
                <term>
                    <command>group.id</command>
                </term>
                <listitem>
                    <para>
                        The node group that this node is a member of. Synchronization is specified
                        between node groups, which means you only need to specify it once for
                        multiple nodes in the same group. For example, you might have groups of
                        "STORE", "REGION", and "CENTRAL" that synchronize.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <command>external.id</command>
                </term>
                <listitem>
                    <para>
                        The External ID for this node has meaning to the user and provides
                        integration into the system where it is deployed. For example, it might be a
                        retail store number or a region number. The External ID can be used in
                        expressions for conditional and subset data synchronization. Behind the
                        scenes, each node has a unique sequence number for tracking synchronization
                        events. That makes it possible to assign the same External ID to multiple
                        nodes, if desired.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <command>sync.url</command>
                </term>
                <listitem>
                    <para>
                        The URL where this node can be contacted for synchronization.
                        At startup and during each heartbeat, the node updates its entry in
                        the database with this URL.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para>
            When a new node is first started, it is has no information about synchronizing. It
            contacts the registration server in order to join the network and receive its
            configuration. The configuration for all nodes is stored on the registration server, and
            the URL must be specified in the following property:
        </para>
        <variablelist>
            <varlistentry>
                <term>
                    <command>registration.url</command>
                </term>
                <listitem>
                    <para>
                        The URL where this node can connect for registration to receive its
                        configuration. The registration server is part of SymmetricDS and is enabled
                        as part of the deployment.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para>
            When deploying to an application server, it is common for database connection pools
            to be found in the Java naming directory (JNDI).  In this case, set the following property:
        </para>
        <variablelist>
            <varlistentry>
                <term>
                    <command>db.jndi.name</command>
                </term>
                <listitem>
                    <para>
                        The name of the database connection pool to use, which is registered in the JNDI
                        directory tree of the application server. It is recommended that this DataSource is
                        NOT transactional, because SymmetricDS will handle its own transactions.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para>
            For a deployment where the database connection pool should be created using a JDBC driver,
            set the following properties:
        </para>
        <variablelist>
            <varlistentry>
                <term>
                    <command>db.driver</command>
                </term>
                <listitem>
                    <para>
                        The class name of the JDBC driver.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <command>db.url</command>
                </term>
                <listitem>
                    <para>
                        The JDBC URL used to connect to the database.
                    </para> 
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <command>db.user</command>
                </term>
                <listitem>
                    <para>
                        The database username, which is used to login, create, and update SymmetricDS tables.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <command>db.password</command>
                </term>
                <listitem>
                    <para>
                        The password for the database user.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>
    <section id="ch05-node-group">
        <title>Node Group</title>
        <para>
            Each node must belong to a node group, a collection of one or more nodes.
            A common use of node groups is to describe a level in a hierarchy of data synchronization.
            For example, at a retail store chain, there might be a few nodes that belong to "corp", which
            sync with hundreds of nodes that belong to "store", which sync with thousands of nodes that 
            belong to "register".
        </para>
        <para>
            The following SQL statements would create node groups for "corp" and "store". 

            <programlisting>
<![CDATA[insert into SYM_NODE_GROUP 
  (node_group_id, description)
values
  ('store', 'A retail store node');

insert into SYM_NODE_GROUP 
  (node_group_id, description)
values
  ('corp', 'A corporate node');]]></programlisting>
        </para>
    </section>
    <section id="ch05-node-group-link">
        <title>Node Group Link</title>
        <para>
            To establish synchronization between nodes, two node groups are linked together.  The direction
            of synchronization is determined by specifying a source and target node group.
            If synchronization should occur in both directions, then two links are created in opposite
            directions.  The target node group receives data changes by either push or pull methods.
            A push method causes the source node group to connect to the target, while a pull method
            causes it to wait for the target to connect to it.
        </para>
        <para>
            The following SQL statements links the "corp" and "store" node groups for synchronization.
            It configures the "store" nodes to push their data changes to the "corp" nodes,
            and the "corp" nodes to send changes to "store" nodes by waiting for a pull.
            
            <programlisting>
<![CDATA[insert into SYM_NODE_GROUP_LINK
  (source_node_group, target_node_group, data_event_action)
values
  ('store', 'corp', 'P');

insert into SYM_NODE_GROUP_LINK
  (source_node_group, target_node_group, data_event_action)
values
  ('corp', 'store', 'W');]]></programlisting>
        </para>
    </section>
    <section id="ch05-node">
        <title>Node</title>
        <para>
            Each instance of SymmetricDS is a node that can be uniquely identified. 
            The node has a unique identifier used by the system, and the user provides an external identifier
            for context in the local system.  For most common use, the two identifiers are the same.
            The registration process generates and sends the identity and password to the node, along
            with its synchronization configuration.  The top-level registration server must
            have its identity provided by the user since it has no parent to contact.
        </para>
        <para>
            The following SQL statements setup a top-level registration server as a node identified
            as "00000" in the "corp" node group.
            
            <programlisting>
<![CDATA[insert into SYM_NODE 
  (node_id, node_group_id, external_id, sync_enabled)
values
  ('00000', 'corp', '00000', 1);

insert into SYM_NODE_IDENTITY values ('00000');]]></programlisting>
        </para>
    </section>
    <section id="ch05-channel">
        <title>Channel</title>
        <para>
            Data changes in the database are captured in the order that they occur, which is preserved
            when synchronizing to other nodes.  Some data may need priority for synchronization despite
            the normal order of events.  Channels provide a higher-level processing order of data, a limit on the
            amount of data, and isolation from errors in other channels.  By categorizing data into
            channels and assigning them to Triggers, the user gains more control and visibility into
            the flow of data.
        </para>
        <para>
            The following SQL statements setup channels for a retail store.  An "item" channel includes
            data for items and their prices, while a "sale_transaction" channel includes data for ringing
            sales at a register. 
            
            <programlisting>
<![CDATA[insert into SYM_CHANNEL 
  (channel_id, processing_order, max_batch_size, enabled, description)
values
  ('item', 10, 1000, 1, 'Item and pricing data');

insert into SYM_CHANNEL 
  (channel_id, processing_order, max_batch_size, enabled, description)
values
  ('sale_transaction', 1, 1000, 1, 'retail sale transactions from register');]]></programlisting>
        </para>
    </section>
    <section id="ch05-trigger">
        <title>Trigger</title>
        <para>
            At the heart of SymmetricDS are Triggers. Whenever the Trigger entry is updated, 
            the last_update_time should be updated to indicate that the database trigger should also be updated.
        </para>
        <para>
            The following SQL statement defines a Trigger that will capture data for a table named "item"
            whenever data is inserted, updated, or deleted. The trigger is assigned to a channel also called 'item'.            
            <programlisting>
<![CDATA[insert into sym_trigger 
(trigger_id,source_table_name,channel_id,last_update_time,create_time)
values('item','item','item',current_timestamp,current_timestamp);
]]></programlisting>
        </para>
    </section>


</chapter>
