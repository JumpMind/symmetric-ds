<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="ch04-architecture" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml">
    <title>Architecture</title>
    <para>
        The SymmetricDS software allows for outgoing and incoming changes to be synchronized
        to/from other databases.  The Node that initiates the connection is the client, and the
        Node receiving a connection is the host.  Because synchronization is configurable to
        push or pull in either direction, the same Node can act as either a client or a host
        in different circumstances.
    </para>
    <para>
        The software consists of a series of jobs, managers, servlets, and services wired together
        through dependency injection using the <ulink url="http://springframework.org">Spring Framework</ulink>.
    </para>    
    <para>
        <figure>
            <title>Software Stack</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/software-stack.gif" format="GIF" />
                </imageobject>
            </mediaobject>
        </figure>
    </para>    
    <para>
        As a client, the Node runs the Push Job and Pull Job on a timer thread in order to synchronize
        with a host Node.  The Push Job uses services to batch, extract, and stream data to
        another Node (i.e. it pushes data).  The response from a push is a list
        of batch acknowlegements to indicate that data was loaded.
        The Pull Job uses services to load data that is streamed from another Node
        (i.e. it pulls data).  After loading data, a second connection is made to send a list
        of batch acknowlegements.
    </para>
    <para>
        As a host, the Node waits for incoming connections that pull, push, or acknowledge data changes.
        The Push Servlet uses services to load data that is pushed from a client Node.
        After loading data, it responds with a list of batch acknowledgements.
        The Pull Servlet uses services to batch, extract, and stream data back to the client Node.
        The Ack Servlet uses services to update the status of data that was loaded at a client Node.
    </para>
    <para>
        The Transport Manager handles the incoming and outgoing streams of data between Nodes.
        The default transport is based on a simple implementation over HTTP.  An internal transport
        is also provided.  It is possible to add other implementations, such as a socket-based transport manager.
    </para> 
    <para>
        Node communication over HTTP is represented in the following figure.
    </para> 
    <para>
        <figure>
            <title>Node Communication</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/seq-node-communication.gif" format="GIF" />
                </imageobject>
            </mediaobject>
        </figure>
    </para>    
    <para>
        The <literal>SymmetricEngine</literal> is wrapper API that can be used to directly start the client services only.  The 
        <literal>SymmetricWebServer</literal> is a wrapper API that can be used to directly start <emphasis>both</emphasis> the
        client and host services inside a Jetty web container.
    </para>   
    <!-- TODO
    <section id="ch04-components">
        <title>Software Components</title>
        <para>
            <figure>
                <title>Startup Sequence Diagram</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/seq-startup.gif" format="GIF" />
                    </imageobject>
                </mediaobject>
            </figure>
        </para>
        <para>
            <figure>
                <title>Client Side Pull Sequence Diagram</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/seq-pull-client.gif" format="GIF"  />
                    </imageobject>
                </mediaobject>
            </figure>
        </para>
        <para>
            <figure>
                <title>Host Side Pull Sequence Diagram</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/seq-pull-host.gif" format="GIF"  />
                    </imageobject>
                </mediaobject>
            </figure>
        </para>
        <para>
            <figure>
                <title>Client Side Push Sequence Diagram</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/seq-push-client.gif" format="GIF"  />
                    </imageobject>
                </mediaobject>
            </figure>
        </para>
        <para>
            <figure>
                <title>Host Side Push Sequence Diagram</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/seq-push-host.gif" format="GIF"  />
                    </imageobject>
                </mediaobject>
            </figure>
        </para>        
    </section>
     -->
    <section id="ch04-deploy">
        <title>Deployment Options</title>
        <para>The following deployment options are possible:</para>
        <itemizedlist>
            <listitem>
                <para>Web application archive (WAR) deployed to an application server</para>
                <para>
                    This option means packaging a WAR file and deploying to your favorite
                    web server, like Apache Tomcat.  It's a little more work, but you
                    can configure the web server to do whatever you need.
                </para>                
            </listitem>
            <listitem>
                <para>Standalone service that embeds Jetty web server</para>
                <para>
                    This option means running the <emphasis>sym</emphasis> command line, which launches the built-in Jetty web server.  
                    This is a simple option because it is already provided, but you lose the flexibility to configure 
                    the web server any further.
                </para>
            </listitem>
            <listitem>
                <para>Embedded as a Java library in an application</para>
                <para>
                    This option means you must write a wrapper Java program that runs
                    SymmetricDS.  You would probably use Jetty web server, which is also embeddable.
                    You could bring up an embedded database like Derby.  You could configure the
                    web server, database, or SymmetricDS to do whatever you needed, but it's also
                    the most work of the 3 options.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            The deployment model you choose depends on how much flexibility you need versus how easy you
            want it to be.  Both Jetty and Tomcat are excellent, scalable web servers that
            compete with each other and have great performance.  Most people choose either
            the <emphasis>Standalone</emphasis> or <emphasis>Web Archive</emphasis> with Tomcat 5.5 or 6.  Deploying to Tomcat
            is a good middle-of-the-road decision that requires a little more work for more flexibility.
        </para>
        <section id="ch04-deploy-war">
            <title>Web Archive</title>
            <para>
                As a web application archive, a WAR or EAR file is deployed to an application server,
                such as Tomcat, Jetty, or JBoss.  The structure of the archive should have a web.xml
                file in the WEB-INF folder, the symmetric.properties file in the WEB-INF/classes folder,
                and the required JAR files in the WEB-INF/lib folder.
            </para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/symmetric_war.gif" format="GIF" />
                </imageobject>
            </mediaobject>
            <para>
                The <filename>WEB-INF/web.xml</filename> file
                is configured with a <literal>SymmetricEngineContextLoaderListener</literal>
                the required SymmetricFilter mapping, and the required SymmetricServlet mapping.
                Note that this was changed in version 1.4.0 to make it easier to configure
                Symmetric.
            </para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
        http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    version="2.5">

    <display-name>sync</display-name>
    
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <!-- You can optionally specify other Spring files to load into same context here -->
        <param-value>classpath:symmetric.xml</param-value>
    </context-param>
    
    <filter>
        <filter-name>SymmetricFilter</filter-name>
        <filter-class>
            org.jumpmind.symmetric.web.SymmetricFilter
        </filter-class>
    </filter>
    
    <filter-mapping>
        <filter-name>SymmetricFilter</filter-name>
        <servlet-name>/*</servlet-name>
    </filter-mapping>
    
    <listener>
        <listener-class>
            org.jumpmind.symmetric.SymmetricEngineContextLoaderListener
        </listener-class>
    </listener>
    
    <servlet>
        <servlet-name>SymmetricServlet</servlet-name>
        <servlet-class>
            org.jumpmind.symmetric.web.SymmetricServlet
        </servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>SymmetricServlet</servlet-name>
        <url-pattern>/*</url-pattern>
    </servlet-mapping>

</web-app>]]></programlisting>
            <para>
                This example starts all the SymmetricDS Servlets with Filters to compress the
                stream, authenticate nodes, and reject nodes when the server is too busy.
            </para>
            <para>
                The web.base.servlet.path property in symmetric.properties can be set if the SymmetricServlet needs to
                coexist with other Servlets.
            </para>            
        </section>
        <section id="ch04-deploy-standalone">
            <title>Standalone</title>
            <para>
                A standalone service can use the <literal>sym</literal> command line options to start
                a server.  An embedded instance of Jetty is used to service web
                requests for all the servlets.
            </para>
            <programlisting><![CDATA[/symmetric/bin/sym --properties root.properties --port 8080 --server
]]></programlisting>
            <para>
                This example starts the SymmetricDS server on port 8080 with the startup
                properties found in the <filename>root.properties</filename> file.
            </para>
        </section>
        <section id="ch04-deploy-embedded">
            <title>Embedded</title>
            <para>
                A Java application with the SymmetricDS Java Archive (JAR) library on its
                classpath can use the <literal>SymmetricEngine</literal> to start the server.
            </para>
            <programlisting><![CDATA[
import org.jumpmind.symmetric.SymmetricEngine;

public class StartSymmetricDSEngine {

    public static void main(String[] args) throws Exception {
        String workingDirectory = System.getProperty("user.dir");

        SymmetricWebServer node = new SymmetricWebServer(new SymmetricEngine(
                "classpath://my-application.properties", "file://"
                + workingDirectory + "/my-environment.properties"));

        // this will create the database, sync triggers, start jobs running
        node.start(8080);
        
        // this will stop the node
        node.stop();
    }   

}]]></programlisting>
            <para>
                This example starts the SymmetricDS server on port 8080 with startup properies found
                in two locations.  The first file, <filename>my-application.properties</filename>,
                is packaged in the application to provide properties that override the SymmetricDS 
                default values.  The second file, <filename>my-environment.properties</filename>,
                is located in a working directory that overrides properties specific to the
                environment.  This allows the same application to deploy to development and 
                production environments using different <filename>my-environment.properties</filename>.
            </para>
        </section>
    </section>
</chapter>
