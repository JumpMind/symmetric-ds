<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="advanced-configuration" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml">
    <title>Advanced Configuration</title>
    <section id="multi-tier">
        <title>Multi-Tiered Synchronization</title>
        <para>
            At times, there may be scenarios where data needs to flow through multiple tiers of nodes that
            are organized in a tree-like network with each tier requiring a different subset of data.  For example,
            you may have a system where the lowest tier may by a computer or device located in a store.  Those devices 
            may connect to a server located physically at that store.  Then the store server may communicate with 
            a corporate server or even a regional server.
        </para>
        <para>
            The different tiers would be device, store, region and corporate.  A tier is typically represented by a node group.  Each node in 
            the tier would belong to the node group representing that tier.  
        </para>
        <para>
            A node will always push and pull data to other node groups according to the node group link configuration.  
            A node can only pull and push data to other nodes that are represented as rows in the node table in its database.  Because of this, a tree-like 
            hierarchy of nodes can be created by having only a subset of nodes belonging to the same node group represented at the different branches of the tree.  
        </para>
        <para>
            If auto registration is turned <emphasis>off</emphasis>, then this setup must occur manually by opening registration 
            for the desired nodes at the desired parent node and by configuring each node's registration.url to be the parent node's URL.  
            The parent node is always tracked by the setting of the parent's node_id in the created_at_node_id column of the new node.  
            When a node registers and downloads its configuration it is always provided the configuration for all nodes that were 
            <emphasis>created</emphasis> at the node that it is registering with.
        </para>
        <para>
            Most tiers will require the SymmetricDS <emphasis>server</emphasis> software.  It must be deployed to any node that is pulled from or pushed to.  If the node only pushes and pulls from other nodes, then only
            the client software (no HTTP server) is required.
        </para> 
        <para>
            Nodes that service many clients may be deployed as a web farm for scalability purposes.  In this scenario a single node may have multiple SymmetricDS server 
            instances that are configured the same and are fronted by some type of stateless load balancer. 
        </para>        
    </section>
    <section id='registration-redirect'>
        <title>Registration Redirect</title>    
        <para>
            When deploying a multi-tiered system it may be advantageous to have only one registration server, even though the parent node of a registering node
            could be any of a number of nodes in the system.  In SymmetricDS the parent node is always the node that a child registers with.  The 
            <link linkend="registration_redirect">registration redirect</link> table allows a single node, usually the root server in the network, to
            redirect registering nodes to their true parents.  It does so based on a mapping found in the table of external_id to the parent's node_id.
        </para>
        <para>
            For example, if it is desired to have a series of regional servers that workstations at retail stores get assigned to based on their external_id, the store number, then
            you might insert into <link linkend="registration_redirect">registration redirect</link> the store number as the registrant_external_id and the node_id of
            the assigned region as the registration_node_id.  When a workstation at the store registers, the root server send an HTTP redirect to the sync_url of the node 
            that matches the registration_node_id. 
        </para>
    </section>
    <section id="bi-direction-sync">
        <title>Bi-Directional Synchronization</title>
        <para>
            SymmetricDS allows tables to be synchronized bi-directionally.  Note that an outgoing 
            synchronization does not process changes during an incoming synchronization on the same node unless the trigger 
            was created with the sync_on_incoming_batch flag set.  If the sync_on_incoming_batch flag
            is set, then update loops are prevented by a feature that is available in most database dialects.  
            During an incoming synchronization the source node_id is put into a database session variable that is 
            available to the database trigger.  Data events are not generated if the target node_id 
            on an outgoing synchronization is equal to the source node_id.  
        </para>     
        <para>
            By default, only the columns that changed will be updated in the target system.
        </para>  
        <para>
            More complex conflict resolution strategies can be accomplished by using the 
            <literal>IDataLoaderFilter</literal> extension point which has access to both 
            old and new data.
        </para>         
    </section>         
    <section id="dead-triggers">
        <title>Dead Triggers</title>
        <para>
            Normally a Trigger is specified to capture data changes to a table and send them to
            a target Node Group.  A dead Trigger is one that does not capture data changes.
            In other words, the sync_on_insert, sync_on_update, and sync_on_delete properties
            for the Trigger are all set to false.  Because the Trigger is specified, it will
            be included in the initial load of data for target Nodes.
        </para>
        <para>
            A dead Trigger might be used to load a read-only lookup table.  It could be used
            to load a table that needs populated with example or default data.
            Another use is a recovery load of data for tables that have a single direction
            of synchronization.  For example, a retail store records sales transaction that
            synchronize in one direction by trickling back to the central office.
            If the retail store needs to recover all the sales transactions, they can be sent
            are part of an initial load from the central office by setting up dead Triggers
            that "sync" in that direction.
        </para>
        <para>
            The following SQL statement sets up a non-syncing dead Trigger that sends
            the sale_transaction table to the "store" Node Group from the "corp" Node Group during
            an initial load.
            <programlisting>
<![CDATA[insert into SYM_TRIGGER 
  (source_table_name,  channel_id, 
   sync_on_insert, sync_on_update, sync_on_delete, 
   last_update_by, last_update_time, create_time)
values
  ('sale_transaction', 'sale_transaction', 
   0, 0, 0, 'demo', current_timestamp, current_timestamp);]]></programlisting>
        </para>
    </section>
    <section id='jms-publishing'>
        <title>JMS Publishing</title>    
        <para>
            With the proper configuration SymmetricDS can publish XML messages of captured data changes to 
            JMS during routing or transactionally while data loading synchronized data into a target database.
            The following explains how to publish to JMS during synchronization to the target database. 
       </para>
       <para>     
            The XmlPublisherDataLoaderFilter is a
            <link linkend="extensions-data-loader-filter">IDataLoaderFilter</link> that may be configured to 
            publish specific tables as an XML message to a JMS provider.
            See <link linkend="extensions">extension points</link> for how 
            to configure an extension point.  If the publish to JMS fails, the batch will be marked in error, 
            the loaded data for the batch will be rolled back
            and the batch will be retried during the next synchronization run.            
        </para>
        <para>
        The following is an example extension point configuration that will publish four tables in XML with a root 
        tag of <emphasis>'sale'</emphasis>.  Each XML message will be grouped by the batch and the column names identified by
        the groupByColumnNames property which have the same values.
                <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd">
 
    <bean id="publishingFilter" class="org.jumpmind.symmetric.integrate.XmlPublisherDataLoaderFilter">
        <property name="xmlTagNameToUseForGroup" value="sale"/>
        <property name="tableNamesToPublishAsGroup">
            <list>
               <value>SALE_TX</value>
               <value>SALE_LINE_ITEM</value>
               <value>SALE_TAX</value>
               <value>SALE_TOTAL</value>
            </list>            
        </property>
        <property name="groupByColumnNames">
            <list>
               <value>STORE_ID</value>
               <value>BUSINESS_DAY</value>
               <value>WORKSTATION_ID</value>
               <value>TRANSACTION_ID</value>
            </list>                      
        </property>
        <property name="publisher">
           <bean class="org.jumpmind.symmetric.integrate.SimpleJmsPublisher">
               <property name="jmsTemplate" ref="definedSpringJmsTemplate"/>
           </bean>
        </property>        
    </bean>     
</beans>]]></programlisting>        
        </para>
        <para>
          The publisher property on the XmlPublisherDataLoaderFilter takes an interface of type IPublisher.  The implementation
          demonstrated here is an implementation that publishes to JMS using Spring's 
          <ulink url="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jms.html#jms-jmstemplate">JMS template</ulink>.
          Other implementation's of IPublisher could easily publish the XML to other targets like an HTTP server, the file system or secure copy it to another server.
        </para>
        <para>
          The above configuration will publish XML similiar to the following:
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<sale xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="0012010-01-220031234" nodeid="00001" time="1264187704155">
  <row entity="SALE_TX" dml="I">
    <data key="STORE_ID">001</data>
    <data key="BUSINESS_DAY">2010-01-22</data>
    <data key="WORKSTATION_ID">003</data>
    <data key="TRANSACTION_ID">1234</data>
    <data key="CASHIER_ID">010110</data>
  </row>        
  <row entity="SALE_LINE_ITEM" dml="I">
    <data key="STORE_ID">001</data>
    <data key="BUSINESS_DAY">2010-01-22</data>
    <data key="WORKSTATION_ID">003</data>
    <data key="TRANSACTION_ID">1234</data>
    <data key="SKU">9999999</data>  
    <data key="PRICE">10.00</data>
    <data key="DESC" xsi:nil="true"/>
  </row>        
  <row entity="SALE_LINE_ITEM" dml="I">
    <data key="STORE_ID">001</data>
    <data key="BUSINESS_DAY">2010-01-22</data>
    <data key="WORKSTATION_ID">003</data>
    <data key="TRANSACTION_ID">1234</data>
    <data key="SKU">9999999</data>  
    <data key="PRICE">10.00</data>
    <data key="DESC" xsi:nil="true"/>
  </row>
  <row entity="SALE_TAX" dml="I">
    <data key="STORE_ID">001</data>
    <data key="BUSINESS_DAY">2010-01-22</data>
    <data key="WORKSTATION_ID">003</data>
    <data key="TRANSACTION_ID">1234</data>
    <data key="AMOUNT">1.33</data>  
  </row>
  <row entity="SALE_TOTAL" dml="I">
    <data key="STORE_ID">001</data>
    <data key="BUSINESS_DAY">2010-01-22</data>
    <data key="WORKSTATION_ID">003</data>
    <data key="TRANSACTION_ID">1234</data>
    <data key="AMOUNT">21.33</data>  
  </row>
</sale>
            ]]></programlisting>     
            To publish JMS messages during routing
            the same pattern is valid, with the exception that the extension point would be the XmlPublisherDataRouter and the router 
            would be configured by setting the router_type of a <link linkend="router">router</link> to the Spring bean
            name of the registered extension point.  Of course, the router would need to be linked through <link linkend="trigger_router">trigger routers</link>
            to each <link linkend="trigger">trigger</link> table that needs published.                  
        </para>
    </section>     
    <section id="purge">
        <title>Database Purging</title>
        <para>
            Purging is the act of cleaning up captured data in SymmetricDS's runtime tables.  Data is purged through
            delete statements by the purge job.  Only data that has been successfully synchronized will be purged.  Purged tables include:
            <itemizedlist>
                <listitem>
                    <link linkend="data">DATA</link>
                </listitem>
                <listitem>
                    <link linkend="data_event">DATA_EVENT</link>
                </listitem>
                <listitem>
                    <link linkend="outgoing_batch">OUTGOING_BATCH</link>
                </listitem>
                <listitem>
                    <link linkend="incoming_batch">INCOMING_BATCH</link>
                </listitem>
                <listitem>
                    <link linkend="statistic">STATISTIC</link>
                </listitem>                
            </itemizedlist>
            The purge job is enabled by the <emphasis>start.purge.job</emphasis> SymmetricDS property.  The job runs periodically according to the 
            <emphasis>job.purge.period.time.ms</emphasis> property.  The default period is to run every ten minutes.  
        </para>      
        <para>
            The two retention period properties
            indicate how much history SymmetricDS will retain before purging.  The <emphasis>purge.retention.minutes</emphasis> property indicates the period
            of history to keep for synchronization tables.  The default value is 5 days.
            The <emphasis>statistic.retention.minutes</emphasis> property
            indicates the period of history to keep for statistics.  The default value is also 5 days.            
        </para>
        <para>
            The purge properties should be adjusted according to how much data is flowing through the system and the amount of storage space the database has.
            For an initial deployment it is recommended that the purge properties be kept at the defaults.  It is often helpful to be able to look at 
            the captured data in order to triage problems and profile the synchronization patterns.  When scaling up to more nodes, it is recomended that the 
            purge parameters be scaled back to 24 hours or less.  
        </para>
        
    </section>
    <section id="temporary-files">
        <title>Temporary Files</title>
        <para>
        SymmetricDS creates temporary extraction and data load files with the CSV content for transfer across the transport when
        the value of the <emphasis>stream.to.file.threshold.bytes</emphasis> SymmetricDS property has been reached.  Before reaching the threshold files 
        are streamed to memory.  The default value is 32,768 bytes, and this feature may be turned off by turning the <emphasis>stream.to.file.enabled</emphasis> property to false.
        </para>
        <para>
        SymmetricDS creates these temporary files in the directory specified by the <emphasis>java.io.tmpdir</emphasis> Java System property.  When the 
        SymmmetricDS engine starts up, stranded temporary files are cleaned up.  Files should only be stranded if the SymmetricDS engine is force killed.
        </para>
        <para>
        The location of the temporary directory may be changed by setting the Java System property passed into the Java program at startup.  For example,
        <programlisting>
  -Djava.io.tmpdir=/home/.symmetricds/tmp
        </programlisting>   
        </para>
    </section>    
    <section id="clustering">
        <title>Clustering</title>
    </section>   
    <section id='logging'>
        <title>Logging Configuration</title>    
    </section> 
    <section id='statistics'>
        <title>Statistics</title>    
    </section>           
    <section id="extensions">
        <title>Extension Points</title>
        <para>
             SymmetricDS may be extended via a plug-in like architecture where extension point interfaces 
             may be implemented by a custom class and registered with the synchronization engine.  All supported extension 
             points extend the IExtensionPoint interface.  The currently available extension points are documented in the following sections.  
        </para>
        <para>
             When the synchronization engine starts up, a Spring 
             post processor searches the Spring ApplicationContext for any registered classes which implement 
             IExtensionPoint.  An IExtensionPoint designates whether it should be auto registered or not.  If the extension point 
             is to be auto registered then the post processor registers the known interface with the appropriate service.
        </para>
        <para>
             The INodeGroupExtensionPoint interface may be optionally implemented to designate that auto registered 
             extension points should only be auto registered with specific node groups.
             <programlisting><![CDATA[/**
 * Only apply this extension point to the 'root' node group.
 */
 public String[] getNodeGroupIdsToApplyTo() {
     return new String[] { "root" };
 }
]]></programlisting>             
        </para>
        <para>
             SymmetricDS will look for Spring configured extensions in the application Classpath by importing any Spring 
             XML configuration files found matching the following pattern: META-INF/services/symmetric-*-ext.xml.  When packaged in
             a jar file the META-INF directory should be at the root of the jar file.  When packaged in a war file, the META-INF directory
             should be in the WEB-INF/classes directory.
        </para>
        <section id="parameter-filter">
            <title>IParameterFilter</title>
            <para>
                Parameter values can be specified in code using a parameter filter.  Note that there can be only one parameter
                filter per engine instance.  The IParameterFilter replaces the depreciated IRuntimeConfig from prior releases.
                <programlisting><![CDATA[public class MyParameterFilter 
    implements IParameterFilter, INodeGroupExtensionPoint {

    /**
     * Only apply this filter to stores
     */
    public String[] getNodeGroupIdsToApplyTo() {
        return new String[] { "store" };
    }

    public String filterParameter(String key, String value) {
        // look up a store number from an already existing properties file.
        if (key.equals(ParameterConstants.EXTERNAL_ID)) {
            return StoreProperties.getStoreProperties().
              getProperty(StoreProperties.STORE_NUMBER);
        } 
        return value;
    }

    public boolean isAutoRegister() {
        return true;
    }

}]]></programlisting> 
            </para>
        </section>        
        <section id="extensions-data-loader-filter">
            <title>IDataLoaderFilter</title>         
            <para>
                Data can be filtered as it is loaded into the target database or when
                it is extracted from the source database.
            </para>            
            <para>
                As data is loaded into the target database, a filter can change the
                data in a column or save it somewhere else.  It can also specify by the
                return type of the function call that the data loader should continue on 
                and load the data (by returning true) or ignore it (by returning false). One 
                possible use of the filter might be to
                route credit card data to a secure database and blank it out as it loads 
                into less-restricted reporting database.
            </para>
            <para>
                An IDataLoaderContext is passed to each of the callback methods.  A new 
                context is created for each synchronization.  The context provides methods to 
                lookup column indexes by column name, get table meta data, and provides access to 
                old data if the sync_column_level flag is enabled.  The context also provides a means 
                to share data during a synchronization between different rows of data that are 
                committed in a  database transaction and are in the same channel.  It does so by 
                providing a context cache which can be populated by the extension point.
            </para>  
            <para>
                Many times the IDataLoaderFilter will be combined with the IBatchListener.  The 
                XmlPublisherFilter (in the org.jumpmind.symmetric.ext package) is a good example 
                of using the combination of the two extension points in order to create XML messages 
                to be published to JMS.
            </para>          
            <para>
                A class implementing the IDataLoaderFilter interface is injected onto the
                DataLoaderService in order to receive callbacks when data is inserted,
                updated, or deleted.
                
                <programlisting><![CDATA[public MyFilter implements IDataLoaderFilter {
                
    public boolean isAutoRegister() {
        return true;
    }
 
    public boolean filterInsert(IDataLoaderContext context,
        String[] columnValues) {
        return true;
    }
    
    public boolean filterUpdate(IDataLoaderContext context, 
        String[] columnValues, String[] keyValues) {
        return true;
    }
    
    public void filterDelete(IDataLoaderContext context, 
        String[] keyValues) {
        return true;
    }

}]]></programlisting>
            </para>
            <para>
                The filter class is specified as a Spring-managed bean.  A custom Spring XML file
                is specified as follows in a jar at META-INF/services/symmetric-myfilter-ext.xml.
                
                <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd">
 
    <bean id="myFilter" class="com.mydomain.MyFilter"/>
     
</beans>]]></programlisting>
            </para>
        </section>
        <section id="extensions-table-column-filter">
            <title>ITableColumnFilter</title>
            <para>
            Implement this extension point to filter out specific columns from
            use by the dataloader. Only one column filter may be added per target table.
            </para>
        </section>
        <section id="extensions-batch-listener">
            <title>IBatchListener</title>
            <para>
            This extension point is called whenever a batch has completed loading but before
            the transaction has committed.
            </para>
        </section>
        <section id="extensions-acknowledge-event-listener">
            <title>IAcknowledgeEventListener</title>
            <para>
            Implement this extension point to receive callback events when a batch is acknowledged.  
            The callback for this listener happens at the point of extraction.
            </para>
        </section>                
        <section id="extensions-reload-listener">
            <title>IReloadListener</title>
            <para>
            Implement this extension point to listen in and take
            action before or after a reload is requested for a Node.  The callback for this listener
            happens at the point of extraction.
            </para>
        </section>                
        <section id="extensions-extractor-filter">
            <title>IExtractorFilter</title>
            <para>
            This extension point is called after data has been extracted, but before it has been streamed.  It
            has the ability to inspect each row of data to take some action and indicate, if necessary, that the
            row should not be streamed.
            </para>
        </section>
        <section id="extensions-sync-url-extension">
            <title>ISyncUrlExtension</title>
            <para>
             This extension point is used to select an appropriate URL based on
             the URI provided in the sync_url column of sym_node.
            </para>
            <para>
             To use this extension point configure the sync_url for a node with the
             protocol of ext://beanName. The beanName is the name you give the extension
             point in the extension xml file.
            </para>
        </section>        
        <section id="extensions-node-id-generator">
            <title>INodeIdGenerator</title>
            <para>
             This extension point allows SymmetricDS users to implement their own algorithms for how 
             node ids and passwords are generated or selected during the registration process.  There may be 
             only one node generator per SymmetricDS instance.
            </para>
        </section>
        <section id="extensions-trigger-creation-listener">
            <title>ITriggerCreationListener</title>
            <para>
            Implement this extension point to get status callbacks during trigger creation.
            </para>
        </section>       
        <section id="extensions-batch-algorithm">
            <title>IBatchAlgorithm</title>
            <para>
            Implement this extension point and set the name of the Spring bean on the batch_algorithm column of the Channel table to use.
            This extension point gives fine grained control over how a channel is batched.
            </para>
        </section>                   
        <section id="extensions-data-router">
            <title>IDataRouter</title>
            <para>
            Implement this extension point and set the name of the Spring bean on the router_type column
            of the Router table to use.  This extension point gives the ability to programatically decide
            which nodes data should be routed to.
            </para>
        </section>  
        <section id="extensions-heartbeat-listener">
            <title>IHeartbeatListener</title>
            <para>
            Implement this extension point to get callbacks during the heartbeat job.
            </para>
        </section>
        <section id="extensions-offline-listener">
            <title>IOfflineListener</title>
            <para>
            Implement this extension point to get callbacks for offline events.
            </para>
        </section> 
        <section id="extensions-node-password">
            <title>INodePasswordFilter</title>
            <para>
            Implement this extension point to intercept the saving and rendering of the node password.
            </para>
        </section>        
        <section id="extensions-servlets">
            <title>IServletExtension</title>
            <para>
            Implement this extension point to allow additional Servlets to be registered with SymmetricDS.  This is probably only 
            useful if SymmetricDS is running in standalone or embedded mode.
            </para>
        </section>                      
    </section>
    <section id="encrypted-passwords">
        <title>Encrypted Passwords</title>
        <para>
            The db.user and db.password properties will accept encrypted text, which protects
            against casual observation.  The text is prefixed with "enc:" to indicate
            that it is encrypted.  To encrypt text, use the following command:
        </para>
        <para>
            <command>sym -e secret</command>
        </para>
        <para>
            The text is encrypted by the cipher defined as alias "sym.secret" in the 
            Java keystore.  The keystore is specified by the "sym.keystore.file" system property, which
            defaults to <filename class="filename">security/keystore</filename>.
            If a cipher is not found, a default cipher using Triple DES with a random password
            is generated.
        </para>
    </section>
    <section id="secure-transport">
        <title>Secure Transport</title>
        <para>
            By specifying the "https" protocol for a URL, SymmetricDS will communicate over
            Secure Sockets Layer (SSL) for an encrypted transport.  The following properties
            need to be set with "https" in the URL:
            <variablelist>
                <varlistentry>
                    <term>
                        <command>sync.url</command>
                    </term>
                    <listitem>
                        <para>
                            This is the URL of the current node, so if you want to force other
                            nodes to communicate over SSL with this node, you specify "https" in the URL.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>registration.url</command>
                    </term>
                    <listitem>
                        <para>
                            This is the URL where the node will connect for registration when it 
                            first starts up.  To protect the registration with SSL, you specify
                            "https" in the URL.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            For incoming HTTPS connections, SymmetricDS depends on the webserver where
            it is deployed, so the webserver must be configured for HTTPS.
            As a standalone deployment, the "sym" launcher command provides options for 
            enabling HTTPS support.
        </para>
        <section id="secure-transport-sym">
            <title>Sym Launcher</title>
            <para>
                The "sym" launch command uses Jetty as an embedded web server.
                Using command line options, the web server can be told to listen for 
                HTTP, HTTPS, or both.
            </para>
            <para>
                <command>sym --port 8080 --server</command>
            </para>
            <para>
                <command>sym --secure-port 8443 --secure-server</command>
            </para>
            <para>
                <command>sym --port 8080 --secure-port 8443 --mixed-server</command>
            </para>
        </section>
        <section id="secure-transport-tomcat">
            <title>Tomcat</title>
            <para>
                If you deploy SymmetricDS to Apache Tomcat, it can be secured by editing the
                <filename class="filename">TOMCAT_HOME/conf/server.xml</filename>
                configuration file.  There is already a line that can be uncommented
                and changed to the following:
                
                <programlisting>
<![CDATA[<Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true" 
  maxThreads="150" scheme="https" secure="true" 
  clientAuth="false" sslProtocol="TLS"
  keystoreFile="/symmetric-ds-1.x.x/security/keystore" />]]></programlisting>
            </para>
        </section>
        <section id="secure-transport-keystore">
            <title>Keystores</title>
            <para>
                When SymmetricDS connects to a URL with HTTPS, Java checks the validity of the
                certificate using the built-in trusted keystore located at
                <filename class="filename">JRE_HOME/lib/security/cacerts</filename>.
                The "sym" launcher command overrides the trusted keystore to use its own
                trusted keystore instead, which is located at
                <filename class="filename">security/cacerts</filename>.
                This keystore contains the certificate aliased as "sym" for use in testing
                and easing deployments.                
                The trusted keystore can be overridden
                by specifying the "javax.net.ssl.trustStore" system property.
            </para>
            <para>
                When SymmetricDS is run as a secure server with the "sym" launcher,
                it accepts incoming requests using the key installed in the keystore
                located at
                <filename class="filename">security/keystore</filename>.
                The default key is provided for convenience of testing, but should be
                re-generated for security.
            </para>
        </section>
        <section id="secure-transport-keys">
            <title>Generating Keys</title>
            <para>
                To generate new keys and install a server certificate, use the
                following steps:
            </para>
            <procedure>
                <step>
                    <para>
                        Open a command prompt and navigate to the
                        <filename class="directory">security</filename>
                        subdirectory of your SymmetricDS installation.
                    </para>
                </step>
                <step>
                    <para>Delete the old key pair and certificate.</para>
                    <para>
                        <command>keytool -keystore keystore -delete -alias sym</command>
                    </para>
                    <para>
                        <command>keytool -keystore cacerts -delete -alias sym</command>
                    </para>
                    <programlisting><![CDATA[Enter keystore password:  changeit]]></programlisting>
                </step>
                <step>
                    <para>Generate a new key pair.</para>
                    <para>
                        <command>keytool -keystore keystore -alias sym -genkey -keyalg RSA -validity 10950</command>
                    </para>
                    <programlisting>
<![CDATA[Enter keystore password:  changeit
What is your first and last name?
  [Unknown]:  localhost
What is the name of your organizational unit?
  [Unknown]:  SymmetricDS
What is the name of your organization?
  [Unknown]:  JumpMind
What is the name of your City or Locality?
  [Unknown]:
What is the name of your State or Province?
  [Unknown]:
What is the two-letter country code for this unit?
  [Unknown]:
Is CN=localhost, OU=SymmetricDS, O=JumpMind, L=Unknown, ST=Unknown, C=Unknown
correct?
  [no]:  yes

Enter key password for <sym>
        (RETURN if same as keystore password):]]></programlisting>
                </step>
                <step>
                    <para>Export the certificate from the private keystore.</para>
                    <para>
                        <command>keytool -keystore keystore -export -alias sym -rfc -file sym.cer</command>
                    </para>
                </step>
                <step>
                    <para>Install the certificate in the trusted keystore.</para>
                    <para>
                        <command>keytool -keystore cacerts -import -alias sym -file sym.cer</command>
                    </para>
                </step>
            </procedure>
        </section>
    </section>
</chapter>
