<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="administration" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml">
    <title>Administration</title>
    <section id="changing-triggers">
        <title>Changing Triggers</title>
        <para>
            A trigger row may be updated using SQL to change a synchronization definition.
            SymmetricDS will look for changes each night or whenever the Sync Triggers Job 
            is run (see below).  For example, a change to place the table <literal>price_changes</literal> 
            into the price channel would be accomplished with the following statement:
            <programlisting>
<![CDATA[update SYM_TRIGGER
set channel_id = 'price',
    last_update_by = 'jsmith',
    last_update_time = current_timestamp
where source_table_name = 'price_changes';
]]></programlisting>            
            All configuration should be managed centrally at the registration node.  If enabled, configuration 
            changes will be synchronized out to client nodes.  When trigger changes reach the client
            nodes the Sync Triggers Job will run automatically.
         </para>
         <para>   
            Centrally, the trigger changes will not take effect until the Sync Triggers Job runs.
            Instead of waiting for the Sync Triggers Job to run overnight after making a Trigger
            change, you can invoke the syncTriggers() method over JMX or simply restart the SymmetricDS
            server.
        </para>
    </section>
    <section id="changing-configuration">
        <title>Changing Configuration</title>
        <para>
            The configuration of your system as defined in the <literal>sym_*</literal> tables may be modified at runtime.  By default, any changes made to 
            the <literal>sym_*</literal> tables (with the exception of <literal>sym_node</literal>) should be made at the registration server.  The changes will
            be synchronized out to the leaf nodes by SymmetricDS triggers that are automatically created on the tables.
         </para>
         <para>   
            If this behavior is not desired, the feature can be turned off using a parameter.  Custom triggers may be added
            to the <literal>sym_*</literal> tables when the auto syncing feature is disabled.
        </para>
    </section>    
    <section id="sync-triggers">
        <title>Sync Triggers Job</title>
        <para>
            SymmetricDS examines the current configuration, corresponding database triggers,
            and the underlying tables to determine if database triggers need created or updated.
            The change activity is recorded on the <xref linkend="trigger_hist" xrefstyle="select: title page">trigger_hist</xref> table with a reason for the
            change.  The following reasons for a change are possible:

            <itemizedlist>
                <listitem>
                    <para>N - New trigger that has not been created before</para>
                </listitem>
                <listitem>
                    <para>S - Schema changes in the table were detected</para>
                </listitem>
                <listitem>
                    <para>C - Configuration changes in Trigger</para>
                </listitem>
                <listitem>
                    <para>T - Trigger was missing</para>
                </listitem>
            </itemizedlist>

            A configuration entry in Trigger without any history in Trigger Hist results in a new
            trigger being created (N).  The Trigger Hist stores a hash of the underlying table, so
            any alteration to the table causes the trigger to be rebuilt (S).  When the 
            <literal>last_update_time</literal> is changed on the Trigger entry, the configuration change causes
            the trigger to be rebuilt (C).  If an entry in Trigger Hist is missing the
            corresponding database trigger, the trigger is created (T).
        </para>
        <para>
            The process of examining triggers and rebuilding them is automatically run during startup and
            each night by the SyncTriggersJob.  The user can also manually run the process at any time 
            by invoking the <literal>syncTriggers()</literal> method over JMX.  The SyncTriggersJob is enabled by default 
            to run at 15 minutes past midnight.  If SymmetricDS is being run from a collection of servers
            (multiple instances of the same Node running against the same database), then locking
            should be enable to prevent database contention.  The following runtime properties
            control the behavior of the process.
            <variablelist>
                <varlistentry>
                    <term>
                        <command>start.synctriggers.job</command>
                    </term>
                    <listitem>
                        <para>
                            Whether the sync triggers job is enabled for this node.
                            [&#xA0;Default:&#xA0;true&#xA0;]
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>job.synctriggers.aftermidnight.minutes</command>
                    </term>
                    <listitem>
                        <para>
                            If scheduled, the sync triggers job will run nightly. This is how long after midnight
                            that job will run. [&#xA0;Default:&#xA0;15&#xA0;]
                        </para>
                    </listitem>
                </varlistentry>           
                <varlistentry>
                    <term>
                        <command>cluster.lock.during.sync.triggers</command>
                    </term>
                    <listitem>
                        <para>
                            Indicate if the sync triggers job is clustered and requires a lock before running.
                            [&#xA0;Default:&#xA0;false&#xA0;]
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </para>
    </section>
    <section id="admin-jmx">
        <title>Java Management Extensions</title>
        <para>
          Monitoring and administrative operations can be performed using Java Management Extensions (JMX).
          SymmetricDS uses MX4J to expose JMX attributes and operations that can be accessed
          from the built-in web console, Java's jconsole, or an application server.  
          By default, the web management console can be opened from the following address:

          <programlisting><![CDATA[http://localhost:31416/]]></programlisting>

          Using the Java jconsole command, SymmetricDS is listed as a local process named SymmetricLauncher.
          In jconsole, SymmetricDS appears under the MBeans tab as DefaultDomain.
        </para>
        <para>
          The management interfaces under DefaultDomain are organized as follows:

            <itemizedlist>
                <listitem>
                    <para>Node - administrative operations </para>
                </listitem>
                <listitem>
                    <para>Incoming - statistics about incoming batches </para>
                </listitem>
                <listitem>
                    <para>Outgoing - statistics about outgoing batches </para>
                </listitem>
                <listitem>
                    <para>Parameters - access to properties set through the parameter service </para>
                </listitem>
                <listitem>
                    <para>Notifications - setting thresholds and receiving notifications </para>
                </listitem>
            </itemizedlist>
          
        </para>
    </section>
    <section id="registration">
        <title>Opening Registration</title>
        <para>
        Node registration is the act of setting up a new <link linkend="node">node</link> and
         <link linkend="node_security">node security</link> so that when the new node is brought online
         it is allowed to join the system.  Nodes are only allowed to register if rows exist for the
         node and the registration_enabled flag is set to 1.  If the <literal>auto.registration</literal>
         SymmetricDS property is set to true, then when a node attempts to register, if registration
         has not already occurred, the node will automatically be registered.
       </para>
       <para> 
        SymmetricDS allows you to have multiple nodes with the same <literal>external_id</literal>.  Out of the box, openRegistration 
        will open a new registration if a registration already exists for a node with the same external_id.  A new 
        registration means a new node with a new <literal>node_id</literal> and the same <literal>external_id</literal> will be created.  
        If you want to re-register the same node you can use the <literal>reOpenRegistration()</literal> JMX
        method which takes a <literal>node_id</literal> as an argument.
        </para>
    </section>
    <section id="running-service-windows">
        <title>Running as a Windows Service</title>
        <para>
            SymmetricDS uses the
            <ulink url="http://wrapper.tanukisoftware.org/">Java Service Wrapper</ulink>
            product from Tanuki Software to run in the background as a Windows system service.
            The Java Service Wrapper executable is named <filename class="file">sym_service.exe</filename>
            so it can be easily identified from a list of running processes.
            To install the service, use the provided script:
            <programlisting>bin\install_service.bat</programlisting>
        </para>
        <para>
            The service configuration is found in <filename class="filename">conf/sym_service.conf</filename>.
            Edit this file if you want to change the default port number (8080), initial memory size
            (256 MB), log file size (10 MB), or other settings.
            When started, the server will look in the <filename class="directory">conf</filename> directory
            for the <filename class="filename">symmetric.properties</filename> file
            and the  <filename class="filename">log4j.xml</filename> file.
            Logging for standard out, error, and application are written to the
            <filename class="directory">logs</filename> directory.
        </para>
        <para>
            Most configuration changes do not require the service to be re-installed. 
            To un-install the service, use the provided script:
            <programlisting>bin\uninstall_service.bat</programlisting>
        </para>
        <para>
            Use the <command>net</command> command to start and stop the service: 
            <programlisting>net start symmetric
net stop symmetric</programlisting>
        </para>
    </section>
    <section id="running-service-unix">
        <title>Running as a Unix Service</title>
        <para>
            SymmetricDS uses the
            <ulink url="http://wrapper.tanukisoftware.org/">Java Service Wrapper</ulink>
            product from Tanuki Software to run in the background as a Unix system service.
            The Java Service Wrapper executable is named <filename class="file">sym_service</filename>
            so it can be easily identified from a list of running processes.
            The service configuration is found in <filename class="filename">conf/sym_service.conf</filename>.
            Edit this file if you want to change the default port number (8080), initial memory size
            (256 MB), log file size (10 MB), or other settings.
        </para>
        <para>
            An init script is provided to work with standard Unix run configuration levels.
            The <filename class="file">symmetric.init</filename> file follows the
            Linux Standard Base specification, which should work on many systems, including
            Fedora and Debian-based distributions.  
            To install the script, copy it into the system init directory:
        </para>
        <para>
            <programlisting>cp bin/symmetric.init /etc/init.d/symmetric</programlisting>
        </para>
        <para>
            Edit the init script to set the SYM_HOME variable to the directory
            where SymmetricDS is located.  The init script calls the
            <filename class="file">sym_service</filename> executable.
        </para>
        <para>
            To enable the service to run automatically when the system is started:
            <programlisting>/sbin/chkconfig --add symmetric</programlisting>
        </para>
        <para>
            To disable the service from running automatically:
            <programlisting>/sbin/chkconfig --del symmetric</programlisting>
        </para>
        <para>
            Use the <command>service</command> command to start, stop, and query
            the status of the service: 
            <programlisting>/sbin/service symmetric start
/sbin/service symmetric stop
/sbin/service symmetric status</programlisting>
        </para>
    </section>
    
</chapter>
