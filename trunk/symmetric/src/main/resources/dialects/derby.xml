<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd" default-lazy-init="true">

    <bean id="derbyDialect" class="org.jumpmind.symmetric.db.derby.DerbyDbDialect"
        scope="prototype">
        <property name="tablePrefix" value="${sync.table.prefix}" />
        <property name="engineName" value="${symmetric.runtime.engine.name}"/>
        <property name="streamingResultsFetchSize" value="${db.jdbc.streaming.results.fetch.size}" />
        <property name="sqlTemplate">
            <bean class="org.jumpmind.symmetric.db.SqlTemplate">
                <property name="triggerPrefix" value="${symmetric.runtime.trigger.prefix}" />
                <property name="functionInstalledSql">
                    <value>
                        <![CDATA[select count(*) from sys.sysaliases where alias = '$(functionName)']]>
                    </value>
                </property>
                <property name="functionTemplatesToInstall">
                    <map>
                        <entry key="FN_SYM_REPLACE">
                            <value>
                                <![CDATA[ 
                                CREATE FUNCTION fn_sym_replace(STR VARCHAR(10000), OLD VARCHAR(10000), NEW VARCHAR(10000)) RETURNS
                                VARCHAR(10000) PARAMETER STYLE JAVA NO SQL LANGUAGE JAVA EXTERNAL NAME
                                'org.apache.commons.lang.StringUtils.replace'
                                ]]>
                            </value>
                        </entry>
                        <entry key="FN_SYM_TRANSACTION_ID">
                            <value>
                                <![CDATA[ 
                                CREATE FUNCTION fn_sym_transaction_id() RETURNS
                                varchar(100) PARAMETER STYLE JAVA NO SQL LANGUAGE JAVA EXTERNAL NAME
                                'org.jumpmind.symmetric.db.derby.DerbyFunctions.getTransactionId'
                                ]]>
                            </value>
                        </entry>
                        <entry key="FN_SYM_SYNC_TRIGGERS_DISABLED">
                            <value>
                                <![CDATA[ 
                                CREATE FUNCTION fn_sym_sync_triggers_disabled() RETURNS
                                integer PARAMETER STYLE JAVA NO SQL LANGUAGE JAVA EXTERNAL NAME
                                'org.jumpmind.symmetric.db.derby.DerbyFunctions.isSyncDisabled'
                                ]]>
                            </value>
                        </entry>
                        <entry key="FN_SYM_SYNC_TRIGGERS_SET_DISABLED">
                            <value>
                                <![CDATA[ 
                                CREATE FUNCTION fn_sym_sync_triggers_set_disabled(state integer) RETURNS
                                integer PARAMETER STYLE JAVA NO SQL LANGUAGE JAVA EXTERNAL NAME
                                'org.jumpmind.symmetric.db.derby.DerbyFunctions.setSyncDisabled'
                                ]]>
                            </value>
                        </entry>
                    </map>
                </property>
                <property name="stringColumnTemplate" >
                    <value>
                        <![CDATA[ case when $(tableAlias).$(columnName) is null then '' else '"' || fn_sym_replace(fn_sym_replace($(tableAlias).$(columnName),'\','\\'),'"','\"') || '"' end ||','||]]>
                    </value>
                </property>
                <property name="clobColumnTemplate">
                    <value>
                        <![CDATA['unsupported'||','||]]>
                    </value>
                </property>
                <property name="blobColumnTemplate">
                    <value>
                        <![CDATA['unsupported'||','||]]>
                    </value>
                </property>
                <property name="numberColumnTemplate">
                    <value>
                        <![CDATA[case when $(tableAlias).$(columnName) is null then '' else rtrim(char($(tableAlias).$(columnName))) end ||','||]]>
                    </value>
                </property>
                <property name="triggerConcatCharacter" value="||"/>
                <property name="newTriggerValue" value="new"/>
                <property name="oldTriggerValue" value="old"/>
                <!-- TODO -->                
                <property name="datetimeColumnTemplate" >
                    <value>
                        <![CDATA[ case when $(tableAlias).$(columnName) is null then '' else '"' || rtrim(char($(tableAlias).$(columnName))) || '"' end ||','||]]>
                    </value>
                </property>
                <property name="sqlTemplates">
                    <map>
                        <entry key="insertTriggerTemplate">
                            <value>
                                <![CDATA[
                                CREATE TRIGGER $(triggerName) 
                                AFTER INSERT ON $(schemaName)$(tableName) 
                                REFERENCING NEW AS NEW
                                FOR EACH ROW MODE DB2SQL 
                                INSERT INTO $(defaultSchema)$(prefixName)_data 
                                (table_name, channel_id, event_type, trigger_hist_id, transaction_id, row_data, create_time)
                                values(
                                  '$(targetTableName)',
                                  '$(channelName)',
                                  'I',
                                  $(triggerHistoryId),
                                  $(txIdExpression),
                                  $(columns),                                
                                  CURRENT_TIMESTAMP
                                )
                                ]]>
                            </value>
                        </entry>
                        <entry key="insertPostTriggerTemplate">
                            <value>
                                <![CDATA[
                                CREATE TRIGGER $(triggerName)p
                                AFTER INSERT ON $(schemaName)$(tableName) 
                                REFERENCING NEW AS NEW
                                FOR EACH ROW MODE DB2SQL 
                                insert into $(defaultSchema)$(prefixName)_data_event 
                                (node_id, data_id) 
                                select node_id, IDENTITY_VAL_LOCAL()
                                from $(prefixName)_node c where 
                                c.node_group_id = '$(targetGroupId)'
                                and c.sync_enabled = 1 $(nodeSelectWhere)
                                ]]>
                            </value>
                        </entry>
                        <entry key="updateTriggerTemplate">
                            <value>
                                <![CDATA[
                                CREATE TRIGGER $(triggerName)
                                AFTER UPDATE ON $(schemaName)$(tableName) 
                                REFERENCING OLD AS OLD NEW AS NEW
                                FOR EACH ROW MODE DB2SQL 
                                insert into $(defaultSchema)$(prefixName)_data 
                                (table_name, channel_id, event_type, trigger_hist_id, transaction_id, pk_data, row_data, create_time)
                                values(
                                  '$(targetTableName)',
                                  '$(channelName)',      
                                  'U',
                                  $(triggerHistoryId),
                                  $(txIdExpression),
                                  $(oldKeys),
                                  $(columns),
                                  CURRENT_TIMESTAMP
                                )
                                ]]>
                            </value>
                        </entry>
                        <entry key="updatePostTriggerTemplate">
                            <value>
                                <![CDATA[
                                CREATE TRIGGER $(triggerName)p
                                AFTER UPDATE ON $(schemaName)$(tableName) 
                                REFERENCING OLD AS OLD NEW AS NEW
                                FOR EACH ROW MODE DB2SQL 
                                insert into $(defaultSchema)$(prefixName)_data_event 
                                (node_id, data_id) 
                                select node_id, IDENTITY_VAL_LOCAL()
                                from $(prefixName)_node c where 
                                c.node_group_id = '$(targetGroupId)'
                                and c.sync_enabled = 1 $(nodeSelectWhere)
                                ]]>
                            </value>
                        </entry>
                        <entry key="deleteTriggerTemplate">
                            <value>
                                <![CDATA[
                                CREATE TRIGGER $(triggerName) 
                                AFTER DELETE ON $(schemaName)$(tableName) 
                                REFERENCING OLD AS OLD
                                FOR EACH ROW MODE DB2SQL 
                                insert into $(defaultSchema)$(prefixName)_data 
                                (table_name, channel_id, event_type, trigger_hist_id, transaction_id, pk_data, create_time)
                                values(
                                  '$(targetTableName)',
                                  '$(channelName)',
                                  'D',
                                  $(triggerHistoryId),
                                  $(txIdExpression),
                                  $(oldKeys),
                                  CURRENT_TIMESTAMP
                                )
                                ]]>
                            </value>
                        </entry>
                        <entry key="deletePostTriggerTemplate">
                            <value>
                                <![CDATA[
                                CREATE TRIGGER $(triggerName)p
                                AFTER DELETE ON $(schemaName)$(tableName) 
                                REFERENCING OLD AS OLD
                                FOR EACH ROW MODE DB2SQL 
                                insert into $(defaultSchema)$(prefixName)_data_event 
                                (node_id, data_id) 
                                select node_id, IDENTITY_VAL_LOCAL()
                                from $(prefixName)_node c where 
                                c.node_group_id = '$(targetGroupId)'
                                and c.sync_enabled = 1 $(nodeSelectWhere)
                                ]]>
                            </value>
                        </entry>
                        <entry key="initialLoadSqlTemplate">
                            <value>
                                <![CDATA[select $(columns) from $(schemaName)$(tableName) t  where $(whereClause)]]>
                            </value>
                        </entry>
                    </map>
                </property>
            </bean>
        </property>
    </bean>

</beans>