<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd" default-lazy-init="true">

    <bean id="msSqlStringTemplate" class="java.lang.String">
        <constructor-arg>
            <value>
                <![CDATA[if($(tableAlias).$(columnName) is null,'',concat('"',replace(replace($(tableAlias).$(columnName),'\\','\\\\'),'"','\\"'),'"')),',',]]>
            </value>
        </constructor-arg>
    </bean>

    <bean id="msSqlDialect" class="org.jumpmind.symmetric.db.mssql.MsSqlDbDialect"
        scope="prototype">
        <property name="tablePrefix" value="${sync.table.prefix}" />
        <property name="streamingResultsFetchSize" value="${db.jdbc.streaming.results.fetch.size}" />
        <property name="sqlTemplate">
            <bean class="org.jumpmind.symmetric.db.SqlTemplate">            
                <property name="triggerPrefix" value="${symmetric.runtime.trigger.prefix}" />
                <property name="stringColumnTemplate" ref="msSqlStringTemplate" />
                <property name="clobColumnTemplate" ref="msSqlStringTemplate" />
                <property name="blobColumnTemplate">
                    <value>
                        <![CDATA[fn_sym_blob2clob($(tableAlias).$(columnName)),',',]]>
                    </value>
                </property>
                <property name="numberColumnTemplate">
                    <value>
                        <![CDATA[coalesce(cast($(tableAlias).$(columnName) as char), ''),',',]]>
                    </value>
                </property>
                <!-- TODO -->
                <property name="datetimeColumnTemplate">
                    <value>
                        <![CDATA[if($(tableAlias).$(columnName) is null,'',concat('"',cast($(tableAlias).$(columnName) as char),'"')),',',]]>
                    </value>
                </property>
                <property name="triggerConcatCharacter" value=","/>
                <property name="newTriggerValue" value="new"/>
                <property name="oldTriggerValue" value="old"/>
                <property name="sqlTemplates">
                    <map>           
                        <entry key="insertTriggerTemplate">
                            <value>
                                <![CDATA[
                                create trigger $(triggerName) after insert on $(schemaName)$(tableName)
                                for each row begin
                                  if $(syncOnInsertCondition) and $(syncOnIncomingBatchCondition) then
                                    insert into $(defaultSchema)$(prefixName)_data (table_name, channel_id, event_type, trigger_hist_id, transaction_id, row_data, create_time)
                                    values(
                                      '$(targetTableName)',
                                      '$(channelName)',
                                      'I',
                                      $(triggerHistoryId),
                                      $(txIdExpression),
                                      concat($(columns)
                                       ),
                                      CURRENT_TIMESTAMP
                                    );
                                    insert into $(defaultSchema)$(prefixName)_data_event (node_id, data_id) (select node_id, last_insert_id() from $(defaultSchema)$(prefixName)_node c where 
                                    c.node_group_id='$(targetGroupId)' and c.sync_enabled=1 $(nodeSelectWhere));
                                  end if;
                                end
                                ]]>
                            </value>
                        </entry>
                        <entry key="updateTriggerTemplate">
                            <value>
                                <![CDATA[
                                create trigger $(triggerName) after update on $(schemaName)$(tableName)
                                for each row begin
                                  if $(syncOnUpdateCondition) and $(syncOnIncomingBatchCondition) then
                                    insert into $(defaultSchema)$(prefixName)_data (table_name, channel_id, event_type, trigger_hist_id, transaction_id, pk_data, row_data, create_time)
                                    values(
                                      '$(targetTableName)',
                                      '$(channelName)',      
                                      'U',
                                      $(triggerHistoryId),
                                      $(txIdExpression),
                                      concat($(oldKeys)
                                       ),
                                      concat($(columns)
                                       ),
                                      CURRENT_TIMESTAMP
                                    );
                                    insert into $(defaultSchema)$(prefixName)_data_event (node_id, data_id) (select node_id, last_insert_id() from $(defaultSchema)$(prefixName)_node c where 
                                    c.node_group_id='$(targetGroupId)' and c.sync_enabled=1 $(nodeSelectWhere));
                                  end if;
                                end
                                ]]>
                            </value>
                        </entry>
                        <entry key="deleteTriggerTemplate">
                            <value>
                                <![CDATA[
                                create trigger $(triggerName) after delete on $(schemaName)$(tableName)
                                for each row begin
                                  if $(syncOnDeleteCondition) and $(syncOnIncomingBatchCondition) then
                                    insert into $(defaultSchema)$(prefixName)_data (table_name, channel_id, event_type, trigger_hist_id, transaction_id, pk_data, create_time)
                                    values(
                                      '$(targetTableName)',
                                      '$(channelName)',
                                      'D',
                                      $(triggerHistoryId),
                                      $(txIdExpression),
                                      concat($(oldKeys)
                                       ),
                                      CURRENT_TIMESTAMP
                                    );
                                    insert into $(defaultSchema)$(prefixName)_data_event (node_id, data_id) (select node_id, last_insert_id() from $(defaultSchema)$(prefixName)_node c where 
                                    c.node_group_id='$(targetGroupId)' and c.sync_enabled=1 $(nodeSelectWhere));
                                  end if;
                                end
                                ]]>
                            </value>
                        </entry>
                        <entry key="initialLoadSqlTemplate">
                            <value>
                                <![CDATA[select concat($(columns)) from $(schemaName)$(tableName) t where $(whereClause)]]>
                            </value>
                        </entry>
                    </map>
                </property>
            </bean>
        </property>
    </bean>

</beans>