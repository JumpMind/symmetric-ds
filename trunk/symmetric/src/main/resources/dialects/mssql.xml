<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd" default-lazy-init="true">

    <bean id="msSqlStringTemplate" class="java.lang.String">
        <constructor-arg>
            <value>
              <![CDATA[ case $(tableAlias).$(columnName) when null then '' else '"' + replace(replace($(tableAlias).$(columnName),'\','\\'),'"','\"') + '"' end +','+]]>
            </value>
        </constructor-arg>
    </bean>

    <bean id="msSqlDialect" class="org.jumpmind.symmetric.db.mssql.MsSqlDbDialect"
        scope="prototype">
        <property name="tablePrefix" value="${sync.table.prefix}" />
        <property name="streamingResultsFetchSize" value="${db.jdbc.streaming.results.fetch.size}" />
        <property name="sqlTemplate">
            <bean class="org.jumpmind.symmetric.db.SqlTemplate">            
                <property name="triggerPrefix" value="${symmetric.runtime.trigger.prefix}" />
                <property name="stringColumnTemplate" ref="msSqlStringTemplate" />
                <property name="clobColumnTemplate" ref="msSqlStringTemplate" />
                <!-- 
                <property name="blobColumnTemplate">
                    <value>
                        <![CDATA[fn_sym_blob2clob($(tableAlias).$(columnName)),',',]]>
                    </value>
                </property>
                 -->
                <property name="numberColumnTemplate">
                    <value>
                        <![CDATA[coalesce(cast($(tableAlias).$(columnName) as char), '') +','+]]>
                    </value>
                </property>
                <!-- TODO -->
                <property name="datetimeColumnTemplate">
                    <value>
                        <![CDATA[case $(tableAlias).$(columnName) when null then '' else ('"' + cast($(tableAlias).$(columnName) as char) + '"')+','+]]>
                    </value>
                </property>
                <property name="triggerConcatCharacter" value="+"/>
                <property name="newTriggerValue" value="inserted"/>
                <property name="oldTriggerValue" value="deleted"/>
                <property name="sqlTemplates">
                    <map>           
                        <entry key="insertTriggerTemplate">
                            <value>
                                <![CDATA[
                                create trigger $(triggerName) on $(schemaName)$(tableName) after insert as
                                begin
                                  declare @TransactionId varchar(1000)
                                  declare @SyncEnabled varbinary(128)
                                  if (@@TRANCOUNT > 0) begin
                                    execute sp_getbindtoken @TransactionId output;
                                  end
                                  $(syncOnIncomingBatchCondition) 
                                  if (@SyncEnabled <> 0x1) begin
                                    insert into $(defaultSchema)$(prefixName)_data (table_name, channel_id, event_type, trigger_hist_id, transaction_id, row_data, create_time) 
                                     (select '$(targetTableName)','$(channelName)','I', $(triggerHistoryId), $(txIdExpression), $(columns), current_timestamp from inserted where $(syncOnInsertCondition));
                                    insert into $(defaultSchema)$(prefixName)_data_event (node_id, data_id) (select node_id, @@IDENTITY from $(defaultSchema)$(prefixName)_node c where 
                                     $(syncOnInsertCondition) and c.node_group_id='$(targetGroupId)' and c.sync_enabled=1 $(nodeSelectWhere));
                                  end
                                end                                
                                ]]>
                            </value>
                        </entry>
                        <entry key="updateTriggerTemplate">
                            <value>
                                <![CDATA[                                
                                create trigger $(triggerName) on $(schemaName)$(tableName) after update as
                                begin
                                  declare @TransactionId varchar(1000)
                                  declare @SyncEnabled varbinary(128)
                                  if (@@TRANCOUNT > 0) begin
                                    execute sp_getbindtoken @TransactionId output;
                                  end
                                  $(syncOnIncomingBatchCondition) 
                                  if (@SyncEnabled <> 0x1) begin
                                    insert into $(defaultSchema)$(prefixName)_data (table_name, channel_id, event_type, trigger_hist_id, transaction_id, row_data, pk_data, create_time) 
                                     (select '$(targetTableName)','$(channelName)','U', $(triggerHistoryId), $(txIdExpression), $(columns), $(oldKeys), current_timestamp from inserted left outer join deleted on $(oldNewPrimaryKeyJoin) where $(syncOnUpdateCondition));
                                    if (@@ROWCOUNT = 1) begin
                                      declare @OldKeys varchar(1000)
                                      select @OldKeys=$(oldKeys) from deleted;                                      
                                      update $(defaultSchema)$(prefixName)_data set pk_data=@OldKeys where data_id=@@IDENTITY;      
                                    end                                     
                                    insert into $(defaultSchema)$(prefixName)_data_event (node_id, data_id) (select node_id, @@IDENTITY from $(defaultSchema)$(prefixName)_node c where 
                                     $(syncOnUpdateCondition) and c.node_group_id='$(targetGroupId)' and c.sync_enabled=1 $(nodeSelectWhere));
                                  end
                                end                                  
                                ]]>
                            </value>
                        </entry>
                        <entry key="deleteTriggerTemplate">
                            <value>
                                <![CDATA[
                                create trigger $(triggerName) on $(schemaName)$(tableName) after delete as
                                begin
                                  declare @TransactionId varchar(1000)
                                  declare @SyncEnabled varbinary(128)
                                  if (@@TRANCOUNT > 0) begin
                                    execute sp_getbindtoken @TransactionId output;
                                  end
                                  $(syncOnIncomingBatchCondition) 
                                  if (@SyncEnabled <> 0x1) begin
                                    insert into $(defaultSchema)$(prefixName)_data (table_name, channel_id, event_type, trigger_hist_id, transaction_id, pk_data, create_time) 
                                     (select '$(targetTableName)','$(channelName)','D', $(triggerHistoryId), $(txIdExpression), $(oldKeys), current_timestamp from deleted where $(syncOnUpdateCondition));
                                    insert into $(defaultSchema)$(prefixName)_data_event (node_id, data_id) (select node_id, @@IDENTITY from $(defaultSchema)$(prefixName)_node c where 
                                     $(syncOnUpdateCondition) and c.node_group_id='$(targetGroupId)' and c.sync_enabled=1 $(nodeSelectWhere));
                                  end
                                end                                   
                                ]]>
                            </value>
                        </entry>
                        <entry key="initialLoadSqlTemplate">
                            <value>
                                <![CDATA[select $(columns) from $(schemaName)$(tableName) t where $(whereClause)]]>
                            </value>
                        </entry>
                    </map>
                </property>
            </bean>
        </property>
    </bean>

</beans>