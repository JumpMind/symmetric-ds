<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="    
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd"
  default-lazy-init="true">

  <util:map id="nodeServiceSql">
    <entry key="nodeChannelControlIgnoreSql">
      <value>
        update ${sync.table.prefix}_node_channel_ctl set ignore_enabled=? where node_id=? and
        channel_id=?
      </value>
    </entry>
    <entry key="insertNodeChannelControlSql">
      <value>
        insert into ${sync.table.prefix}_node_channel_ctl
        (node_id,channel_id,ignore_enabled,suspend_enabled) values(?,?,?,?)
      </value>
    </entry>
    <entry key="updateNodeSql">
      <value>
        update ${sync.table.prefix}_node set node_group_id=?, external_id=?, database_type=?,
        database_version=?, schema_version=?, symmetric_version=?, sync_url=?, heartbeat_time=?,
        sync_enabled=?, timezone_offset=? where node_id = ?
      </value>
    </entry>
    <entry key="findNodeSql">
      <value>
        select node_id, node_group_id, external_id, sync_enabled, sync_url, schema_version,
        database_type, database_version, symmetric_version from ${sync.table.prefix}_node where
        node_id = ?
      </value>
    </entry>
    <entry key="findNodeByExternalIdSql">
      <value>
        select node_id, node_group_id, external_id, sync_enabled, sync_url, schema_version,
        database_type, database_version, symmetric_version from ${sync.table.prefix}_node where
        node_group_id = ? and external_id = ? order by node_id
      </value>
    </entry>
    <entry key="findNodeSecuritySql">
      <value>
        select node_id, node_password, registration_enabled, registration_time,
        initial_load_enabled, initial_load_time from ${sync.table.prefix}_node_security where
        node_id = ?
      </value>
    </entry>
    <entry key="findAllNodeSecuritySql">
      <value>
        select node_id, node_password, registration_enabled, registration_time,
        initial_load_enabled, initial_load_time from ${sync.table.prefix}_node_security
      </value>
    </entry>
    <entry key="findNodeIdentitySql">
      <value>
        select c.node_id, c.node_group_id, c.external_id, c.sync_enabled, c.sync_url,
        c.schema_version, c.database_type, c.database_version, c.symmetric_version from
        ${sync.table.prefix}_node c inner join ${sync.table.prefix}_node_identity i on c.node_id =
        i.node_id
      </value>
    </entry>
    <entry key="isNodeRegisteredSql">
      <value>
        select count(*) from ${sync.table.prefix}_node_security s inner join
        ${sync.table.prefix}_node n on n.node_id=s.node_id where n.node_group_id=? and
        n.external_id=? and s.registration_time is not null and s.registration_enabled=0
      </value>
    </entry>
    <entry key="findNodesWhoTargetMeSql">
      <value>
        select c.node_id, c.node_group_id, c.external_id, c.sync_enabled, c.sync_url,
        c.schema_version, c.database_type, c.database_version, c.symmetric_version from
        ${sync.table.prefix}_node c inner join ${sync.table.prefix}_node_group_link d on
        c.node_group_id = d.source_node_group_id where d.target_node_group_id = ? and
        d.data_event_action = ?
      </value>
    </entry>
    <entry key="findNodesWhoITargetSql">
      <value>
        select c.node_id, c.node_group_id, c.external_id, c.sync_enabled, c.sync_url,
        c.schema_version, c.database_type, c.database_version, c.symmetric_version from
        ${sync.table.prefix}_node c inner join ${sync.table.prefix}_node_group_link d on
        c.node_group_id = d.target_node_group_id where d.source_node_group_id = ? and
        d.data_event_action = ?
      </value>
    </entry>
    <entry key="updateNodeSecuritySql">
      <value>
        update ${sync.table.prefix}_node_security set node_password = ?, registration_enabled = ?,
        registration_time = ?, initial_load_enabled = ?, initial_load_time = ? where node_id = ?
      </value>
    </entry>
    <entry key="insertNodeSecuritySql">
      <value>
        insert into ${sync.table.prefix}_node_security (node_id, node_password) values (?, ?)
      </value>
    </entry>
    
  </util:map>

</beans>