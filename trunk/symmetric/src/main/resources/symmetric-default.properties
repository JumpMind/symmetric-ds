# Set the JNDI name if symmetric should use a JNDI registered connection pool# It is recommended that the application server provided Datasource is NOT transactional.  
# Symmetric will handle transactionality.  
# If NOT using a JNDI connection pool, provide information about the database connection. 
# A DBCP connection pool will be created.
db.jndi.name=

db.driver=org.apache.derby.jdbc.EmbeddedDriver

db.url=jdbc:derby:target/derby/root;create=true

db.user=

db.password=

# The initial size of the connection pool
db.pool.initial.size=5

# The maximum number of connections that will be allocated in the pool
db.pool.max.active=10

# This is how long the default transaction time is.
# This needs to be fairly big to account for large data loads.   
db.tx.timeout.seconds=7200

# Most symmetric queries have a timeout associated with them.  This is the default.
db.sql.query.timeout.seconds=60

# This is how long a request for a connection from the datasource will wait before
# giving up.
db.pool.max.wait.millis=30000

# This is how long a connection can be idle before it will be evicted.
db.pool.min.evictable.idle.millis=120000

# This is the default fetch size for streaming result sets.                
db.jdbc.streaming.results.fetch.size=1000

# When symmetric tables are created and accessed, this is the prefix to use for the tables.
sync.table.prefix=sym

# If this is true, when symmetric starts up it will try to create the necessary tables
symmetric.auto.config.database=true

# If this is true, when symmetric starts up it will try to upgrade tables to latest version
symmetric.auto.upgrade=true

# If this is true, registration is opened automatically for nodes requesting it
symmetric.auto.registration=false

# If this is true, a reload is automatically sent to nodes when they register
symmetric.auto.reload=false

# This is the download rate for the HTTP symmetric transport.  -1 means full throttle.
symmetric.http.download.rate.kb=-1

# This is the number of HTTP concurrent push/pull requests symmetric will accept.  This is controlled
# by the NodeConcurrencyFilter. The number is per servlet the filter is applied to.
symmetric.http.concurrent.workers.max=20

# @deprecated - this is now on the channel
# This is the maximum number of outgoing batches that will processed in one pull or push request.   
# symmetric.runtime.outgoing.batches.max.to.process=60

# This is the maximum number of events that will be peeked at to look for additional transaction rows after
# the max batch size is reached.  The more concurrency in your db and the longer the transaction takes the 
# bigger this value might have to be. 
symmetric.runtime.outgoing.batches.peek.ahead.window.after.max.size=100
                             
# This instructs symmetric to attempt to skip duplicate batches that are received.  Symmetric might
# be more efficient when recovering from error conditions if this is set to true, but you run the
# risk of missing data if the batch ids get reset (on one node, but not another) somehow (which is unlikely in production, but
# fairly likely in lab or development setups). 
symmetric.runtime.incoming.batches.skip.duplicates=true

# This is the number of times we will attempt to send an ACK back to the remote node
# when pulling and loading data.
symmetric.runtime.num.of.ack.retries=5

# This is the amount of time to wait between trying to send an ACK back to the remote node
# when pulling and loading data.
symmetric.runtime.time.between.ack.retries.ms=5000


# This is the engine name.  This should be set if you have more than one engine running in the same JVM.
# It is used to name the JMX management bean.  Please do not use underscores in this name.
symmetric.runtime.engine.name=Default

# Set this if you want to give your server a unique name to be used to identify which server did what action.  Typically useful when running in 
# a clustered environment.  This is currently used by the ClusterService when locking for a node.
runtime.symmetric.cluster.server.id=

# Indicate that this node is being run on a farm or cluster of servers and it needs to use the database to 'lock' out other activity when actions are taken.
symmetric.runtime.cluster.lock.timeout.ms=1800000
symmetric.runtime.cluster.lock.during.purge=false
symmetric.runtime.cluster.lock.during.pull=false
symmetric.runtime.cluster.lock.during.push=false
symmetric.runtime.cluster.lock.during.heartbeat=false
symmetric.runtime.cluster.lock.during.sync.triggers=false
        
# Set this if the triggers need to be prefixed.  This is useful when running two symmetric instances
# against the same database.
symmetric.runtime.trigger.prefix=

# Set this if tables should be purged prior to an initial load
symmetric.runtime.initial.load.delete.first=false

# Set this if tables should be cerated prior to an initial load
symmetric.runtime.initial.load.create.first=false

# Sets both the connection and read timeout on the internal HttpUrlConnection
symmetric.runtime.http.timeout.ms=600000

# Whether or not to use compression over HTTP connections.
# Currently, this setting only affects the push connection of the source node.
# Compression on a pull is enabled using a filter in the web.xml for the PullServlet.
symmetric.runtime.http.compression=true

# When starting jobs, symmetric attempts to randomize the start time to spread out load.  This is the
# maximum wait period before starting a job.
symmetric.runtime.job.random.max.start.time.ms=10000

# This is the retention for how long synchronization data will be kept in the symmetric synchronization
# tables.  Note that data will be purged only if the purge job is enabled.
symmetric.runtime.purge.retention.minutes=7200

# This is how often the push job will be run.
symmetric.runtime.job.push.period.time.ms=60000

# This is how often the pull job will be run.
symmetric.runtime.job.pull.period.time.ms=60000

# This is how often the purge job will be run.
symmetric.runtime.job.purge.period.time.ms=600000

# This is the number of data events that will be purged in one database transaction
symmetric.runtime.job.purge.max.num.data.events.to.delete.in.tx=5000

# If scheduled, the sync triggers job will run nightly.  This is how long after
# midnight that job will run.
symmetric.runtime.job.synctriggers.aftermidnight.minutes=15

# Whether the pull job is enabled for this node.                                                              
symmetric.runtime.start.pull.job=true

# Whether the push job is enabled for this node.   
symmetric.runtime.start.push.job=true

# Whether the purge job is enabled for this node.
symmetric.runtime.start.purge.job=true

# Whether the heartbeat job is enabled for this node.  The heartbeat job simply
# inserts an event to update the heartbeat_time column on the node table for the current node.
symmetric.runtime.start.heartbeat.job=true

# Whether the sync triggers job is enabled for this node. 
symmetric.runtime.start.synctriggers.job=true

# This is hook to give the user a mechanism to indicate the schema version that is being synchronized.
# This property is only valid if you use the default IRuntimeConfiguration implementation.                       
symmetric.runtime.schema.version=?

# This is the URL this node will use to register and pull it's configuration.
# This property is only valid if you use the default IRuntimeConfiguration implementation.
symmetric.runtime.registration.url=

# This property is only valid if you use the default IRuntimeConfiguration implementation.
symmetric.runtime.my.url=http://localhost:8080/sync

# This property is only valid if you use the default IRuntimeConfiguration implementation.
symmetric.runtime.group.id=default

# This property is only valid if you use the default IRuntimeConfiguration implementation.
symmetric.runtime.external.id=

# Provides a way to override the default IRuntimeConfiguration.  If you specify a class that implements the 
# interface, it will be used instead of the default, property-based, version.
symmetric.runtime.configuration.class=

# Specify the transport type.  Supported values currently include: http, internal
symmetric.transport.type=http

# If using the HsqlDbDialect, this property indicates whether Symmetric should setup the embedded database properties or if an
# external application will be doing so.
symmetric.hsqldb.initialize.db=true
