package org.jumpmind.symmetric;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.Set;

import junit.framework.Assert;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.testng.annotations.Factory;
import org.testng.annotations.Test;

@Test(groups = "integrate")
public class TestFactory {

    static final Log logger = LogFactory.getLog(TestFactory.class);

    enum DatabaseRole {
        CLIENT, ROOT
    };

    @Factory
    public Object[] createTests() throws Exception {
        Class<?>[] tests = new Class[] { DatabaseTest.class };
        Properties properties = getTestProperties();
        String[] clientDatabaseTypes = StringUtils.split(properties.getProperty("test.client"), ",");
        String[] rootDatabaseTypes = StringUtils.split(properties.getProperty("test.root"), ",");
        List<ITestable> tests2Run = new ArrayList<ITestable>();
        for (String rootDatabaseType : rootDatabaseTypes) {
            for (String clientDatabaseType : clientDatabaseTypes) {
                SymmetricEngine clientEngine = createEngine(writeTempPropertiesFileFor(clientDatabaseType,
                        DatabaseRole.CLIENT, properties));
                dropAndCreateDatabaseTables(clientEngine);
                SymmetricEngine rootEngine = createEngine(writeTempPropertiesFileFor(rootDatabaseType,
                        DatabaseRole.ROOT, properties));
                dropAndCreateDatabaseTables(rootEngine);
                for (Class<?> testClass : tests) {
                    ITestable test = (ITestable) (testClass.newInstance());
                    test.setClientEngine(clientEngine);
                    test.setRootEngine(rootEngine);
                    tests2Run.add(test);
                }
            }
        }

        return tests2Run.toArray(new Object[tests2Run.size()]);
    }

    private SymmetricEngine createEngine(File propertiesFile) {
        return new SymmetricEngine("file:" + propertiesFile.getAbsolutePath(), null);
    }

    private void dropAndCreateDatabaseTables(SymmetricEngine engine) {
    }

    private File writeTempPropertiesFileFor(String databaseType, DatabaseRole databaseRole, Properties properties)
            throws Exception {
        Properties newProperties = new Properties();
        Set<Object> keys = properties.keySet();
        for (Object string : keys) {
            String key = (String) string;
            String dbRoleReplaceToken = databaseType + "." + databaseRole.name().toLowerCase() + ".";
            if (key.startsWith(dbRoleReplaceToken)) {
                String newKey = key.substring(dbRoleReplaceToken.length());
                newProperties.put(newKey, properties.get(key));
            } else if (key.startsWith(databaseType)) {
                String newKey = key.substring(databaseType.length() + 1);
                newProperties.put(newKey, properties.get(key));
            } else {
                newProperties.put(key, properties.get(key));
            }
        }

        if (isConnectionValid(newProperties)) {
            newProperties.setProperty("symmetric.runtime.group.id", databaseRole.name().toLowerCase());
            newProperties.setProperty("symmetric.runtime.external.id", databaseRole == DatabaseRole.ROOT ? "CORP"
                    : "00001");
            newProperties.setProperty("symmetric.runtime.my.url", "internal://" + databaseRole.name().toLowerCase());

            File propertiesFile = File.createTempFile("symmetric-test.", ".properties");
            FileOutputStream os = new FileOutputStream(propertiesFile);
            newProperties.store(os, "generated by the symmetricds unit tests");
            os.close();
            propertiesFile.deleteOnExit();
            return propertiesFile;

        } else {
            Assert.fail();
            return null;
        }

    }

    private boolean isConnectionValid(Properties properties) throws Exception {
        try {
            Class.forName(properties.getProperty("db.driver"));
            Connection c = DriverManager.getConnection(properties.getProperty("db.url"), properties
                    .getProperty("db.user"), properties.getProperty("db.password"));
            c.close();
            return true;
        } catch (Exception ex) {
            logger.error("Could not connect to the test database using the url: " + properties.getProperty("db.url")
                    + ".  " + ex.getMessage());
            return false;
        }
    }

    private Properties getTestProperties() throws IOException {
        final String TEST_PROPERTIES_FILE = "/symmetric-test.properties";
        Properties properties = new Properties();

        properties.load(getClass().getResourceAsStream(TEST_PROPERTIES_FILE));
        String homeDir = System.getProperty("user.home");
        File propertiesFile = new File(homeDir + TEST_PROPERTIES_FILE);
        if (propertiesFile.exists()) {
            FileInputStream f = new FileInputStream(propertiesFile);
            properties.load(f);
            f.close();
        } else {
            logger.info("Could not find " + propertiesFile.getAbsolutePath() 
                    + ". Using all of the default properties");
        }
        return properties;
    }
}
