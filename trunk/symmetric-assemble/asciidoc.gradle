apply plugin: 'org.asciidoctor.gradle.asciidoctor'
apply plugin: 'docbook-reference'

configurations{ generateAppendixesDependencies }

dependencies {
    generateAppendixesDependencies project(":symmetric-util")
    generateAppendixesDependencies project(":symmetric-db")
}

reference {
    sourceDir = file("$buildDir/src/asciidoc/docbook")
    // Configure which files have ${} expanded
    expandPlaceholders = '**/user-guide.xml'
}

task generateAppendixes {
    
    doLast{
        javaexec {
            main = 'org.jumpmind.properties.DefaultParameterParser'
            classpath = configurations.generateAppendixesDependencies
            args = [
                symAssembleDir + '/../symmetric-server/src/main/deploy/conf/symmetric-server.properties',
                symAssembleDir + '/src/asciidoc/generated/server-parameters.ad',
                'false',
                'asciidoc'
            ]
        }

        javaexec {
            main = 'org.jumpmind.properties.DefaultParameterParser'
            classpath = configurations.generateAppendixesDependencies
            args = [
                symAssembleDir + '/../symmetric-core/src/main/resources/symmetric-default.properties',
                symAssembleDir + '/src/asciidoc/generated/startup-parameters.ad',
                'false',
                'asciidoc'
            ]
        }

        javaexec {
            main = 'org.jumpmind.properties.DefaultParameterParser'
            classpath = configurations.generateAppendixesDependencies
            args = [
                symAssembleDir + '/../symmetric-core/src/main/resources/symmetric-default.properties',
                symAssembleDir + '/src/asciidoc/generated/runtime-parameters.ad',
                'true',
                'asciidoc'
            ]
        }

        javaexec {
            main = 'org.jumpmind.db.io.DatabaseXmlAsciiDocBuilder'
            classpath = configurations.generateAppendixesDependencies
            args = [
                symAssembleDir + '/../symmetric-core/src/main/resources/symmetric-schema.xml',
                symAssembleDir + '/src/asciidoc/generated/schema.ad'
            ]
        }
    }
}

task generateDocs(type: Copy) {
    
    dependsOn asciidoctor
    
    destinationDir = file("$buildDir/doc")
    if (project.properties.containsKey('pro')) {
        destinationDir = file(rootProject.buildDir.path + "/../../symmetric-pro/src/main/webapp/doc")
    }

    into('html') {
        from ("$buildDir/src/asciidoc/html5") { include "user-guide.html" }
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
            'appVersion': version,
            'buildTime': new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss').format(new java.util.Date()),
            'scmVersion' : scmVersion
        ])
    }
    
    into('html') {
        from ("$buildDir/src/asciidoc/html5/tutorials") { include "tutorials.html" }
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
            'appVersion': version,
            'buildTime': new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss').format(new java.util.Date()),
            'scmVersion' : scmVersion
        ])
    }

    into('pdf') {
        from ("$buildDir/src/asciidoc/pdf") { include "user-guide.pdf" }
    }

    into('pdf') {
        from ("$buildDir/src/asciidoc/pdf/tutorials") { include "tutorials.pdf" }
    }
    
    doFirst {
        println "Deleting $destinationDir.path"
        delete destinationDir
    }

}


task publishDoc {
    dependsOn generateDocs
    doLast {
        ant.taskdef(name: 'scp', classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
        classpath: configurations.sshAntTask.asPath)

        ant.scp(
            todir: "$publishUser:$publishPassword@$publishServer:~/www/doc/$majorMinorVersion",
            trust: 'true',
            verbose: 'true') {
            fileset(dir: "$buildDir/doc") { include(name: '**/**')
            }
        }
    }
}

asciidoctor { (1)
    backends = docFormat.split ","
    sourceDir = file(symAssembleDir + '/src/asciidoc')
    outputDir = file("$buildDir/src/asciidoc")
    options = [
        doctype: 'book',
        sourceDocumentNames: [
            symAssembleDir + 'user-guide.ad',
            symAssembleDir + 'tutorials/tutorials.ad']
    ]    
    attributes = [
        'source-highlighter':'coderay',
        'data-uri':'true'
    ]
    if (project.properties.containsKey('pro')) {
       attributes['pro'] = 'true'  
    }     
}

asciidoctor.dependsOn { tasks.generateAppendixes }
