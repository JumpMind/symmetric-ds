import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens

apply from: symAssembleDir + '/asciidoc.gradle'

allprojects {

    apply plugin: 'eclipse-wtp'

    group = 'org.jumpmind.symmetric'
    
    project.buildDir='target'
    
    repositories {
        mavenCentral()
        maven { url "http://repository.codehaus.org" }
        maven { url "http://maven.jumpmind.com/repo" }
    }

    eclipse {
        classpath {
            downloadSources = true
            downloadJavadoc = false
        }
    }
    
}

subprojects { subproject ->

    apply plugin: 'java'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-eclipse'
    apply plugin: 'maven'

    configurations { deployerJars }
    configurations { testArtifacts.extendsFrom testRuntime }

    configurations.provided.transitive = true
    configurations.optional.transitive = false

    sourceCompatibility=1.6
    targetCompatibility=1.6

    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: deployUploadUrl) {
                authentication(userName: deployUser, password: deployPassword)
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    
    artifacts { archives sourcesJar }

    task deploy {
        description 'Shortcut for Maven users'
        dependsOn tasks.uploadArchives
    }

    task testJar(type: Jar) {
        classifier "test"
        from sourceSets.test.output
    }
    
    test {
        ignoreFailures true
        systemProperty "test.server", System.getProperty("test.server", "h2")
        systemProperty "test.client", System.getProperty("test.client", "h2")
        systemProperty "test.root", System.getProperty("test.root", "h2")
        systemProperty "port.number", System.getProperty("port.number", "31415")
    }
    
    jar {
        filesMatching("**/*.properties") {
            filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                'appVersion': version,
                'buildTime': new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss').format(new java.util.Date()),
                'scmVersion' : scmVersion
            ])
        }                
        manifest {
            attributes("Implementation-Title": project.name,
                       "Implementation-Version": version)
        }    
    }


    artifacts { testArtifacts testJar }

    ext {
        bshVersion = '2.0b5'
        commonsBeanUtilsVersion = '1.9.2'
        commonsCliVersion = '1.2'
        commonsDbcpVersion = '1.3'
        commonsFileuploadVersion = '1.3'
        commonsIoVersion = '2.4'
        commonsLangVersion = '2.6'
        commonsNetVersion = '3.3'
        commonsCodecVersion = '1.3'
        commonsCollectionVersion = '3.2'
        cglibVersion = '2.2'
        hamcrestVersion = '1.3'
        h2Version = '1.3.176'
        derbyVersion = '10.10.2.0'
        mariaDbVersion = '1.1.7'
        postgresqlVersion = '9.2-1002-jdbc4'
        hsqldbVersion = '2.3.2'
        sqliteVersion = '3.7.15-M1'
        firebirdVersion = '2.1.6'
        javaMailVersion = '1.4.7'
        jdomVersion = '2.0.5'
        junitVersion = '4.11'
        log4jVersion = '1.2.17'
        slf4jVersion = '1.7.7'
        mockitoVersion = '1.9.5'
        powerMockVersion = '1.5.3'
        mysqlVersion = '5.1.30'
        servletVersion = '3.0.1'
        springVersion = '4.0.5.RELEASE'
        jtdsVersion = '1.2.8'
        bouncyCastleVersion = '140'
        animalSnifferVersion = '1.10'
        jnaVersion = "4.1.0"
        jettyVersion = "7.6.3.v20120416"

        env = System.getenv()
    }

    dependencies {
        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "org.slf4j:jul-to-slf4j:$slf4jVersion"
        compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
        compile "log4j:log4j:$log4jVersion"
        
        provided "org.apache.derby:derby:$derbyVersion"
        provided "org.apache.derby:derbytools:$derbyVersion"
        provided "mysql:mysql-connector-java:$mysqlVersion"
        provided ("org.mariadb.jdbc:mariadb-java-client:$mariaDbVersion") { exclude group: 'net.java.dev.jna' }
        provided "org.jumpmind.symmetric.jdbc:postgresql:$postgresqlVersion"
        provided "jdbc:ojdbc:11.2.0.3"
        provided "net.sourceforge.jtds:jtds:$jtdsVersion"
        provided "org.hsqldb:hsqldb:$hsqldbVersion:jdk5"
        provided "com.h2database:h2:$h2Version"
        provided "org.xerial:sqlite-jdbc:$sqliteVersion"
        provided ("org.firebirdsql.jdbc:jaybird:$firebirdVersion") { 
            exclude group: 'geronimo-spec'
            exclude group: 'log4j'
            exclude group: 'junit'
        }
        // javax.resource needed by jaybird
        provided "org.apache.geronimo.specs:geronimo-j2ee-connector_1.6_spec:1.0"
        runtime fileTree(dir: System.getProperty("user.home") + '/.symmetricds/lib', include: '*.jar')

        testCompile "junit:junit:$junitVersion"
        testCompile "org.hamcrest:hamcrest-all:$hamcrestVersion"
        testCompile "org.mockito:mockito-all:$mockitoVersion"
        testCompile "org.powermock:powermock-api-mockito:$powerMockVersion"
        testCompile "org.powermock:powermock-module-junit4:$powerMockVersion"
        
        deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
        
    }

    task develop {
        dependsOn tasks.cleanEclipse, tasks.cleanEclipseWtp, tasks.eclipse, tasks.eclipseWtp
    }
}
