<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to JumpMind Inc under one or more contributor
    license agreements.  See the NOTICE file distributed
    with this work for additional information regarding
    copyright ownership.  JumpMind Inc licenses this file
    to you under the GNU General Public License, version 3.0 (GPLv3)
    (the "License"); you may not use this file except in compliance
    with the License.

    You should have received a copy of the GNU General Public License,
    version 3.0 (GPLv3) along with this library; if not, see
    <http://www.gnu.org/licenses/>.

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<chapter version="5.0" xml:id="setup"
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:svg="http://www.w3.org/2000/svg"
	xmlns:ns="http://docbook.org/ns/docbook"
	xmlns:mml="http://www.w3.org/1998/Math/MathML"
	xmlns:html="http://www.w3.org/1999/xhtml">
	
	<title>Setup</title>
	
	<section id="setup-engine-files">
	<title>Engine Files</title>
		<para>
		Each node requires properties that allow it to connect to a database and
		register with a parent node. Properties are configured in a file named
		<code>xxxxx.properties</code>
		that is placed in the engines directory of the SymmetricDS install. The
		file is usually named according to the engine.name, but it is not a
		requirement.
		</para>
		
		<para>
		To give a node its identity, the following properties are required. Any
		other properties found in
		<code>conf/symmetric.properties</code>
		can be overridden for a specific engine in an engine's properties file.
		If the properties are changed in
		<code>conf/symmetric.properties</code>
		they will take effect across all engines deployed to the server. Note
		that you can use the variable
		<literal>$(hostName)</literal>
		to represent the host name of the machine when defining these properties
		(for example, external.id=$(hostName) ).
		</para>
		
		<variablelist>
		<varlistentry>
		<term>
		<command>engine.name</command>
		</term>
		
		<listitem>
		<para>This is an arbitrary name that is used to access a specific
		engine using an HTTP URL. Each node configured in the engines directory
		must have a unique engine name. The engine name is also used for the
		domain name of registered JMX beans.</para>
		</listitem>
		</varlistentry>
		
		<varlistentry>
		<term>
		<command>group.id</command>
		</term>
		
		<listitem>
		<para>The node group that this node is a member of.
		Synchronization is specified between node groups, which means you only
		need to specify it once for multiple nodes in the same group.</para>
		</listitem>
		</varlistentry>
		
		<varlistentry>
		<term>
		<command>external.id</command>
		</term>
		
		<listitem>
		<para>The external id for this node has meaning to the user and
		provides integration into the system where it is deployed. For example,
		it might be a retail store number or a region number. The external id
		can be used in expressions for conditional and subset data
		synchronization. Behind the scenes, each node has a unique sequence
		number for tracking synchronization events. That makes it possible to
		assign the same external id to multiple nodes, if desired.</para>
		</listitem>
		</varlistentry>
		
		<varlistentry>
		<term>
		<command>sync.url</command>
		</term>
		
		<listitem>
		<para>
		The URL where this node can be contacted for synchronization. At startup
		and during each heartbeat, the node updates its entry in the database
		with this URL. The sync url is of the format:
		<code>http://{hostname}:{port}/{webcontext}/sync/{engine.name}</code>
		.
		</para>
		
		<para>The {webcontext} is blank for a standalone deployment. It
		will typically be the name of the war file for an application server
		deployment.</para>
		
		<para>The {engine.name} can be left blank if there is only one
		engine deployed in a SymmetricDS server.</para>
		</listitem>
		</varlistentry>
		</variablelist>
		
		<para>When a new node is first started, it is has no information
		about synchronizing. It contacts the registration server in order to
		join the network and receive its configuration. The configuration for
		all nodes is stored on the registration server, and the URL must be
		specified in the following property:</para>
		
		<variablelist>
		<varlistentry>
		<term>
		<command>registration.url</command>
		</term>
		
		<listitem>
		<para>The URL where this node can connect for registration to
		receive its configuration. The registration server is part of
		SymmetricDS and is enabled as part of the deployment. This is typically
		equal to the value of the sync.url of the registration server.</para>
		</listitem>
		</varlistentry>
		</variablelist>
		
		<important>
		<para>
		Note that a
		<emphasis>registration server node</emphasis>
		is defined as one whose
		<literal>registration.url</literal>
		is either (a) blank, or (b) identical to its
		<literal>sync.url</literal>
		.
		</para>
		</important>
		
		<para>For a deployment where the database connection pool should
		be created using a JDBC driver, set the following properties:</para>
		
		<variablelist>
		<varlistentry>
		<term>
		<command>db.driver</command>
		</term>
		
		<listitem>
		<para>The class name of the JDBC driver.</para>
		</listitem>
		</varlistentry>
		
		<varlistentry>
		<term>
		<command>db.url</command>
		</term>
		
		<listitem>
		<para>The JDBC URL used to connect to the database.</para>
		</listitem>
		</varlistentry>
		
		<varlistentry>
		<term>
		<command>db.user</command>
		</term>
		
		<listitem>
		<para>The database username, which is used to login, create, and
		update SymmetricDS tables.</para>
		</listitem>
		</varlistentry>
		
		<varlistentry>
		<term>
		<command>db.password</command>
		</term>
		
		<listitem>
		<para>The password for the database user.</para>
		</listitem>
		</varlistentry>
		</variablelist>
	</section>
</chapter>
