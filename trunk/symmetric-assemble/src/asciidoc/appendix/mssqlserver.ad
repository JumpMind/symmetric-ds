
=== SQL Server

Microsoft SQL Server was tested using the http://jtds.sourceforge.net/[jTDS JDBC driver].

SQL Server allows the update of primary key fields via the SQL update statement. If your application allows 
updating of the primary key field(s) for a table, and you want those updates synchronized, you will need to set the 
"Handle Key Updates" field on the trigger record for that specific table. The default for Handle Key Updates is false.

SymmetricDS expects a row count to be returned for data manipulation statements, which is the default setting for most server.
However, if the NOCOUNT option is ON for SQL-Server, SymmetricDS will not behave correctly.  
The NOCOUNT setting can be checked with "select case when (512 & @@OPTIONS) = 512 then 'on' else 'off' end".
If you're unable to change NOCOUNT for the server, the "db.init.sql" parameter can be set to "SET NOCOUNT OFF" in the engine properties file.

==== SQL Server Permissions

SymmetricDS can be configured to work with a variety SQL Server configurations.  It is possible to install SymmetricDS in the same database and schema with the same user account your application runs.   
However you can also set it up to run in its own database with a designated user.   Whichever configuration you choose below are the permissions required for SymmetricDS to run.

|===

||Symmetric User|Application User

|Symmetric Database|CREATE TABLE, CREATE FUNCTION, REFERENCES|INSERT, EXECUTE
|Symmetric Schema|ALTER, SELECT, INSERT, UPDATE, DELETE|
|Application Database|SELECT, ALTER|

|===

.Example Script for a designated SymmetricDS database and user account
====

Replace the following variables with your desired values.

[horizontal]
SYM_USER:: The SymmetricDS user
SYM_DATABASE:: The database the SymmetricDS runtime tables will be installed in
APP_DATABASE:: The application database where sync data resides
APP_USER:: The application database user account that the application uses when making changes to the data.

[source, Sql]
----

-- SymmetricDS User

CREATE LOGIN SYM_USER
WITH PASSWORD = 'SYM_USER';
GO
use SYM_DATABASE;
GO
CREATE USER SYM_USER FOR LOGIN SYM_USER;
GO
GRANT CREATE TABLE ON DATABASE::SYM_DATABASE to SYM_USER;
GRANT CREATE FUNCTION ON DATABASE::SYM_DATABASE to SYM_USER;
GRANT REFERENCES ON DATABASE::SYM_DATABASE to SYM_USER;
GRANT ALTER, SELECT, INSERT, DELETE, UPDATE ON SCHEMA::dbo TO SYM_USER; 
GO

use APP_DATABASE;
CREATE USER SYM_USER FOR LOGIN SYM_USER 
GRANT SELECT, ALTER ON DATABASE::APP_DATABASE to SYM_USER;

-- Application User

CREATE LOGIN APP_USER
WITH PASSWORD = 'APP_USER';
GO
use APP_DATABASE;
GO
CREATE USER APP_DATABASE FOR LOGIN APP_USER 
GO
GRANT SELECT, INSERT, DELETE, UPDATE ON SCHEMA::dbo TO APP_USER; 
GO
use SYM_DATABASE;
CREATE USER APP_DATABASE FOR LOGIN APP_DATABASE 
GRANT INSERT, EXECUTE ON DATABASE::SYM_DATABASE to APP_USER;
----
====