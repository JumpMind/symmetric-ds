
== SymmetricDS Quick Start Guide

This guide explains how to quickly setup a demonstration of SymmetricDS to help you understand what a working 
system looks like.

Three nodes, which represent three embedded databases, will be installed.  One node will represent a centralized corporate database and the 
other two nodes will represent two individual retail store databases.

image::tutorials/quickstart-two-tier.png[]

=== Installation

For information on how to install SymmetricDS, please refer to the Installation section of the SymmetricDS User Guide.

==== Creating and Starting

ifdef::pro[]
The Demo button will automatically install three `nodes` with synchronization pre-configured.  This will allow
you to see a working model of SymmetricDS.

.Open the web console and click Demo.
image::wizard-node-setup.png[]
endif::pro[]

ifndef::pro[]
First, we need to copy over the `corp-000.properties`, `store-001.properties` and `store-002.properties` files from the `samples/` folder to the `engines/` folder.    
Each properties file represents a node.  

Next, we need to populate the database with the demo configuration.  To do this, execute the following steps.

* Open a command prompt and navigate to the `samples` subdirectory of your SymmetricDS installation.
* Create the sample tables for items, prices, and sales, in the root database by executing the following command:
+
[source, cli]
----
../bin/dbimport --engine corp-000 --format XML --alter-case create_sample.xml
----
+
* Next, create the SymmetricDS tables.  Tables are automatically created when the server starts for the first time.  There is 
also a utility that can be used to create the SymmetricDS tables.  Please run the following.
+
[source, cli]
----
../bin/symadmin --engine corp-000 create-sym-tables
----
+
* Load the SymmetricDS configuration and sample item and transaction data into the root node database by executing:
+
[source, cli]
----
../bin/dbimport --engine corp-000 insert_sample.sql
----

We will now start the SymmetricDS instance.  All three nodes run in the same instance.  From the command prompt, 
navigate to the SymmetricDS home directory and run the following command.

[source, cli]
----
bin/sym
----

NOTE: SymmetricDS is normally deployed as a service.  For more information about deploying SymmetricDS as a service please refer 
to the SymmetricDS User Guide.

The log output will go to both the command line and the `logs/symmetric.log`.  Log output for each node can be identified by the name of the node in brackets.

[source, cli]
----
2015-01-10 10:28:09,604 INFO [corp-000] [AbstractSymmetricEngine] [symmetric-engine-startup-0] Started SymmetricDS
----

* Watch the logging output of the store nodes to see it successfully register with the corp node. 
The stores are configured to attempt registration at a random time interval up to every minute.


endif::pro[]

==== Initial Load

An initial load is the process of seeding tables at a target node with data from a source node. 
Instead of capturing data, data is selected from the source table using a SQL statement and then it is streamed to the client.

ifdef::pro[]
By default, the Demo does this action for you.  However, it is worth noting that Initial Loads can be sent through the Manage->Nodes screen.
endif::pro[]

ifndef::pro[]
The store nodes were pre-configured to do an initial load after registration.  However, it
is worth noting that Initial Loads can be sent using the following commands:
[source, cli]
----
bin/symadmin --engine corp-000 reload-node 001
----

[source, cli]
----
bin/symadmin --engine corp-000 reload-node 002
----

endif::pro[]

==== What's Created

ifdef::pro[]

The demo databases are http://www.h2database.com[H2 Databases].  You can connect to them using a sql explorer tool like 
http://squirrel-sql.sourceforge.net/[Squirrel Sql].  The connection information can be found in the properties files in the 
engines directory.

Please verify the databases by navigating to the Explore tab and using the database explorer on the left.
endif::pro[]

ifndef::pro[]
Please verify the databases by logging in and listing the tables.  You can 
endif::pro[]

* Find the item tables that sync from root to client (that is, from corp to store): item and item_selling_price.
* Find the sales tables that sync from store to corp: sale_transaction and sale_return_line_item.
* Find the SymmetricDS system tables, which have a prefix of "sym_", such as sym_channel, sym_trigger, sym_router, and sym_trigger_router.
* Validate the corp item tables have sample data.

=== Pulling Data

Next, we will make a change to the item data in the central office corp node database (we'll add a new item), and observe the data being pulled down to the store.

==== Create Data

Create data in corp for all stores to pull.

ifdef::pro[]
Navigate to the SQL Explorer for the corp node and execute (image:explore-execute-all.png[title="Run As Script"]) the following scripts.
endif::pro[]
ifndef::pro[]
Open an interactive SQL session with the corp database and add a new item for sale, with different prices at store 001 and store 002.
endif::pro[]

[source, SQL]
----
insert into item (item_id, name) values (110000055, 'Soft Drink');
insert into item_selling_price (item_id, store_id, price) 
	values (110000055, '001', 0.65);
insert into item_selling_price (item_id, store_id, price) 
	values (110000055, '002', 1.00);
----

ifdef::pro[]
image::tutorials/demo-pull-sql.png[]
endif::pro[]

ifndef::pro[]
Watch the logging output of both nodes to see the data transfer. The store is configured to push data to the corp node every minute.
endif::pro[]

==== Verify Outgoing Batches

ifdef::pro[]
.Verify the outgoing batches were created and sent (status of `OK`).
image::tutorials/demo-pull-verify-batch.png[]
endif::pro[]

ifndef::pro[]
Open an interactive SQL session with the corp node database and run the following query to see that the batch sent (status of `OK`).

[source, SQL]
----
select * from sym_outgoing_batch order by batch_id desc
----

endif::pro[]

==== Verify Incoming Batches

ifdef::pro[]
.Verify the incoming batches were received (status of `OK`).
image::tutorials/demo-pull-verify-batch.png[]
endif::pro[]

ifndef::pro[]
Open an interactive SQL session with the store node database and run the following query to see that the batch was received (status of `OK`).

[source, SQL]
----
select * from sym_incoming_batch order by batch_id desc
----

endif::pro[]

==== Verify SQL

Verify the change directly in a store database.  

[source, SQL]
----
select * from item_selling_price
----

ifdef::pro[]
.Verify the new price for store 002 is 1.00
image::tutorials/demo-pull-verify-explore.png[]
endif::pro[]

IMPORTANT:  Make sure you have selected either store-001 or store-002 to run your query against.

=== Pushing Data

We will now simulate a sale at the store and observe how SymmetricDS pushes the sale transaction to the central office.

==== Create Data

Create data in a store to be pushed to corp.  
ifdef::pro[]
Navigate to the SQL Explorer for the corp node 
and execute (image:explore-execute-all.png[title="Run As Script"]) the following scripts.
endif::pro[]

ifndef::pro[]
Open an interactive SQL session with the store node database and add a new sale to the store node database.
endif::pro[]

[source, SQL]
----
insert into sale_transaction (tran_id, store_id, workstation, day, seq) 
	values (1000, '001', '3', '2014-03-21', 100);
	
insert into sale_return_line_item (tran_id, item_id, price, quantity) 
	values (1000, 110000055, 0.65, 1);
----

ifdef::pro[]
image::tutorials/demo-push-sql.png[]
endif::pro[]

ifndef::pro[]
Watch the logging output of both nodes to see the data transfer. The store is configured to push data to the corp node every minute.
endif::pro[]

==== Verify Outgoing Batches

ifdef::pro[]
.Verify the outgoing batches were created and sent (status of `OK`).
image::tutorials/demo-push-verify-batch.png[]
endif::pro[]

ifndef::pro[]
Open an interactive SQL session with the store node database and run the following query to see that the batch sent (status of `OK`).

[source, SQL]
----
select * from sym_outgoing_batch order by batch_id desc
----

endif::pro[]

==== Verify Incoming Batches
ifdef::pro[]
.Verify the incoming batches were received (status of `OK`).
image::tutorials/demo-push-verify-batch.png[]
endif::pro[]

ifndef::pro[]
Open an interactive SQL session with the corp node database and run the following query to see that the batch was received (status of `OK`).

[source, SQL]
----
select * from sym_incoming_batch order by batch_id desc
----

endif::pro[]

==== Verify SQL

Verify the change directly in the corp database. 
 
[source, SQL]
----
select * from sale_transaction;
----

ifdef::pro[]
.Verify the sale transaction from store 001 is present
image::tutorials/demo-push-verify-explore-1.png[]
endif::pro[]

[source, SQL]
----
select * from sale_return_line_item;
----

ifdef::pro[]
.Verify the sale return line item from store 001 is present
image::tutorials/demo-push-verify-explore-2.png[]
endif::pro[]

IMPORTANT:  Make sure you have selected corp-000 to run your query against.

=== Finish
[horizontal]
icon:graduation-cap[role="green" size="2x"]:: [big]#*Congratulations! You have completed the Demo.*#  

Continue to browse through the demo configuration to see how basic triggers, routers, group 
links and more are setup. When you are ready, uninstall the demo and begin your own configuration.
