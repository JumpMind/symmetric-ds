
=== Conflicts

Conflict detection is the act of determining if an insert, update or delete is in "conflict" due to the target data row not 
being consistent with the data at the source prior to the insert/update/delete. 

ifdef::pro[]
image::conflict.png[]
endif::pro[]

.Conflicts are broken into 3 key components in SymmetricDS:

. Detection
. Resolution
. Ping Back


ifndef::pro[]
Conflict detection and resolution strategies are configured in the CONFLICT table. They are configured at minimum for a specific 
NODE_GROUP_LINK . The configuration can also be specific to a CHANNEL and/or table.

Conflict detection is configured in the detect_type and detect_expression columns of CONFLICT . The value for detect_expression 
depends on the detect_type.
endif::pro[]


ifdef::pro[]
.Required Fields
endif::pro[]
Conflict Id:: Unique identifier for a specific conflict detection setting.
Group Link:: References a node group link.
Detection Type:: Indicates the strategy to use for detecting conflicts during a dml action.  

IMPORTANT: Conflicts are detected while data is being loaded into a target system.

.Detection Types
[cols=".^2,8"] 
|===

|use_pk_data|Indicates that only the primary key is used to detect a conflict. If a row exists with the same primary key, then 
no conflict is detected during an update or a delete. Updates and deletes rows are resolved using only the primary key columns. 
If a row already exists during an insert then a conflict has been detected.

|use_changed_data|Indicates that the primary key plus any data that has changed on the source system will be used to detect a conflict. 
If a row exists with the same old values on the target system as they were on the source system for the columns that have changed 
on the source system, then no conflict is detected during an update or a delete. If a row already exists during an insert then a conflict has been detected.

|use_old_data|Indicates that all of the old data values are used to detect a conflict. Old data is the data values of the row on the 
source system prior to the change. If a row exists with the same old values on the target system as they were on the source system, 
then no conflict is detected during an update or a delete. If a row already exists during an insert then a conflict has been detected.

|use_timestamp|Indicates that the primary key plus a timestamp column (as configured in detect_expression ) will indicate whether 
a conflict has occurred. If the target timestamp column is not equal to the old source timestamp column, then a conflict has been detected. 
If a row already exists during an insert then a conflict has been detected.

|use_version|Indicates that the primary key plus a version column (as configured in detect_expression ) will indicate whether a conflict 
has occurred. If the target version column is not equal to the old source version column, then a conflict has been detected. If a row already 
exists during an insert then a conflict has been detected.

|===

Resolution Type:: The choice of how to resolve a detected conflict is configured via the resolve type. Depending on the setting, 
two additional boolean settings may also be configured, namely "resolve row only" and "resolve changes only".

.Resolution Types
[cols=".^2,8"] 
|===

|FALLBACK|Indicates that when a conflict is detected the system should automatically apply the changes anyways. If the source 
operation was an insert, then an update will be attempted. If the source operation was an update and the row does not exist, then 
an insert will be attempted. If the source operation was a delete and the row does not exist, then the delete will be ignored. The 
resolve_changes_only flag controls whether all columns will be updated or only columns that have changed will be updated during a fallback operation.

|IGNORE|Indicates that when a conflict is detected the system should automatically ignore the incoming change. The resolve_row_only 
column controls whether the entire batch should be ignore or just the row in conflict.

|MANUAL|Indicates that when a conflict is detected the batch will remain in error until manual intervention occurs. A row in error 
is inserted into the INCOMING_ERROR table. The conflict detection id that detected the conflict is recorded (i.e., the conflict_id value from CONFLICT), 
along with the old data, new data, and the "current data" (by current data, we mean the unexpected data at the target which doesn't match the old data as expected) 
in columns old_data, new_data, and cur_data. In order to resolve, the resolve_data column can be manually filled out which will be used on 
the next load attempt instead of the original source data. The resolve_ignore flag can also be used to indicate that the row should be ignored on the next load attempt.

|NEWER_WINS|Indicates that when a conflict is detected by USE_TIMESTAMP or USE_VERSION that the either the source or the target will win 
based on the which side has the newer timestamp or higher version number. The resolve_row_only column controls whether the entire batch 
should be ignore or just the row in conflict.

|===

Ping Back:: For each configured conflict, you also have the ability to control if and how much "resolved" data is sent back to the 
node whoâ€™s data change is in conflict. This "ping back" behavior is specified by the following options.

.Ping Backs
[cols=".^2,8"] 
|===

|REMAINING_ROWS|The resolved data of the single row in the batch in conflict, along with the entire remainder of the batch, is sent back to the originating node.

|SINGLE_ROW|The resolved data of the single row in the batch that caused the conflict is sent back to the originating node.

|OFF|No data is sent back to the originating node, even if the resolved data doesn't match the data the node sent.

|===

ifdef::pro[]
.Advanced Options
endif::pro[]
Detection Expression:: An expression that provides additional information about the detection mechanism.  If the detection 
mechanism is use_timestamp or use_version then this expression will be the name of the timestamp or version column.

TIP: The detect_expression can be used to exclude certain column names from being used. In order to exclude column1 and column2, 
the expression would be:
----
excluded_column_names=column1,column2
----

Resolve Changes Only:: Indicates that when applying changes during an update that only data that has changed should be applied.  
Otherwise, all the columns will be updated.  This really only applies to updates.
Resolve Row Only:: Indicates that an action should take place for the entire batch if possible.  This applies to a resolve type of 'ignore'.  
If a row is in conflict and the resolve type is 'ignore', then the entire batch will be ignored.
Channel:: Optional channel that this setting will be applied to.
Target Catalog:: Optional database catalog that the target table belongs to. Only use this if the target table is not in the default catalog.
Target Schema:: Optional database schema that the target table belongs to. Only use this if the target table is not in the default schema.
Target Table:: Optional database table that this setting will apply to.  If left blank, the setting will be for any table in the channel (if set) and in the specified node group link.

IMPORTANT: Be aware that conflict detection will not detect changes to binary columns in the case where use_stream_lobs is true in the trigger for the table. 
In addition, some databases do not allow comparisons of binary columns whether use_stream_lobs is true or not.

WARNING: Some platforms do not support comparisons of binary columns. Conflicts in binary column values will not be detected on the 
following platforms: DB2, DERBY, ORACLE, and SQLSERVER.












