
=== Table Triggers

ifndef::pro[]
SymmetricDS captures synchronization data using database triggers. SymmetricDS' Triggers are defined in the TRIGGER table. 
Each record is used by SymmetricDS when generating database triggers. Database triggers are only generated when a trigger 
is associated with a ROUTER whose source_node_group_id matches the node group id of the current node.

When determining whether a data change has occurred or not, by default the triggers will record a change even if the data was 
updated to the same value(s) they were originally. For example, a data change will be captured if an update of one column 
in a row updated the value to the same value it already was. There is a global property, 
trigger.update.capture.changed.data.only.enabled (false by default), that allows you to override this behavior. 
When set to true, SymmetricDS will only capture a change if the data has truly changed (i.e., when the new column data is not equal to the old column data).
endif::pro[]

ifdef::pro[]
The next step in defining the synchronization scenario is to define which tables should be synchronized.  The simplest
way to do this is by using the *Auto Create...* button on the Configure -> Table Triggers screen.  The Auto Create functionality
introspects the mater node's database and looks for available tables to synchronize.  

Select a channel from the dropdown, select the tables that should be synchronized using that channel, and then click the *Apply* 
button.  The Auto Create functionality can be used repeatedly to select different table and channel combinations.  

image::triggers/triggers-auto-create.png[]

For each table selected in the Auto Create wizard, a corresponding Table Trigger configuration element will be added that can be
maintained within the Table Triggers list screen.  New Table Trigger configuration elements can also be created manually from this
screen.

image::trigger.png[]

endif::pro[]

ifdef::pro[]
.Required Fields
endif::pro[]

Trigger Id:: Unique identifier for a trigger.
Source Table:: The name of the source table that will have a trigger installed to watch for data changes.  See <<Trigger Wildcards>> for using wildcards
to specify multiple source tables.
Channel:: The channel_id of the channel that data changes will flow through.
Sync On Insert:: Determines if changes will be captured for inserts.
Sync On Update:: Determines if changes will be captured for updates.
Sync On Delete:: Determines if changes will be captured for deletes.

ifdef::pro[]
.Advanced Options
endif::pro[]

Source Catalog:: Optional name for the catalog the configured table is in.  If the name includes * then a wildcard match on the table name will be attempted.  \
Wildcard names can include a list of names that are comma separated.  The ! symbol may be used to indicate a NOT match condition.
Source Schema:: Optional name for the schema a configured table is in.  If the name includes * then a wildcard match on the table name will be attempted.  
Wildcard names can include a list of names that are comma separated.  The ! symbol may be used to indicate a NOT match condition.
Reload Channel Id:: The channel_id of the channel that will be used for initial loads.
Sync On Insert Condition:: Specify a condition for the insert trigger firing using an expression specific to the database.   This will be appended to the "WHERE" clause in a SQL expression.  
Sync On Update Condition:: Specify a condition for the update trigger firing using an expression specific to the database.   This will be appended to the "WHERE" clause in a SQL expression.  
Sync On Delete Condition:: Specify a condition for the delete trigger firing using an expression specific to the database.   This will be appended to the "WHERE" clause in a SQL expression.  
Custom Insert Trigger Text:: Specify insert trigger text (SQL) to execute after the SymmetricDS trigger fires.  This field is not applicable for H2, HSQLDB 1.x or Apache Derby.
Custom Update Trigger Text:: Specify update trigger text (SQL) to execute after the SymmetricDS trigger fires.  This field is not applicable for H2, HSQLDB 1.x or Apache Derby.
Custom Delete Trigger Text:: Specify delete trigger text (SQL) to execute after the SymmetricDS trigger fires.  This field is not applicable for H2, HSQLDB 1.x or Apache Derby.
Sync On Incoming:: Whether or not an incoming batch that loads data into this table should cause the triggers to capture data_events. Be careful turning this on, because an update loop is possible.
Stream Lobs:: Specifies whether to capture lob data as the trigger is firing or to stream lob columns from the source tables using callbacks during extraction. A value of 1 indicates 
to stream from the source via callback; a value of 0, lob data is captured by the trigger.
Capture Lobs:: Provides a hint as to whether this trigger will capture big lobs data.  If set to 1 every effort will be made during data capture in trigger and during data selection for 
initial load to use lob facilities to extract and store data in the database.  On Oracle, this may need to be set to 1 to get around 4k concatenation errors during data capture and during initial load.
Capture Old Data:: Indicates whether this trigger should capture and send the old data (previous state of the row before the change).
External Select:: Specify a SQL select statement that returns a single row, single column result.  
It will be used in the generated database trigger to populate the EXTERNAL_DATA field on the data table.  See 
Excluded Column Names:: Specify a comma-delimited list of columns that should not be synchronized from this table.  Note that if a primary key is found in this list, it will be ignored.
Sync Key Names:: Specify a comma-delimited list of columns that should be used as the key for synchronization operations.  By default, if not specified, then the primary key of the table will be used.
Channel Expression:: An expression that will be used to capture the channel id in the trigger.  This expression will only be used if the channel_id is set to 'dynamic.'

.Sample Triggers
====
ifndef::pro[]
[source,sql]
----
insert into SYM_TRIGGER (trigger_id, source_table_name,
          channel_id, last_update_time, create_time)
		  values ('item', 'item', 'item', current_timestamp, current_timestamp); 
----
endif::pro[]
ifdef::pro[]
image::triggers/triggers-examples.png[]
endif::pro[]
====

.Trigger Tips and Tricks

.Multiple Triggers On A Table
IMPORTANT: Note that many databases allow for multiple triggers of the same type to be defined. Each database defines the order in which the triggers fire differently. 
If you have additional triggers beyond those SymmetricDS installs on your table, please consult your database documentation to determine if 
there will be issues with the ordering of the triggers.

ifdef::pro[]
.Quick Config Wizard
TIP: Use the "Quick Config" wizard to setup a complete synchronization scenario with default trigger settings.

.Auto Create Triggers
TIP: By using the "Auto Create" button the on the "Table Triggers" screen you can create all your triggers through a single dialog.
endif::pro[]

[TIP]
.Capture Changed Data
====
When determining whether a data change has occurred or not, by default the triggers will record a change even if the data was 
updated to the same value(s) they were originally. For example, a data change will be captured if an update of one column 
in a row updated the value to the same value it already was. There is a global property that allows you to override this behavior (defaults to false).
----
trigger.update.capture.changed.data.only.enabled=false
----
This property is currently only supported on MySQL, DB2, SQL Server, and Oracle.
====


include::table-triggers/linking.ad[]
include::table-triggers/wildcards.ad[]
include::table-triggers/external-select.ad[]
include::table-triggers/load-only.ad[]