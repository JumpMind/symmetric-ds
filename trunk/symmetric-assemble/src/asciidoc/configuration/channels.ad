
=== Channels
ifndef::pro[]
*[SYM_CHANNEL]*
endif::pro[]

Channels group the data to be synchronized.   Channels can be disabled, suspended, or scheduled as needed.  

ifndef::pro[]
Channel ID [CHANNEL_ID]:: Identifier used through the system to identify a given channel.
endif::pro[]

ifdef::pro[]
Channel ID:: Identifier used through the system to identify a given channel.
endif::pro[]

ifndef::pro[]
Enabled [ENABLED]:: Indicator to determine if a channel is currently in use.
endif::pro[]

ifdef::pro[]
Enabled:: Indicator to determine if a channel is currently in use.
endif::pro[]

ifndef::pro[]
Processing Order [PROCESSING_ORDER]:: Numeric value to determine the order in which a channel will be used.
endif::pro[]

ifdef::pro[]
Processing Order:: Numeric value to determine the order in which a channel will be used.
endif::pro[]

ifndef::pro[]
Batch Algorithm [BATCH_ALGORITHM]:: Batching is the grouping of data, by channel, to be transferred and committed at the client together.  Possible values are: 'default', 'transactional', and 'nontransactional'
endif::pro[]

ifdef::pro[]
Batch Algorithm:: Batching is the grouping of data, by channel, to be transferred and committed at the client together.
endif::pro[]


.Channel Batching Algorithms
|===

|Default|All changes that happen in a transaction are guaranteed to be batched together. Multiple transactions will be batched and committed together until there is no more data to be sent or the max_batch_size is reached.

|Transactional|Batches will map directly to database transactions. If there are many small database transactions, then there will be many batches. The max_batch_size column has no effect.

|Nontransactional|Multiple transactions will be batched and committed together until there is no more data to be sent or the max_batch_size is reached. The batch will be cut off at the max_batch_size regardless of whether it is in the middle of a transaction.

|===

ifndef::pro[]
Reload Channel [RELOAD_FLAG]:: Indicator to determine if a channel is available for initial loads and reverse initial loads.
endif::pro[]

ifdef::pro[]
Reload Channel:: Indicator to determine if a channel is available for initial loads and reverse initial loads.
endif::pro[]

ifndef::pro[]
File Sync Channel [FILE_SYNC_FLAG]:: Indicator to determine if a channel is available for file synchronization.
endif::pro[]

ifdef::pro[]
File Sync Channel:: Indicator to determine if a channel is available for file synchronization.
endif::pro[]

ifndef::pro[]
Max Batch Size [MAX_BATCH_SIZE]:: Specifies the maximum number of data events to process within a batch for this channel.
endif::pro[]

ifdef::pro[]
Max Batch Size:: Specifies the maximum number of data events to process within a batch for this channel.
endif::pro[]

ifndef::pro[]
Max Batch To Send [MAX_BATCH_TO_SEND]:: Specifies the maximum number of batches to send for a given channel during a 'synchronization' between two nodes. A 'synchronization' is equivalent to a push or a pull. For example, if there are 12 batches ready to be sent for a channel and max_batch_to_send is equal to 10, then only the first 10 batches will be sent even though 12 batches are ready.
endif::pro[]

ifdef::pro[]
Max Batch To Send:: Specifies the maximum number of batches to send for a given channel during a 'synchronization' between two nodes. A 'synchronization' is equivalent to a push or a pull. For example, if there are 12 batches ready to be sent for a channel and max_batch_to_send is equal to 10, then only the first 10 batches will be sent even though 12 batches are ready.
endif::pro[]

ifndef::pro[]
Max Data To Route [MAX_DATA_TO_ROUTE]:: Specifies the maximum number of data rows to route for a channel at a time.
endif::pro[]

ifdef::pro[]
Max Data To Route:: Specifies the maximum number of data rows to route for a channel at a time.
endif::pro[]

ifndef::pro[]
Use Old Data To Route [USE_OLD_DATA_TO_ROUTE]:: Indicates if the old data will be included for routing.   Routing can then use this data for processing.  Defaults to true.
endif::pro[]

ifdef::pro[]
Use Old Data To Route:: Indicates if the old data will be included for routing.   Routing can then use this data for processing.  Defaults to true.
endif::pro[]

ifndef::pro[]
Use Row Data To Route [USE_ROW_DATA_TO_ROUTE]:: Indicates if the current data will be included for routing.   Routing can then use this data for processing.  Defaults to true.
endif::pro[]

ifdef::pro[]
Use Row Data To Route:: Indicates if the current data will be included for routing.   Routing can then use this data for processing.  Defaults to true.
endif::pro[]

ifndef::pro[]
Use Primary Key (PK) Data to Route [USE_PK_DATA_TO_ROUTE]:: Indicates if the primary key data will be include for routing.   For example maybe a store ID is needed to apply logic on before sending to the appropriate target nodes.  Defaults to true.
endif::pro[]

ifdef::pro[]
Use Primary Key (PK) Data to Route:: Indicates if the primary key data will be include for routing.   For example maybe a store ID is needed to apply logic on before sending to the appropriate target nodes.  Defaults to true.
endif::pro[]

ifndef::pro[]
Tables Contain Big Lobs [CONTAINS_BIG_LOB]:: Indicator to provide SymmetricDS the hint that the channel contains big lobs. Some databases have shortcuts that SymmetricDS can take advantage of if it knows that the lob columns in SYM_DATA aren't going to contain large lobs. The definition of how large a 'big' lob is varies from database to database.
endif::pro[]

ifdef::pro[]
Tables Contain Big Lobs:: Indicator to provide SymmetricDS the hint that the channel contains big lobs. Some databases have shortcuts that SymmetricDS can take advantage of if it knows that the lob columns in SYM_DATA aren't going to contain large lobs. The definition of how large a 'big' lob is varies from database to database.
endif::pro[]

ifndef::pro[]
Data Loader Types [DATA_LOADER_TYPE]:: Determines how data will be loaded into the target tables.   These are used during an initial load or a reverse initial load.
endif::pro[]

ifdef::pro[]
Data Loader Types:: Determines how data will be loaded into the target tables.   These are used during an initial load or a reverse initial load.
endif::pro[]

|===

|default|Performs an insert first and if this fails will fall back to an update to load the data.

|ftp_localhost|Sends the data in CSV format to a configured ftp location.  These locations are setup in the TODO {SYM_HOME}/conf/ftp-extensions.xml

|mysql_bulk|MySQL bulk loader.  See TODO <xref linkend="dataloaders"/> for more info.

|mssql_bulk|Microsoft SQL Server bulk loader.  TODO See <xref linkend="dataloaders"/> for more info.

|postgres_bulk|PostgreSQL bulk loader.  TODO See <xref linkend="dataloaders"/> for more info.

|oracle_bulk|Oracle bulk loader.  TODO See <xref linkend="dataloaders"/> for more info.

|===



.Sample Channels
=====
ifndef::pro[]
[source,sql]
----
insert into SYM_CHANNEL (channel_id, rocessing_order, max_batch_size, max_batch_to_send,
	 extract_period_millis, batch_algorithm, enabled, description) 
     values ('item', 10, 1000, 10, 0, 'default', 1, 'Item and pricing data'); 
        
insert into SYM_CHANNEL (channel_id, processing_order, max_batch_size,
  	max_batch_to_send, extract_period_millis, batch_algorithm, enabled, description) 
  	values ('sale_transaction', 1, 1000, 10, 60000,
  	'transactional', 1, 'retail sale transactions from register');
----
endif::pro[]
ifdef::pro[]

endif::pro[]
=====



.Channel Tips and Tricks

IMPORTANT:	Transactions will NOT be preserved across channels so its important to setup channels to contain all tables that participate in a given transaction.

TIP: Increase performance by creating designated channels for tables that use LOB data types.  For these channels be sure to check the "Table Contains Big Lobs" to increase performance.