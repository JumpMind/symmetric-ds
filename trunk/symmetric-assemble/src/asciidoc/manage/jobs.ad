
Work done by SymmetricDS is initiated by jobs. Jobs are tasks that are
started and scheduled by a job manager. Jobs are enabled by the
`start.{name}.job`
property. Most jobs are enabled by default. The frequency at which a job
runs in controlled by one of two properties:
`job.{name}.period.time.ms`
or
`job.{name}.cron`
. If a valid cron property exists in the configuration, then it will be
used to schedule the job. Otherwise, the job manager will attempt to use
the period.time.ms property.


The frequency of jobs can be configured in either the engines properties
file or in
<<PARAMETER>>
. When managed in
<<PARAMETER>>
the frequency properties can be changed in the registration server and
when the updated settings sync to the nodes in the system the job
manager will restart the jobs at the new frequency settings.


SymmetricDS utilizes Spring's CRON support, which includes seconds as
the first parameter. This differs from the typical Unix-based
implementation, where the first parameter is usually minutes. For
example,
`*/15 * * * * *`
means every 15 seconds, not every 15 minutes. See
http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/scheduling/support/CronSequenceGenerator.html"[Spring's
documentation]
for more details.


Some jobs cannot be run in parallel against a single node. When running
on a cluster these jobs use the
<<LOCK>>
table to get an exclusive semaphore to run the job. In order to use this
table the
`cluster.lock.enabled`
must be set to true.

The three main jobs in SymmetricDS are the route, push and
pull jobs. The route job decides what captured data changes should be
sent to which nodes. It also decides what captured data changes should
be transported and loaded together in a batch. The push and pull jobs
are responsible for initiating HTTP communication with linked nodes to
push or pull data changes that have been routed. 
        
==== Route Job

After data is captured in the
<<DATA>>
table, it is routed to specific nodes in batches by the
_Route Job_
. It is a single background task that inserts into
<<DATA_EVENT>>
and
<<OUTGOING_BATCH>>
.


The job processes each enabled channel, one at a time, collecting a list
of data ids from
<<DATA>>
which have not been routed (see
<<Data Gaps>>
for much more detail about this step), up to a limit specified by the
channel configuration (
`max_data_to_route`
, on
<<CHANNEL>>
). The data is then batched based on the
`batch_algorithm`
defined for the channel. Note that, for the
_default_
and
_transactional_
algorithm, there may actually be more than
`max_data_to_route`
included depending on the transaction boundaries. The mapping of data to
specific nodes, organized into batches, is then recorded in
<<OUTGOING_BATCH>>
with a status of "RT" in each case (representing the fact that the Route
Job is still running). Once the routing algorithms and batching are
completed, the batches are organized with their corresponding data ids
and saved in
<<DATA_EVENT>>
. Once
<<DATA_EVENT>>
is updated, the rows in
<<OUTGOING_BATCH>>
are updated to a status of New "NE".


The route job will respect the
`max_batch_size`
on
<<OUTGOING_BATCH>>
. If the max batch size is reached before the end of a database
transaction and the batch algorithm is set to something other than
_nontransactional_
the batch may exceed the specified max size.


The route job delegates to a router defined by the
`router_type`
and configured by the
`router_expression`
in the
<<ROUTER>>
table. Each router that has a
_source_node_group_id_
that matches the current node's source node group id and is linked to
the
<<TRIGGER>>
that captured the data gets an opportunity to choose a list of nodes the
data should be sent to. Data can only be routed to nodes that belong to
the router's
_target_node_group_id_
        
===== Data Gaps

On the surface, the first Route Job step of collecting unrouted data ids
seems simple: assign sequential data ids for each data row as it's
inserted and keep track of which data id was last routed and start from
there. The difficulty arises, however, due to the fact that there can be
multiple transactions inserting into
<<DATA>>
simultaneously. As such, a given section of rows in the
<<DATA>>
table may actually contain "gaps" in the data ids when the Route Job is
executing. Most of these gaps are only temporarily and fill in at some
point after routing and need to be picked up with the next run of the
Route Job. Thus, the Route Job needs to remember to route the filled-in
gaps. Worse yet, some of these gaps are actually permanent and result
from a transaction that is rolled back for some reason. In this case,
the Route Job must continue to watch for the gap to fill in and, at some
point, eventually gives up and assumes the gap is permanent and can be
skipped. All of this must be done in some fashion that guarantees that
gaps are routed when they fill in while also keeping routing as
efficient as possible.


SymmetricDS handles the issue of data gaps by making use of a table,
<<DATA_GAP>>
, to record gaps found in the data ids. In fact, this table completely
defines the entire range of data that can be routed at any point in time.
For a brand new instance of SymmetricDS, this table is empty and
SymmetricDS creates a gap starting from data id of zero and ending with
a very large number (defined by
`routing.largest.gap.size`
). At the start of a Route Job, the list of valid gaps (gaps with status
of 'GP') is collected, and each gap is evaluated in turn. If a gap is
sufficiently old (as defined by
`routing.stale.dataid.gap.time.ms`
, the gap is marked as skipped (status of 'SK') and will no longer be
evaluated in future Route Jobs (note that the 'last' gap (the one with
the highest starting data id) is never skipped). If not skipped, then
<<DATA_EVENT>>
is searched for data ids present in the gap. If one or more data ids is
found in
<<DATA_EVENT>>
, then the current gap is marked with a status of OK, and new gap(s) are
created to represent the data ids still missing in the gap's range. This
process is done for all gaps. If the very last gap contained data, a new
gap starting from the highest data id and ending at (highest data id +
`routing.largest.gap.size`
) is then created. This process has resulted in an updated list of gaps
which may contain new data to be routed.
        
==== Push and Pull Jobs for Database changes

After database-change data is routed, it awaits transport to the target nodes. Transport
can occur when a client node is configured to pull data or when the host
node is configured to push data. These events are controlled by the
_push_
and the
_pull jobs_
. When the
`start.pull.job`
SymmetricDS property is set to
`true`
, the frequency that data is pulled is controlled by the
`job.pull.period.time.ms`
. When the
`start.push.job`
SymmetricDS property is set to
`true`
, the frequency that data is pushed is controlled by the
`job.push.period.time.ms`
.


Data is extracted by channel from the source database's
<<DATA>>
table at an interval controlled by the
`extract_period_millis`
column on the
<<CHANNEL>>
table. The
`last_extract_time`
is always recorded, by channel, on the
<<NODE_CHANNEL_CTL>>
table for the host node's id. When the Pull and Push Job run, if the
extract period has not passed according to the last extract time, then
the channel will be skipped for this run. If the
`extract_period_millis`
is set to zero, data extraction will happen every time the jobs run.


The maximum number of batches to extract per synchronization is
controlled by
_max_batch_to_send_
on the
<<CHANNEL>>
table. There is also a setting that controls the max number of bytes to
send in one synchronization. If SymmetricDS has extracted the more than
the number of bytes configured by the
`transport.max.bytes.to.sync`
parameter, then it will finish extracting the current batch and finish
synchronization so the client has a chance to process and acknowledge the
"big" batch. This may happen before the configured max number of batches
has been reached.


Both the push and pull jobs can be configured to push and pull multiple
nodes in parallel. In order to take advantage of this the
`pull.thread.per.server.count`
or
`push.thread.per.server.count`
should be adjusted (from their default value of 10) to the number to the
number of concurrent push/pulls you want to occur per period on each
SymmetricDS instance. Push and pull activity is recorded in the
<<NODE_COMMUNICATION>>
table. This table is also used to lock push and pull activity across
multiple servers in a cluster.


SymmetricDS also provides the ability to configure windows of time when
synchronization is allowed. This is done using the
<<NODE_GROUP_CHANNEL_WND>>
table. A list of allowed time windows can be specified for a node group
and a channel. If one or more windows exist, then data will only be
extracted and transported if the time of day falls within the window of
time specified. The configured times are always for the target node's
local time. If the
`start_time`
is greater than the
`end_time`
, then the window crosses over to the next day.


All data loading may be disabled by setting the
`dataloader.enable`
property to false. This has the effect of not allowing incoming
synchronizations, while allowing outgoing synchronizations. All data
extractions may be disabled by setting the
`dataextractor.enable`
property to false. These properties can be controlled by inserting into
the root server's
<<PARAMETER>>
table. These properties affect every channel with the exception of the
'config' channel.

Node communication over HTTP is represented in the
following figure. 


.Node Communication
image::seq-node-communication.gif[]

==== File Sync Push and Pull Jobs

The File Sync Push and Pull jobs (introduced in version 3.5) are responsible for synchronizing file changes.
These jobs work with batches on the `filesync` channel and create ZIP files of changed files
to be sent and applied on other nodes.
The parameters `job.file.sync.push.period.time.ms` and `job.file.sync.pull.period.time.ms`
control how often the jobs runs, which default to every 60 seconds.
See also <<Jobs>> and <<File Synchronization>>.
        
==== File System Tracker Job
        
The File System Tracker job (introduced in version 3.5) is responsible for monitoring and
recording the events of files being created, modified, or deleted.
It records the current state of files to the <<FILE_SNAPSHOT>> table.
The parameter `job.file.sync.tracker.cron` controls how often the job runs,
which defaults to every 5 minutes.
See also <<Jobs>> and <<File Synchronization>>.
        
==== Sync Triggers Job
        
SymmetricDS examines the current configuration, corresponding database
triggers, and the underlying tables to determine if database triggers
need created or updated. The change activity is recorded on the
<<TRIGGER_HIST>>
table with a reason for the change. The following reasons for a change
are possible:
        
[horizontal]        
N::  New trigger that has not been created before
S::  Schema changes in the table were detected
C::  Configuration changes in Trigger
T::  Trigger was missing
        
A configuration entry in Trigger without any history in Trigger Hist
results in a new trigger being created (N). The Trigger Hist stores a
hash of the underlying table, so any alteration to the table causes the
trigger to be rebuilt (S). When the
`last_update_time`
is changed on the Trigger entry, the configuration change causes the
trigger to be rebuilt (C). If an entry in Trigger Hist is missing the
corresponding database trigger, the trigger is created (T).
        
The process of examining triggers and rebuilding them is automatically
run during startup and each night by the SyncTriggersJob. The user can
also manually run the process at any time by invoking the
`syncTriggers()`
method over JMX.
        
==== Purge Jobs
        
Purging is the act of cleaning up captured data that is no longer needed
in SymmetricDS's runtime tables. Data is purged through delete
statements by the
_Purge Job_
. Only data that has been successfully synchronized will be purged.
Purged tables include:

* <<DATA>>
* <<DATA_EVENT>>
* <<OUTGOING_BATCH>>
* <<INCOMING_BATCH>>
* <<DATA_GAP>>
* <<NODE_HOST_STATS>>
* <<NODE_HOST_CHANNEL_STATS>>
* <<NODE_HOST_JOB_STATS>>        
        
The purge job is enabled by the
`start.purge.job`
SymmetricDS property. The timing of the three purge jobs (incoming,
outgoing, and data gaps) is controlled by a cron expression as specified
by the following properties:
`job.purge.outgoing.cron`
,
`job.purge.incoming.cron`
, and
`job.purge.datagaps.cron`
. The default is
`0 0 0 * * *`
, or once per day at midnight.

Two retention period properties indicate how much history SymmetricDS
will retain before purging. The
`purge.retention.minutes`
property indicates the period of history to keep for synchronization
tables. The default value is 5 days. The
`statistic.retention.minutes`
property indicates the period of history to keep for statistics. The
default value is also 5 days.

The purge properties should be adjusted according to how
much data is flowing through the system and the amount of storage space
the database has. For an initial deployment it is recommended that the
purge properties be kept at the defaults, since it is often helpful to
be able to look at the captured data in order to triage problems and
profile the synchronization patterns. When scaling up to more nodes, it
is recommended that the purge parameters be scaled back to 24 hours or
less. 
