
== Installation

It is recommended that you install a <<Standalone Deployment>> of SymmetricDS.  For other options, please read <<Other Deployment Options>>.

=== Standalone Deployment

ifndef::pro[]
The `sym` command line utility starts a standalone web server with
SymmetricDS pre-deployed.  The standalone server uses an embedded instance of the
Jetty application server to handle web requests.  The web server can be configured
using command line options or the web server can be configured by changing properties in the
`conf/symmetric-server.properties` file.
           
The following example starts the SymmetricDS server on port 8080 with the startup
properties found in the `root.properties` file.
            
[source, cli]
----
/symmetric/bin/sym --properties root.properties --port 8080 --server
----

Even though the port and properties settings can be passed in on the command line, the preferred
configuration approach is to put each hosted node's properties file in the `engines` directory
and to modify port settings and enable secure mode using the `conf/symmetric-server.properties`.

It is also suggested that SymmetricDS be configured to run as a service according to the instructions for your platform as documented in the following section.

endif::pro[]

ifdef::pro[]
Installing a standalone deployment of SymmetricDS means running the _sym_ command line, which launches the built-in Jetty web server.
This is a simple option because it is already provided, but you lose the flexibility to configure
the web server any further.

[.float-group]
--
[.left.text-left]
image:install/install-first.png[]

In order to open the .jar installation file, you must have the Java Runtime Environment (JRE) and it must be attached to the .jar file.
To do this, either double-click on the .jar file or run the following command in the command prompt:

[source, cli]
----
java -jar <filename.jar>
----

Now that the .jar file is open, press Next.

--

[.float-group]
--
[.left.text-left]
image::install/install-second.png[]

Select _Install new software_ and press Next.

--

[.float-group]
--
[.left.text-left]
image::install/install-third.png[]

Carefully read the SymmetricDS Pro License Agreement.  If you accept, select _I accept the terms of this license agreement._ and press Next.

--

[.float-group]
--
[.left.text-left]
image::install/install-fourth.png[]

Choose where you want to install SymmetricDS and press Next.

--

[.float-group]
--
[.left.text-left]
image::install/install-fifth.png[]

Select the packs you want to install.  By default, all packs are selected.  If you are not going to integrate SymmetricDS with Android, you may
uncheck the Android pack.

--

[.float-group]
--
[.left.text-left]
image::install/install-sixth.png[]

It is suggested that SymmetricDS be configured to run as a service so that when the machine is booted, SymmetricDS is already running.  
For more information, or to learn how to install SymmetricDS as a service
later if you choose not to now, refer to <<Running SymmetricDS as a Service>>.  Select your choice and press Next.

--

[.float-group]
--
[.left.text-left]
image::install/install-seventh.png[]

Enter the ports for SymmetricDS to listen to.  If you would like encrypted data synchronization for security, check the SSL option.  When you have chosen the desired ports, press Next.

--

[.float-group]
--
[.left.text-left]
image::install/install-eigth.png[]

Confirm your installation settings and press Next to begin the installation.

--

[.float-group]
--
[.left.text-left]
image::install/install-ninth.png[]

Once SymmetricDS finishes installing, press Next.

--

[.float-group]
--
[.left.text-left]
image::install/install-tenth.png[]

If you chose the option for the SymmetricDS Server to start after installation, wait for it to start and then press Next.

--

[.float-group]
--
[.left.text-left]
image::install/install-eleventh.png[]

The installation is now complete.  Choose if you want to open the SymmetricDS Pro Control Center and press Done.

--

[.float-group]
--
[.left.text-left]
image::install/install-twelth.png[]

If you chose to open the SymmetricDS Pro Control Center, you will be greeted by this screen.  From the SymmetricDS Pro Control Center, 
you may start/stop the server, open the web console, and choose to run SymmetricDS as a service if you have not already done so.

--

endif::pro[]


=== Running SymmetricDS as a Service
   
SymmetricDS can be configured to start automatically when the system boots, running as a Windows service or Linux/Unix daemon.
A wrapper process starts SymmetricDS and monitors it, so it can be restarted if it runs out of memory or exits unexpectedly.
The wrapper writes standard output and standard error to the `logs/wrapper.log` file.

ifdef::pro[]
For SymmetricDS Pro, you may have already installed as a service, so this section will show you how to manually install
the service from command line.
endif::pro[]

==== Running as a Windows Service
       
To install the service, run the following command as Administrator:

[source, cli]
----
bin\sym_service.bat install
----

Most configuration changes do not require the service to be re-installed.
To uninstall the service, run the following command as Administrator:

[source, cli]
----
bin\sym_service.bat uninstall
----
   
To start and stop the service manually, run the following commands as Administrator:
[source, cli]
----
bin\sym_service.bat start
bin\sym_service.bat stop
----

==== Running as a Linux/Unix daemon
       
An init script is written to the system `/etc/init.d` directory.
Symbolic links are created for starting on run levels 2, 3, and 5 and stopping on run levels 0, 1, and 6.
To install the script, running the following command as root:
[source, cli]
----
bin/sym_service install
----
   
Most configuration changes do not require the service to be re-installed.
To uninstall the service, run the following command as root:
[source, cli]
----
bin/sym_service uninstall
----
   
To start and stop the service manually, run the following commands:
[source, cli]
----
bin/sym_service start
bin/sym_service stop
----
    
=== Clustering
       
A single SymmetricDS node may be clustered across a series of instances, creating a web farm.  A node might be clustered to provide load balancing and failover, for example.

When clustered, a hardware load balancer is typically used
to round robin client requests to the cluster.  The load balancer should be configured for stateless connections.

ifndef::pro[]
Also, the `sync.url` (discussed in <<Engine Files>>) SymmetricDS property should be set to the URL of the load balancer.
endif::pro[]

ifdef::pro[]
Also, the `sync.url` (discussed in <<Registration URL>>) SymmetricDS property should be set to the URL of the load balancer.
endif::pro[]
   
If the cluster will be running any of the SymmetricDS jobs, then the `cluster.lock.enabled` property should be set to `true`.
By setting this property to true, SymmetricDS will use a row in the <<LOCK>> table as a semaphore to make sure that only one instance at a time
runs a job.  When a lock is acquired, a row is updated in the lock table with the time of the lock and the server id of the locking job.  The lock time is set back to null
when the job is finished running.  Another instance of SymmetricDS cannot acquire a lock until the locking instance (according to the server id) releases the lock.  If an
instance is terminated while the lock is still held, an instance with the same server id is allowed to reacquire the lock.  If the locking instance remains down, the lock can be
broken after a period of time, specified by the `cluster.lock.timeout.ms` property, has expired.  Note that if the job is still running and the lock
expires, two jobs could be running at the same time which could cause database deadlocks.
   
By default, the locking server id is the hostname of the server.  If two clustered instances are running on the same server, then the `cluster.server.id` property
may be set to indicate the name that the instance should use for its server id.
   
When deploying SymmetricDS to an application server like Tomcat or JBoss, no special session clustering needs to be configured for the application server.
    
=== Basic Authentication

SymmetricDS supports basic authentication for client and server nodes.
        
To configure a client node to use basic authentication when communicating with a server node,
specify the following startup parameters:
        
http.basic.auth.username::  username for client node basic authentication.
                            [&#xA0;Default:&#xA0;]
                        
http.basic.auth.password::  password for client node basic authentication.
                            [&#xA0;Default:&#xA0;]
                        
The SymmetricDS Standalone Web Server also supports Basic Authentication.  It can be enabled by
passing the following arguments to the startup program
        
--http-basic-auth-user::  username for basic authentication
                            [&#xA0;Default:&#xA0;]
--http-basic-auth-password::  password for basic authentication
                            [&#xA0;Default:&#xA0;]
                        
If the server node is deployed to Tomcat or another application server as a WAR or EAR file, then
basic authentication is setup with the standard configuration in the WEB.xml file.

=== Other Deployment Options

It is recommended that SymmetricDS is installed as a standalone service, however there are two other deployment options.

==== Web Archive (WAR)
           
           
This option means packaging a WAR file and deploying to your favorite
web server, like Apache Tomcat.  It's a little more work, but you
can configure the web server to do whatever you need.  SymmetricDS can also
be embedded in an existing web application, if desired.  As a web application archive, a WAR is deployed to an application server,
such as Tomcat, Jetty, or JBoss.  The structure of the archive will have a `web.xml`
file in the `WEB-INF` folder, an appropriately configured `symmetric.properties` file in the `WEB-INF/classes` folder,
and the required JAR files in the `WEB-INF/lib` folder.

.War
image::symmetric_war.gif[]

A war file can be generated using the standalone installation's `symadmin` utility and the
`create-war` subcommand.  The command requires the name of the war file to generate.  It
essentially packages up the web directory, the conf directory and includes an optional
properties file.  Note that if a properties file is included, it will be copied to
WEB-INF/classes/symmetric.properties.  This is the same location conf/symmetric.properties
would have been copied to.  The generated war distribution uses the same web.xml as the standalone
deployment.
            
[source, cli]           
----
bin/symadmin -p my-symmetric-ds.properties create-war /some/path/to/symmetric-ds.war
----

==== Embedded
           
This option means you must write a wrapper Java program that runs
SymmetricDS.  You would probably use Jetty web server, which is also embeddable.
You could bring up an embedded database like Derby or H2.  You could configure the
web server, database, or SymmetricDS to do whatever you needed, but it's also
the most work of the three options discussed thus far.
   
The deployment model you choose depends on how much flexibility you need versus how easy you
want it to be.  Both Jetty and Tomcat are excellent, scalable web servers that
compete with each other and have great performance.  Most people choose either
the _Standalone_ or _Web Archive_ with Tomcat 5.5 or 6.  Deploying to Tomcat
is a good middle-of-the-road decision that requires a little more work for more flexibility.

A Java application with the SymmetricDS Java Archive (JAR) library on its
classpath can use the `SymmetricWebServer` to start the server.
            
[source, java]
----
import org.jumpmind.symmetric.SymmetricWebServer;

public class StartSymmetricEngine {

    public static void main(String[] args) throws Exception {

        SymmetricWebServer node = new SymmetricWebServer(
                                   "classpath://my-application.properties", "conf/web_dir");

        // this will create the database, sync triggers, start jobs running
        node.start(8080);

        // this will stop the node
        node.stop();
    }
----
           
This example starts the SymmetricDS server on port 8080.
The configuration properties file, `my-application.properties`,
is packaged in the application to provide properties that override the SymmetricDS
default values.  The second parameter to the constructor points to the web directory.
The default location is `web`.  In this example the web directory is located
at `conf/web_dir`.  The web.xml is expected to be found at `conf/web_dir/WEB-INF/web.xml`.