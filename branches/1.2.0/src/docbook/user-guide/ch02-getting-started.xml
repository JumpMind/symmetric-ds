<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="ch02-getting-started" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml">
    <title>Getting Started</title>
    <para>
        This chapter is a hands-on tutorial that demonstrates how to synchronize the sample
        database between two running nodes of SymmetricDS.
    </para>
    <para>
        To get started, you create a root (central source) database and a client (remote target)
        database that each run the SymmetricDS software to synchronize changes. You open
        registration for the client, which registers with the root to receive the
        synchronization configuration. You ask the root to reload the client in order to perform
        an initial synchronization. Then you make changes to each database and observe the
        changes propagating.
    </para>
    <section>
        <title>Installing SymmetricDS</title>
        <para>
            Install the SymmetricDS software and configure it with your database connection
            information.
        </para>
        <procedure>
            <step>
                <para>
                    Download the
                    <ulink url="http://sourceforge.net/project/showfiles.php?group_id=206470">
                        symmetric-ds.zip
                    </ulink>
                    file from
                    <ulink url="http://www.symmetricds.org/">http://www.symmetricds.org/</ulink>
                </para>
            </step>
            <step>
                <para>
                    Unzip the file, which creates a
                    <filename class="directory">symmetric-ds-1.0.0</filename>
                    subdirectory.
                </para>
            </step>
            <step>
                <para>Edit the database properties in the following property files 
                for the root and client nodes:</para>
                <para>
                <itemizedlist spacing="compact">
                    <listitem>
                        <para>
                            <filename>samples/root.properties</filename>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <filename>samples/client.properties</filename>
                        </para>
                    </listitem>
                </itemizedlist>
                </para>
            </step>
            <step>
                <para>
                    Set the following properties in both files for the corresponding databases:
                </para>
                <programlisting><![CDATA[# The class name for the JDBC Driver
db.driver=com.mysql.jdbc.Driver

# The JDBC URL used to connect to the database
db.url=jdbc:mysql://localhost/sample

# The user to login as who can create and update tables
db.user=symmetric

# The password for the user to login as
db.password=]]></programlisting>
            </step>
            <step>
                <para>
                    Set the following properties in the
                    <filename>client.properties</filename>
                    file:
                </para>
                <programlisting><![CDATA[# The HTTP URL of the root node to contact for registration
symmetric.runtime.registration.url=http://localhost:8080/sync]]></programlisting>
            </step>
        </procedure>
    </section>
    <section>
        <title>Creating and Populating Your Databases</title>
        <important>
            <para>
                You must first create the databases for your root and client nodes using the
                administration tools provided by your database vendor. Make sure the name of the
                databases you create match the settings in the properties files.
            </para>
            <para>
                See the appendix <emphasis>Database Notes</emphasis> for compatibility
                with your specific database.
            </para>
        </important>
        <para>
            Create and load the root node tables with sample data and the synchronization
            configuration. Create the tables in the client node database to prepare it.
        </para>
        <procedure>
            <step>
                <para>
                    Open a command prompt and navigate to the
                    <filename class="directory">samples</filename>
                    subdirectory of your SymmetricDS installation.
                </para>
            </step>
            <step>
                <para>Create the sample tables in both the root and client databases.</para>
                <para>
                    <command>../bin/sym -p root.properties --run-ddl create_sample.xml</command>
                </para>
                <para>
                    <command>
                        ../bin/sym -p client.properties --run-ddl create_sample.xml
                    </command>
                </para>
                <para>
                    Note that the command may output warnings about altering foreign keys on the
                    tables, which are safe to ignore.
                </para>
            </step>
            <step>
                <para>
                    Create the symmetric tables in the root node database. These tables will
                    contain the configuration for synchronization. The following command uses
                    the auto-creation feature to create all the necessary symmetric system
                    tables.
                </para>
                <para>
                    <command>../bin/sym -p root.properties --auto-create</command>
                </para>
            </step>
            <step>
                <para>Load sample data and configuration into the root node database.</para>
                <para>
                    <command>../bin/sym -p root.properties --run-sql insert_sample.sql</command>
                </para>
            </step>
            <step>
                <para>Verify the databases by logging in and listing the tables.</para>
            </step>
        </procedure>
    </section>
    <section>
        <title>Starting SymmetricDS</title>
        <para>Start the SymmetricDS nodes and observe the logging output.</para>
        <procedure>
            <step>
                <para>
                    Open a command prompt and navigate to the
                    <filename class="directory">samples</filename>
                    subdirectory of your SymmetricDS installation.
                </para>
            </step>
            <step>
                <para>Start the root node server.</para>
                <para>
                    <command>../bin/sym -p root.properties --port 8080 --server</command>
                </para>
                <para>
                    The root node server starts up and creates all the triggers that were
                    configured by the sample configuration. It listens on port 8080 for
                    synchronization and registration requests.
                </para>
            </step>
            <step>
                <para>Start the client node server.</para>
                <para>
                    <command>../bin/sym -p client.properties --port 9090 --server</command>
                </para>
                <para>
                    The client node server starts up and uses the auto-creation feature to
                    create the symmetric system tables. It begins polling the root node in order
                    to register. Since registration is not yet open, the client node receives an
                    authorization failure (HTTP response of 403).
                </para>
            </step>
        </procedure>
    </section>
    <section>
        <title>Registering a Node</title>
        <para>
            Open registration for the client node using the root node administration feature.
        </para>
        <procedure>
            <step>
                <para>
                    Open a command prompt and navigate to the
                    <filename class="directory">samples</filename>
                    subdirectory of your SymmetricDS installation.
                </para>
            </step>
            <step>
                <para>Open registration for the client node server.</para>
                <para>
                    <command>
                        ../bin/sym -p root.properties --open-registration "store,1"
                    </command>
                </para>
                <para>
                    The registration is opened for a node group called "store" with an external
                    identifier of "1".
                </para>
            </step>
            <step>
                <para>
                    Watch the logging output of the client node to see it successfully register
                    with the root node. The client is configured to attempt registration each
                    minute. Once registered, the root and client are enabled for
                    synchronization.
                </para>
            </step>
        </procedure>
    </section>
    <section>
        <title>Sending Initial Load</title>
        <para>
            Send an initial load of data to the client node using the root node administration
            feature.
        </para>
        <procedure>
            <step>
                <para>
                    Open a command prompt and navigate to the
                    <filename class="directory">samples</filename>
                    subdirectory of your SymmetricDS installation.
                </para>
            </step>
            <step>
                <para>Send an initial load of data to the client node server.</para>
                <para>
                    <command>../bin/sym -p root.properties --reload-node 1</command>
                </para>
                <para>
                    With this command, the root node queues up an initial load for the client
                    node that will sent the next time the client performs its pull. The initial
                    load includes data for each table that is configured for synchronization.
                </para>
            </step>
            <step>
                <para>
                    Watch the logging output of both nodes to see the data transfer. The client
                    is configured to pull data from the root each minute.
                </para>
            </step>
        </procedure>
    </section>
    <section>
        <title>Pulling Data</title>
        <para>
            Modify data in the root database. The changes are propagated to the client database
            during pull synchronization.
        </para>
        <procedure>
            <step>
                <para>Open an interactive SQL session with the root database.</para>
            </step>
            <step>
                <para>Add a new item for sale to the root database</para>
                <para>
                    <command>
                        insert into item_selling_price (price_id, price) values (55, 0.65);
                    </command>
                </para>
                <para>
                    <command>
                        insert into item (item_id, price_id, name) values (110000055, 55, 'Soft
                        Drink');
                    </command>
                </para>
                <para>
                    Once the statements are committed, the data change is captured and queued
                    for the client node to pull.
                </para>
            </step>
            <step>
                <para>
                    Watch the logging output of both nodes to see the data transfer. The client
                    is configured to pull data from the root each minute.
                </para>
            </step>
            <step>
                <para>
                    Verify that the new data arrives in the client database using another
                    interactive SQL session.
                </para>
            </step>
        </procedure>
    </section>
    <section>
        <title>Pushing Data</title>
        <para>
            Modify data in the client database. The changes are propagated to the root database
            during push synchronization.
        </para>
        <procedure>
            <step>
                <para>Open an interactive SQL session with the client database.</para>
            </step>
            <step>
                <para>Add a new sale to the client database</para>
                <para>
                    <command>
                        insert into sale_transaction (tran_id, store, workstation, day, seq) values
                        (1000, '1', '3', '2007-11-01', 100);
                    </command>
                </para>
                <para>
                    <command>
                        insert into sale_return_line_item (tran_id, item_id, price, quantity)
                        values (1000, 110000055, 0.65, 1);
                    </command>
                </para>
                <para>
                    Once the statements are committed, the data change is captured and queued
                    for the client node to push.
                </para>
            </step>
            <step>
                <para>
                    Watch the logging output of both nodes to see the data transfer. The client
                    is configured to push data to the root each minute.
                </para>
            </step>
            <step>
                <para>
                    Verify that the new data arrives in the root database using another
                    interactive SQL session.
                </para>
            </step>
        </procedure>
    </section>
</chapter>
