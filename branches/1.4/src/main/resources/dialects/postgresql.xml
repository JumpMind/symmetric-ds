<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd" default-lazy-init="true">

    <bean id="postgresqlDialect" class="org.jumpmind.symmetric.db.postgresql.PostgreSqlDbDialect"
        scope="prototype">
        <property name="tablePrefix" value="${sync.table.prefix}" />
        <property name="parameterService" ref="parameterService" />
        <property name="streamingResultsFetchSize" value="${db.jdbc.streaming.results.fetch.size}" />
        <property name="sqlTemplate">
            <bean class="org.jumpmind.symmetric.db.SqlTemplate">            
                <property name="triggerPrefix" value="${trigger.prefix}" />
                <property name="stringColumnTemplate" >
                    <value>
                        <![CDATA[ case when $(tableAlias)."$(columnName)" is null then '' else '"' || replace(replace($(tableAlias)."$(columnName)",E'\\',E'\\\\'),'"',E'\\"') || '"' end ||','||]]>
                    </value>
                </property>
                <property name="clobColumnTemplate">
                    <value>
                        <![CDATA[ case when $(tableAlias)."$(columnName)" is null then '' else '"' || replace(replace($(tableAlias)."$(columnName)",E'\\',E'\\\\'),'"',E'\\"') || '"' end ||','||]]>
                    </value>
                </property>
                <property name="blobColumnTemplate">
                    <value>
                        <![CDATA[ case when $(tableAlias)."$(columnName)" is null then '' else '"' || replace(replace(encode($(tableAlias)."$(columnName)", 'base64'),E'\\',E'\\\\'),'"',E'\\"') || '"' end ||','||]]>
                    </value>
                </property>
                <property name="numberColumnTemplate">
                    <value>
                        <![CDATA[ case when $(tableAlias)."$(columnName)" is null then '' else '"' || cast($(tableAlias)."$(columnName)" as varchar) || '"' end ||','||]]>
                    </value>
                </property>
                <property name="booleanColumnTemplate">
                    <value>
                        <![CDATA[case when $(tableAlias)."$(columnName)" is null then '' when $(tableAlias)."$(columnName)" then '"1"' else '"0"' end||','||]]>
                    </value>
                </property>
                <property name="datetimeColumnTemplate" >
                    <value>
                        <![CDATA[ case when $(tableAlias)."$(columnName)" is null then '' else '"' || to_char($(tableAlias)."$(columnName)", 'YYYY-MM-DD HH24:MI:SS') || '"' end ||','||]]>
                    </value>
                </property>
                <property name="triggerConcatCharacter" value="||"/>
                <property name="newTriggerValue" value="new"/>
                <property name="oldTriggerValue" value="old"/>    
                <property name="sqlTemplates">
                    <map>
                        <entry key="insertTriggerTemplate">
                            <value>
                                <![CDATA[
                                create or replace function $(schemaName)f$(triggerName)() returns trigger as $$
                                begin
                                  if $(syncOnInsertCondition) and $(syncOnIncomingBatchCondition) then
                                    insert into $(defaultSchema)$(prefixName)_data
                                    (table_name, event_type, trigger_hist_id, row_data, create_time)
                                    values(
                                      '$(targetTableName)',
                                      'I',
                                      $(triggerHistoryId),
                                      $(columns),
                                      CURRENT_TIMESTAMP
                                    );
                                    insert into $(defaultSchema)$(prefixName)_data_event (node_id, data_id, channel_id, transaction_id) 
                                    (select node_id, currval('$(defaultSchema)$(prefixName)_data_data_id_seq'), '$(channelName)', $(txIdExpression)
                                    from $(prefixName)_node c
                                    where c.node_group_id='$(targetGroupId)' and c.sync_enabled=1 $(nodeSelectWhere));
                                  end if;
                                  return null;
                                end;
                                $$ language plpgsql;
                                ]]>
                            </value>
                        </entry>
                        <entry key="insertPostTriggerTemplate">
                            <value>
                                <![CDATA[
                                create trigger $(triggerName) after insert on $(schemaName)$(tableName)
                                for each row execute procedure $(schemaName)f$(triggerName)();
                                ]]>
                            </value>
                        </entry>
                        <entry key="updateTriggerTemplate">
                            <value>
                                <![CDATA[
                                create or replace function $(schemaName)f$(triggerName)() returns trigger as $$
                                begin
                                  if $(syncOnUpdateCondition) and $(syncOnIncomingBatchCondition) then
                                    insert into $(defaultSchema)$(prefixName)_data
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, create_time)
                                    values(
                                      '$(targetTableName)',
                                      'U',
                                      $(triggerHistoryId),
                                      $(oldKeys),
                                      $(columns),
                                      CURRENT_TIMESTAMP
                                    );
                                    insert into $(defaultSchema)$(prefixName)_data_event (node_id, data_id, channel_id, transaction_id) 
                                    (select node_id, currval('$(defaultSchema)$(prefixName)_data_data_id_seq'), '$(channelName)', $(txIdExpression)
                                    from $(prefixName)_node c
                                    where c.node_group_id='$(targetGroupId)' and c.sync_enabled=1 $(nodeSelectWhere));
                                  end if;
                                  return null;
                                end;
                                $$ language plpgsql;
                                ]]>
                            </value>
                        </entry>
                        <entry key="updatePostTriggerTemplate">
                            <value>
                                <![CDATA[
                                create trigger $(triggerName) after update on $(schemaName)$(tableName)
                                for each row execute procedure $(schemaName)f$(triggerName)();
                                ]]>
                            </value>
                        </entry>
                        <entry key="deleteTriggerTemplate">
                            <value>
                                <![CDATA[
                                create or replace function $(schemaName)f$(triggerName)() returns trigger as $$
                                begin
                                  if $(syncOnDeleteCondition) and $(syncOnIncomingBatchCondition) then
                                    insert into $(defaultSchema)$(prefixName)_data
                                    (table_name, event_type, trigger_hist_id, pk_data, create_time)
                                    values(
                                      '$(targetTableName)',
                                      'D',
                                      $(triggerHistoryId),
                                      $(oldKeys),
                                      CURRENT_TIMESTAMP
                                    );
                                    insert into $(defaultSchema)$(prefixName)_data_event (node_id, data_id, channel_id, transaction_id) 
                                    (select node_id, currval('$(defaultSchema)$(prefixName)_data_data_id_seq'), '$(channelName)', $(txIdExpression)
                                    from $(prefixName)_node c
                                    where c.node_group_id='$(targetGroupId)' and c.sync_enabled=1 $(nodeSelectWhere));
                                  end if;
                                  return null;
                                end;
                                $$ language plpgsql;
                                ]]>
                            </value>
                        </entry>
                        <entry key="deletePostTriggerTemplate">
                            <value>
                                <![CDATA[
                                create trigger $(triggerName) after delete on $(schemaName)$(tableName)
                                for each row execute procedure $(schemaName)f$(triggerName)();
                                ]]>
                            </value>
                        </entry>
                        <entry key="initialLoadSqlTemplate">
                            <value>
                                <![CDATA[select $(columns) from $(schemaName)$(tableName) t where $(whereClause)]]>
                            </value>
                        </entry>
                    </map>
                </property>
            </bean>
        </property>
    </bean>

</beans>