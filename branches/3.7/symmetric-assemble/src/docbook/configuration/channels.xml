<section id="configuration-channels"
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:svg="http://www.w3.org/2000/svg"
	xmlns:ns="http://docbook.org/ns/docbook"
	xmlns:mml="http://www.w3.org/1998/Math/MathML"
	xmlns:html="http://www.w3.org/1999/xhtml">
	
		<title>Channels</title>
		
		<para>
		Channels group the data to be synchronized.   Channels can be disabled, suspended, or scheduled as needed.  
		</para>
		
		<variablelist>
	        <varlistentry>
	        <term>
	        	<command>Channel ID</command>
	        </term>        
	        <listitem>
	        	<para>Identifier used through the system to identify a given channel.</para>
	        </listitem>
	        </varlistentry>
	        <varlistentry>
	        <term>
	        	<command>Enabled</command>
	        </term>        
	        <listitem>
	        	<para>Indicator to determine if a channel is currently in use.</para>
	        </listitem>
	        </varlistentry>
	        <varlistentry>
	        <term>
	        	<command>Processsing Order</command>
	        </term>        
	        <listitem>
	        	<para>Numeric value to determine the order in which a channel will be used.</para>
	        </listitem>
	        </varlistentry>
	        <varlistentry>
	        <term>
	        	<command>Batch Algorithm</command>
	        </term>        
	        <listitem>
	        	<para>Batching is the grouping of data, by channel, to be transferred and committed at the client together.</para>
	        	<table xml:id="batch.algorithms" frame='all'>
    				<title>Channel Batching Algorithms</title>
  					<tgroup cols='2' align='left' colsep='1' rowsep='1'>
  					<colspec colnum="1" colwidth="2*"/>
	        		<colspec colnum="2" colwidth="8*"/>
		        		<tbody>
	        			<row>
	        				<entry>Default</entry>
	        				<entry>All changes that happen in a transaction are guaranteed to
							be batched together. Multiple transactions will be batched and committed
							together until there is no more data to be sent or the max_batch_size is
							reached.</entry>
	        			</row>
	        			<row>
	        				<entry>Transactional</entry>
	        				<entry>Batches will map directly to database transactions. If
							there are many small database transactions, then there will be many
							batches. The max_batch_size column has no effect.</entry>
	        			</row>
	        			<row>
	        				<entry>Nontransactional</entry>
	        				<entry>Multiple transactions will be batched and committed
							together until there is no more data to be sent or the max_batch_size is
							reached. The batch will be cut off at the max_batch_size regardless of
							whether it is in the middle of a transaction.</entry>
	        			</row>
	        		</tbody>
	        		</tgroup>
	        	</table>
	        
	        </listitem>
	        </varlistentry>
	        <varlistentry>
	        <term>
	        	<command>Reload Channel</command>
	        </term>        
	        <listitem>
	        	<para>Indicator to determine if a channel is available for initial loads and reverse initial loads.</para>
	        </listitem>
	        </varlistentry>
	        <varlistentry>
	        <term>
	        	<command>File Sync Channel</command>
	        </term>        
	        <listitem>
	        	<para>Indicator to determine if a channel is available for file synchronization.</para>
	        </listitem>
	        </varlistentry>
	        <varlistentry>
	        <term>
	        	<command>Max Batch Size</command>
	        </term>        
	        <listitem>
	        	<para>Specifies the maximum number of data events to process
				within a batch for this channel.</para>
	        </listitem>
	        </varlistentry>
	        <varlistentry>
	        <term>
	        	<command>Max Batch To Send</command>
	        </term>        
	        <listitem>
	        	<para>Specifies the maximum number of batches to send for a given
				channel during a 'synchronization' between two nodes. A
				'synchronization' is equivalent to a push or a pull. For example, if
				there are 12 batches ready to be sent for a channel and
				max_batch_to_send is equal to 10, then only the first 10 batches will be
				sent even though 12 batches are ready.</para>
	        </listitem>
	        </varlistentry>
	        <varlistentry>
	        <term>
	        	<command>Max Data To Route</command>
	        </term>        
	        <listitem>
	        	<para>Specifies the maximum number of data rows to route for a
				channel at a time.</para>
	        </listitem>
	        </varlistentry>
	        <varlistentry>
	        <term>
	        	<command>Use Old Data To Route</command>
	        </term>        
	        <listitem>
	        	<para>Indicates if the old data will be included for routing.   Routing can then use this data for processing.</para>
	        </listitem>
	        </varlistentry>
	        <varlistentry>
	        <term>
	        	<command>Use Row Data To Route</command>
	        </term>        
	        <listitem>
	        	<para>Indicates if the current data will be included for routing.   Routing can then use this data for processing.</para>
	        </listitem>
	        </varlistentry>
	        <varlistentry>
	        <term>
	        	<command>Use Primary Key (PK) Data to Route</command>
	        </term>        
	        <listitem>
	        	<para>Indicates if the primary key data will be include for routing.   For example maybe a store ID is needed to apply logic on before sending to the appropriate target nodes.</para>
	        </listitem>
	        </varlistentry>
	        <varlistentry>
	        <term>
	        	<command>Tables Contain Big Lobs</command>
	        </term>        
	        <listitem>
	        	<para>Indicator to provide SymmetricDS the hint
				that the channel contains big lobs. Some databases have shortcuts that
				SymmetricDS can take advantage of if it knows that the lob columns in
				<xref linkend="table_data" xrefstyle="table" />
				aren't going to contain large lobs. The definition of how large a 'big'
				lob is varies from database to database.</para>
	        </listitem>
	        </varlistentry>
	        <varlistentry>
	        <term>
	        	<command>Data Loader Type</command>
	        </term>        
	        <listitem>
	        	<para>Determines how data will be loaded into the target tables.   These are used during an initial load or a reverse initial load.</para>
	        	<table xml:id="data.loader.type" frame='all'>
    				<title>Data Loader Types</title>
  					<tgroup cols='2' align='left' colsep='1' rowsep='1'>
  					<colspec colnum="1" colwidth="2*"/>
	        		<colspec colnum="2" colwidth="8*"/>
	        		<tbody>
	        			<row>
	        				<entry>default</entry>
	        				<entry>Performs an insert first and if this fails will fall back to an update to load the data.</entry>
	        			</row>
	        			<row>
	        				<entry>ftp_localhost</entry>
	        				<entry>Sends the data in CSV format to a configured ftp location.  These locations are setup in the {SYM_HOME}/conf/ftp-extensions.xml</entry>
	        			</row>
	        			<row>
	        				<entry>mysql_bulk</entry>
	        				<entry>MySQL bulk loader.  See <xref linkend="dataloaders"/> for more info.</entry>
	        			</row>
	        			<row>
	        				<entry>mssql_bulk</entry>
	        				<entry>Microsoft SQL Server bulk loader.  See <xref linkend="dataloaders"/> for more info.</entry>
	        			</row>
	        			<row>
	        				<entry>postgres_bulk</entry>
	        				<entry>PostgreSQL bulk loader.  See <xref linkend="dataloaders"/> for more info.</entry>
	        			</row>
	        			<row>
	        				<entry>oracle_bulk</entry>
	        				<entry>Oracle bulk loader.  See <xref linkend="dataloaders"/> for more info.</entry>
	        			</row>
	        		</tbody>
	        		</tgroup>
	        	</table>
	        </listitem>
	        </varlistentry>
		</variablelist>
		<simplesect>
			<title>Provided Channels</title>
			<varlistentry>
	        <term>
	        	<command></command>
	        </term>        
	        <listitem>
			<table xml:id="channel.provided" frame='all'>
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
				<colspec colnum="1" colwidth="2*"/>
	       		<colspec colnum="2" colwidth="8*"/>
	       		<tbody>
	       			<row>
	       				<entry>Config</entry>
	       				<entry>Used for all SymmetricDS configuration.</entry>
	       			</row>
	       			<row>
	       				<entry>Default</entry>
	       				<entry>Default channel used for all data synchronization (except initial loads, see reload channel).</entry>
	       			</row>
	       			<row>
	       				<entry>Dynamic</entry>
	       				<entry></entry>
	       			</row>
	       			<row>
	       				<entry>Filesync</entry>
	       				<entry>Default channel used for all file synchronizations.</entry>
	       			</row>
	       			<row>
	       				<entry>Filesync_reload</entry>
	       				<entry>Used for initial loads relating to file synchronization.</entry>
	       			</row>
	       			<row>
	       				<entry>Heartbeat</entry>
	       				<entry>Sends heartbeat messages between nodes to ensure they are online.</entry>
	       			</row>
	       			<row>
	       				<entry>Reload</entry>
	       				<entry>Handles intial loads and revers initial loads.</entry>
	       			</row>
	       		</tbody>
	       		</tgroup>
	       	</table>
  			</listitem>
  			</varlistentry>
		</simplesect>
		<simplesect>
			<title>Channel Examples</title>
			<xi:include href="examples/channels.xml" />
			
		</simplesect>
		<simplesect>
			<title>Channel Tips and Tricks</title>
			<important>
			Transactions will NOT be preserved across channels so its important to setup channels to contain all tables that participate in a given transaction.
			</important>
		
			<tip>
	            <para>Increase performance by creating designated channels for tables that use LOB data types.  
	            For these channels be sure to check the "Table Contains Big Lobs" to increase performance.</para>
	        </tip>
		</simplesect>
		
		
	</section>