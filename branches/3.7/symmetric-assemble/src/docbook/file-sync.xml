<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to JumpMind Inc under one or more contributor
    license agreements.  See the NOTICE file distributed
    with this work for additional information regarding
    copyright ownership.  JumpMind Inc licenses this file
    to you under the GNU General Public License, version 3.0 (GPLv3)
    (the "License"); you may not use this file except in compliance
    with the License.

    You should have received a copy of the GNU General Public License,
    version 3.0 (GPLv3) along with this library; if not, see
    <http://www.gnu.org/licenses/>.

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<section version="5.0" xml:id="file-sync" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns="http://docbook.org/ns/docbook"
    xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml">
           <title>File Triggers / File Synchronization</title>

<section id="filesync-overview">
<title>Overview</title>

<para> SymmetricDS not only supports the synchronization of
database tables, but it also supports the synchronization of files and folders 
from one node to another. </para>
<para>
File synchronization features include:

<itemizedlist>
<listitem> Monitoring one or more file system directory locations for file and folder changes </listitem>
<listitem> Support synchronizing a different target directory than the source directory</listitem>
<listitem> Use of wild card expressions to “include” or
“exclude” files </listitem>
<listitem> Choice of whether to recurse into subfolders
of monitored directories </listitem>
<listitem> Use of existing SymmetricDS routers to subset
target nodes based on file and directory metadata </listitem>
<listitem> Ability to specify if files will be synchronized on
creation, or deletion, and/or modification </listitem>
<listitem> Ability to specify the frequency with which file systems are
monitored for changes </listitem>
<listitem> Ability to extend file synchronization through
scripts that run before or after a file is copied to its source location
</listitem>
<listitem> Support for bidirectional file synchronization </listitem>
</itemizedlist>
</para>
<para> Like database synchronization, file synchronization is
configured in a series of database tables. The configuration was
designed to be similar to database synchronization in order to maintain
consistency and to give database synchronization users a sense of
familiarity. </para>
<para>For database synchronization, SymmetricDS uses
<xref linkend="table_trigger" xrefstyle="table" /> to configure which tables will capture data for synchronization
and <xref linkend="table_router" xrefstyle="table" /> to designate which nodes will be the source of data changes
and which nodes will receive the data changes.
<xref linkend="table_trigger_router" xrefstyle="table" /> links triggers to routers. </para>
<para> Likewise, for file synchronization, SymmetricDS uses <xref linkend="table_file_trigger" xrefstyle="table" /> to designate which base directories will be monitored.
Each entry in <xref linkend="table_file_trigger" xrefstyle="table" /> designates one base directory to monitor for changes on
the source system. The columns on <xref linkend="table_file_trigger" xrefstyle="table" /> provide additional
settings for choosing specific files in the base directory that will be monitored, and whether to recurse into subdirectories, etc.  File triggers are linked to routers by
<xref linkend="table_file_trigger_router" xrefstyle="table" />. The file trigger router not only links the source
and the target node groups, but it also optionally provides the ability to
override the base directory name at the target. <xref linkend="table_file_trigger_router" xrefstyle="table" /> also
provides a flag that indicates if the target node should be seeded with
the files from the source node during SymmetricDS's initial load
process. </para>
</section>
<section id="filesync-operation">
<title>Operation</title>
<para> Not only is file synchronization configured similar to database synchronization, but it also operates in a very similar way. The file system is monitored for changes via a
background job that tracks the file system changes
(this parallels the use of triggers to monitor for changes when synchronizing database changes).
When a change is detected it is written to the <xref linkend="table_file_snapshot" xrefstyle="table" />
table. The file snapshot table represents the most recent known state of the
monitored files. The file snapshot table has a SymmetricDS database trigger automatically installed
on it so that when it is updated the changes are captured by SymmetricDS on an internal
channel named <literal>filesync</literal>. </para>
<para> The changes to <xref linkend="table_file_snapshot" xrefstyle="table" /> are then routed and batched by a file-synchronization-specific router
that delegates to the configured router
based on the <xref linkend="table_file_trigger_router" xrefstyle="table" /> configuration. The
 file sync router can
make routing decisions based on the column data of the snapshot table, columns which contain attributes of the file like the name, path,
size, and last modified time. Both old and new file snapshot data are also
available. The router can, for example, parse the path or name of the
file and use it as the node id to route to. </para>
<para> Batches of file snapshot changes are stored on the
<literal>filesync</literal> channel in <xref linkend="table_outgoing_batch" xrefstyle="table" />. The existing SymmetricDS pull and
push jobs ignore the <literal>filesync</literal> channel. Instead, they are processed by
file-synchronization-specific push and pull jobs. </para>
<para> When transferring data, the file sync push and pull jobs build a zip
file dynamically based on the batched snapshot data. The
zip file contains a directory per batch. The directory name is the
<literal>batch_id</literal>. A <literal>sync.bsh</literal> Bean Shell
script is generated and placed in the root of each batch directory. The Bean Shell script contains the commands to copy
or delete files at their file destination from an extracted zip in the staging directory on the
target node. The zip file is downloaded in the
case of a pull, or, in the case of a push, is uploaded as an HTTP multi-part attachment.
Outgoing zip files are written and transferred from the
outgoing staging directory. Incoming zip files are staged in the
<literal>filesync_incoming</literal> staging directory by source node id. The
<literal>filesync_incoming/{node_id}</literal> staging directory is cleared out before each
subsequent delivery of files. </para>
<para> The acknowledgement of a batch happens the same way it is acknowledged in database synchronization. The client responds with an acknowledgement as part of the response
during a file push or pull. </para>
</section>

<section id="filesync-beanshell">
<title>File Sync Bean Shell Scripts</title>
<para> There are two types of Bean Shell scripts that can be
leveraged to customize file synchronization behavior: <literal>before_copy_script</literal>
and <literal>after_copy_script</literal>. </para>
<para>
Each of these scripts have access to local variables that can be read or
set to affect the behavior of copying files.

<variablelist>
<varlistentry>
<term>
<command>targetBaseDir</command>
</term>
<listitem>
<para> The preset base directory as configured in <xref linkend="table_file_trigger" xrefstyle="table" /> or
overwritten in <xref linkend="table_file_trigger_router" xrefstyle="table" />. This variable can be set by the
<literal>before_copy_script</literal> to set a different target directory. </para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<command>targetFileName</command>
</term>
<listitem>
<para> The name of the file that is being synchronized. This variable can be overwritten by the
<literal>before_copy_script</literal> to rename a file at the target. </para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<command>targetRelativeDir</command>
</term>
<listitem>
<para> The name of a directory relative to the target base directory to which the target file will be copied.  The 
default value of this variable is the relative directory of the source.  For example, if the source base directory is 
<literal>/src</literal> and the target base directory is <literal>/tgt</literal> and the file <literal>/src/subfolder/1.txt</literal>
is changed, then the default targetRelativeDir will be <literal>subfolder</literal>.
This variable can be overwritten by the
<literal>before_copy_script</literal> to change the relative directory at the target. In the above example, if the variable is
set to blank using the following script, then the target file will be copied to <literal>/tgt/1.txt</literal>.
<programlisting>
targetRelativeDir = "";
</programlisting>
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<command>processFile</command>
</term>
<listitem>
<para>This is a variable that is set to true by default. A custom
<literal>before_copy_script</literal> may process the file itself and set this variable to
false to indicate that the file should NOT be copied to its target
location. </para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<command>sourceFileName</command>
</term>
<listitem>
<para>This is the name of the file.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<command>sourceFilePath</command>
</term>
<listitem>
<para>This is the path where the file can be found relative to
the batch directory.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<command>batchDir</command>
</term>
<listitem>
<para>This is the staging directory where the batch has been
extracted. The batchDir + sourceFilePath + sourceFileName can be used to
locate the extracted file. </para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<command>engine</command>
</term>
<listitem>
<para>This is the bound instance of the ISymmetricEngine that is
processing a file. It gives access to all of the APIs available in
SymmetricDS. </para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<command>sourceNodeId </command>
</term>
<listitem>
<para>This is a bound variable that represents the nodeId that is
the source of the file.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>
<command>log</command>
</term>
<listitem>
<para>This is the bound instance of an <literal>org.slf4j.Logger</literal> that can
be used to log to the SymmetricDS log file.</para>
</listitem>
</varlistentry>
</variablelist>

</para>
</section>
<section id="filesync-examples">
<title>File Sync Examples</title>

<section id="filesync-example-1">
<title>Sync Text Files From Server To Client</title>
<para>
The following example is for a configuration with client and server node
groups. Creation, modification, and deletion of files with the extension
of <literal>txt</literal> will be captured recursively
in the <literal>/filesync/server/all</literal>
directory. A before copy script will set the targetBaseDir to
<literal>/filesync/clients/{externalId}</literal>.

<programlisting>INSERT INTO sym_file_trigger
  (trigger_id,base_dir,recurse,includes_files,excludes_files,sync_on_create,
   sync_on_modified,sync_on_delete,sync_on_ctl_file,delete_after_sync,before_copy_script,after_copy_script,
   create_time,last_update_by,last_update_time)
VALUES ('sync_directory','/filesync/server/all',1,'*.txt',null,1,1,1,0,0,
  'targetBaseDir = "/filesync/clients/" +
  engine.getParameterService().getExternalId();',null,current_timestamp,'example',
  current_timestamp);

INSERT INTO sym_file_trigger_router
 (trigger_id,router_id,enabled,initial_load_enabled,target_base_dir,
  conflict_strategy,create_time,last_update_by,last_update_time)
VALUES
  ('sync_directory','server_2_client',1,1,'','SOURCE_WINS',current_timestamp,
  'example',current_timestamp);

INSERT INTO sym_router
  (router_id,target_catalog_name,target_schema_name,target_table_name,
  source_node_group_id,target_node_group_id,
  router_type,router_expression,sync_on_update,sync_on_insert,sync_on_delete,
  create_time,last_update_by,last_update_time)
VALUES
  ('server_2_client',null,null,null,'server','client','default',null,1,1,1,
   current_timestamp,'example',current_timestamp);
</programlisting>
</para>
</section>

<section id="filesync-example-2">
<title>Route changes to a specific node based on a directory
name</title>
<para>
The following example is also for a configuration with client and server
node groups. This example monitors the <literal>/filesync/server/nodes</literal> directory.
It expects the directory to contain subdirectories that are named by the node_ids
in the client group. Any files put directly into a folder with the name
of the node will be routed to that node.
</para>
<para>
Note that the router is a <xref linkend="configuration-column-match-router"/> that is matching the client node_id with the value of the RELATIVE_DIR column in
<xref linkend="table_file_snapshot" xrefstyle="table" />.  Because the router is looking for an exact match any files in subdirectories would result in a path
of node_id/subdir which would not match.
<programlisting>
<![CDATA[
INSERT INTO sym_file_trigger
  (trigger_id,base_dir,recurse,includes_files,excludes_files,sync_on_create,
  sync_on_modified,sync_on_delete,sync_on_ctl_file,delete_after_sync,before_copy_script,after_copy_script,create_time,
  last_update_by,last_update_time)
VALUES
  ('node_specific','/filesync/server/nodes',1,null,null,1,1,1,0,0,'',null,
  current_timestamp,'example',current_timestamp);

INSERT INTO sym_file_trigger_router
  (trigger_id,router_id,enabled,initial_load_enabled,target_base_dir,
  conflict_strategy,create_time,last_update_by,last_update_time)
VALUES
  ('node_specific','router_files_to_node',1,1,'/filesync/clients','SOURCE_WINS',
  current_timestamp,'example',current_timestamp);

INSERT INTO sym_router
  (router_id,target_catalog_name,target_schema_name,target_table_name,
   source_node_group_id,target_node_group_id,router_type,router_expression,
   sync_on_update,sync_on_insert,sync_on_delete,create_time,last_update_by,
   last_update_time)
VALUES
  ('router_files_to_node',null,null,null,'server','client','column',
  'RELATIVE_DIR = :NODE_ID ',1,1,1,current_timestamp,'example', current_timestamp);
]]>
</programlisting>
</para>
</section>
</section>



</section>