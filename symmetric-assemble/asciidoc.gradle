apply plugin: 'org.asciidoctor.jvm.convert'

configurations{ generateAppendixesDependencies }

dependencies {
    generateAppendixesDependencies project(":symmetric-util")
    generateAppendixesDependencies project(":symmetric-db")
}

task generateAppendixes {
    dependsOn project(":symmetric-db").jar
    doLast{
        javaexec {
            main = 'org.jumpmind.properties.DefaultParameterParser'
            classpath = configurations.generateAppendixesDependencies
            args = [
                symAssembleDir + '/../symmetric-server/src/main/deploy/conf/symmetric-server.properties',
                symAssembleDir + '/src/asciidoc/generated/server-parameters.ad',
                'false',
                'asciidoc'
            ]
        }

        if (project.properties.containsKey('pro')) {
        	javaexec {
        		main = 'org.jumpmind.properties.DefaultParameterParser'
        		classpath = configurations.generateAppendixesDependencies
        		args = [
					symAssembleDir + '/../symmetric-core/src/main/resources/symmetric-default.properties,' + symAssembleDir + '/../../symmetric-pro/symmetric-pro/src/main/resources/symmetric-console-default.properties',
					symAssembleDir + '/src/asciidoc/generated/startup-parameters.ad',
					'false',
					'asciidoc'        		
        		]
        	}
        	
        	javaexec {
        		main = 'org.jumpmind.properties.DefaultParameterParser'
        		classpath = configurations.generateAppendixesDependencies
        		args = [
					symAssembleDir + '/../symmetric-core/src/main/resources/symmetric-default.properties,' + symAssembleDir + '/../../symmetric-pro/symmetric-pro/src/main/resources/symmetric-console-default.properties',
					symAssembleDir + '/src/asciidoc/generated/runtime-parameters.ad',
					'true',
					'asciidoc'        		
        		]
        	}
        } else {
        	javaexec {
            	main = 'org.jumpmind.properties.DefaultParameterParser'
            	classpath = configurations.generateAppendixesDependencies
            	args = [
                	symAssembleDir + '/../symmetric-core/src/main/resources/symmetric-default.properties',
               		symAssembleDir + '/src/asciidoc/generated/startup-parameters.ad',
                	'false',
                	'asciidoc'
            	]
        	}

        	javaexec {
            	main = 'org.jumpmind.properties.DefaultParameterParser'
            	classpath = configurations.generateAppendixesDependencies
            	args = [
             	   symAssembleDir + '/../symmetric-core/src/main/resources/symmetric-default.properties',
             	   symAssembleDir + '/src/asciidoc/generated/runtime-parameters.ad',
             	   'true',
            	   'asciidoc'
           	 	]
       		 }
        }

        javaexec {
            main = 'org.jumpmind.db.io.DatabaseXmlAsciiDocBuilder'
            classpath = configurations.generateAppendixesDependencies
            args = [
                symAssembleDir + '/../symmetric-core/src/main/resources/symmetric-schema.xml',
                symAssembleDir + '/src/asciidoc/generated/schema.ad'
            ]
        }
    }
}

ext.getDocDir = {
    if (project.properties.containsKey('pro')) {
        return file("$buildDir/../../../symmetric-pro/symmetric-pro/src/main/resources/VAADIN/doc")
    } else {
        return file("$buildDir/doc")
    }
}

task cleanDocs {
    dependsOn asciidoctor
    def destinationDir = getDocDir()
    doFirst {
        println "Deleting $destinationDir.path"
        delete destinationDir
    }
}

task generateDocs(type: Copy) {
    
    dependsOn cleanDocs
	group = 'SymmetricDS'
	description = 'Generates user manual and documentation'
    
    destinationDir = getDocDir()

    into('html') {
        from ("$buildDir/src/asciidoc/html5") { include "user-guide.html" }
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
            'appVersion': version,
            'appMajorVersion': version.substring(0, version.lastIndexOf(".")),
            'buildTime': new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss').format(new java.util.Date()),
            'scmVersion' : scmVersion
        ])
    }
    
    into('html') {
        from ("$buildDir/src/asciidoc/html5/tutorials") { include "tutorials.html" }
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
            'appVersion': version,
            'appMajorVersion': version.substring(0, version.lastIndexOf(".")),
            'buildTime': new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss').format(new java.util.Date()),
            'scmVersion' : scmVersion
        ])
    }
        
    into('html') {
        from ("$buildDir/src/asciidoc/html5/operations") { include "operations.html" }
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
            'appVersion': version,
            'appMajorVersion': version.substring(0, version.lastIndexOf(".")),
            'buildTime': new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss').format(new java.util.Date()),
            'scmVersion' : scmVersion
        ])
        
    }

    into('pdf') {
        from ("$buildDir/src/asciidoc/pdf") { include "user-guide.pdf" }
    }

    into('pdf') {
        from ("$buildDir/src/asciidoc/pdf/tutorials") { include "tutorials.pdf" }
    }

    into('pdf') {
        from ("$buildDir/src/asciidoc/pdf/operations") { include "operations.pdf" }
    }    

}


task publishDoc {
    dependsOn generateDocs
	group = 'SymmetricDS'
	description = 'Publish online documentation to SymmetricDS website'
    doLast {
        ant.taskdef(name: 'scp', classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
        classpath: configurations.sshAntTask.asPath)

        ant.scp(
            todir: "$publishUser:$publishPassword@$publishServer:~/www/doc/$majorMinorVersion",
            port: "$publishPort",
            trust: 'true',
            verbose: 'true') {
            fileset(dir: "$buildDir/doc") { include(name: '**/**')
            }
        }
    }
}

asciidoctor { (1)
    baseDirFollowsSourceDir()
    sourceDir = file(symAssembleDir + '/src/asciidoc')
    outputDir = file("$buildDir/src/asciidoc")
    options = [
        doctype: 'book',
        sourceDocumentNames: [
            symAssembleDir + 'user-guide.ad',
            symAssembleDir + 'tutorials/tutorials.ad',
            symAssembleDir + 'operations/operations.ad']
    ]    
    attributes = [
        'source-highlighter':'coderay',
        'data-uri':'true'
    ]
    if (project.properties.containsKey('pro')) {
       attributes['pro'] = 'true'  
    }     
}

asciidoctor.dependsOn { tasks.generateAppendixes }
