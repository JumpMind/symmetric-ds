import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens

configurations {
    sshAntTask
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.ow2.asm' && !details.requested.name.contains('debug-all')) {
            details.useVersion '9.5'
        }
        if (details.requested.group == 'io.swagger.core.v3') {
            details.useVersion '2.2.15'
        }
    }
}

dependencies {
    sshAntTask 'org.apache.ant:ant-jsch:1.10.14', 'com.github.mwiede.jsch:0.2.17'
}

allprojects {

    apply plugin: 'eclipse'
    apply plugin: 'idea'

    group = 'org.jumpmind.symmetric'
         
    repositories {
        maven {
            url "https://maven.jumpmind.com/repo"
            metadataSources {
                mavenPom()
                artifact()
            }
        }

        mavenCentral()
        maven { url "https://maven.vaadin.com/vaadin-addons" }
        maven { url 'https://plugins.gradle.org/m2' }
        maven { url "https://packages.confluent.io/maven/" }
        maven { url "https://repository.mulesoft.org/nexus/content/repositories/public/" }
        maven { url "https://repo1.maven.org/maven2/" }
    }
        
    ext {
        majorMinorVersion = version.substring(0, version.indexOf(".", version.indexOf(".")+ 1))
    }
    
    sonar {
		properties {
			property "sonar.organization", "jumpmind"
		    property "sonar.host.url", "https://sonarcloud.io"
		    property "sonar.projectKey", "JumpMind_SymmetricDS_Pro"
	        property 'sonar.coverage.jacoco.xmlReportPaths', "${rootDir}/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
	     	property "sonar.coverage.exclusions", "**/*.ad, **/*.js, **/*.c"
	    	property "sonar.scm.disabled", "true"    
		}
	}
    
}

def ignoreDerivedResources(projectDescription, directories = ["build", "test-output"]) {
  def count = directories.count { file(it).exists() }
  if (count > 0) {
    def filter = projectDescription
      .appendNode("filteredResources")
      .appendNode("filter")
    filter.appendNode("id", System.currentTimeMillis().toString().trim())
    filter.appendNode("type", "26")
    filter.appendNode("name")
    def matcher = filter.appendNode("matcher")
    matcher.appendNode("id", "org.eclipse.ui.ide.orFilterMatcher")
    def arguments = matcher.appendNode("arguments")
    directories.each {
      if (file(it).exists()) {
        def dirMatcher = arguments.appendNode("matcher")
        dirMatcher.appendNode("id", "org.eclipse.ui.ide.multiFilter")
        dirMatcher.appendNode("arguments", "1.0-projectRelativePath-matches-false-false-${it}")
      }
    }
  }
}  

subprojects { subproject ->

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'
    apply plugin: 'signing'    

    jacoco {
		toolVersion = "0.8.12"
	}
    
    jacocoTestReport {
		executionData(file("${project.buildDir}/jacoco/*.exec"))
    	reports {
    		xml.enabled true
	        html.enabled true
	        xml.destination file("${buildDir}/reports/jacoco.xml")
	        html.destination file("${buildDir}/reports/jacoco.html")

    	}    	
	}

    configurations { deployerJars }
    configurations {
    	testArtifacts.extendsFrom testImplementation
    }

    configurations {
    	provided {
    		canBeResolved = true
        	canBeConsumed = true
        	visible = false
        	transitive = true
        	allDependencies.all {
				dep -> configurations.default.exclude(group: dep.group, module: dep.name)
			}
        }
        api.extendsFrom(provided)
		// Ensure only the compile configuration is exported
		project.idea.module {
			// IDEA internally deals with 4 scopes : COMPILE, TEST, PROVIDED, RUNTIME
			// but only PROVIDED seems to be picked up
			scopes.PROVIDED.plus += [project.configurations.provided]
		}
    }

    sourceCompatibility=JavaVersion.VERSION_17
    targetCompatibility=JavaVersion.VERSION_17
    
    compileJava {
    	options.compilerArgs += '-Xlint:deprecation'
    }
    
    compileTestJava {
    	options.compilerArgs += '-Xlint:deprecation'
    }
	
    
    eclipse {   
        classpath {
            downloadSources = true
            downloadJavadoc = false
	        
	        file {
	        	whenMerged { classpath ->
			        def list = classpath.getEntries()
			        list.removeAll { it.kind=='lib' && it.path.contains('javax.validation') && it.path.contains('validation-api') }
			        classpath.setEntries(list)
			    }
	        }
	        containsTestFixtures = true
        }
        
        jdt {
            sourceCompatibility = JavaVersion.VERSION_17
            targetCompatibility = JavaVersion.VERSION_17
        }
        
        project.file.whenMerged { project ->
            project.natures.remove('org.springsource.ide.eclipse.gradle.core.nature')
            project.natures.remove('org.eclipse.buildship.core.gradleprojectnature')            
        }
    }

    idea {
        module {
            testResourceDirs = []
            testSourceDirs = [ file('src/test/java'), file('src/test/groovy')]
            resourceDirs += file('src/test/resources')
            downloadJavadoc = true
            downloadSources = true
        }
    }   
    
    javadoc {
        failOnError = false
    }
    
    afterEvaluate {
        if(plugins.hasPlugin(JavaPlugin)) {
            
            // configuration here
            rootProject.tasks.generateJavadoc {
                source += files(sourceSets.collect { srcSet -> srcSet.allJava })
                classpath += files(sourceSets*.compileClasspath)
            }
    
        }
    }    
    
    publish.enabled = !project.properties.containsKey('pro')
    
    
    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    
    artifacts { archives sourcesJar }    
    
    if (!project.name.contains("log-miner")) {
        publishing {
	    	publications {
	        	symmetricLibrary(MavenPublication) {
	            	from components.java
	        	}
	    	}
	    	repositories {
	        	maven {
	        		name = "jumpmindMaven"
		    		credentials {
		                username deployUser
		                password deployPassword
		            }
	            	url = deployUploadUrl
	        	}
	    	}
		}
		
		signing {
			sign publishing.publications.symmetricLibrary
		}
    }

    task deploy {
        description 'Shortcut for Maven users'
        dependsOn tasks.publish
    }

    task testJar(type: Jar) {
        classifier "test"
        from sourceSets.test.output
    }
    
    test {
        ignoreFailures true
        minHeapSize = "128m"
        maxHeapSize = "512m"
        useJUnitPlatform {
            excludeTags("integration")
        }
        finalizedBy jacocoTestReport
    }

    def integrationTest = tasks.register("integrationTest", Test) {
        ignoreFailures true
        minHeapSize = "128m"
        maxHeapSize = "512m"
        forkEvery=1
        if (System.getProperty("test.root") != null) systemProperty "test.root", System.getProperty("test.root")
        if (System.getProperty("test.server") != null) systemProperty "test.server", System.getProperty("test.server")
        if (System.getProperty("test.client") != null) systemProperty "test.client", System.getProperty("test.client")
        if (System.getProperty("port.number") != null) systemProperty "port.number", System.getProperty("port.number")
        useJUnitPlatform {
            includeTags("integration")
        }
        finalizedBy jacocoTestReport
    }
        
    jar {
        manifest {
            attributes("Implementation-Title": project.name,
                       "Implementation-Version": archiveVersion,
                       "Project-Artifact": project.name,                       
                       "Build-Version": archiveVersion,
                       "Build-Time": new SimpleDateFormat("yyyyMMdd-HHmm").format(new Date()),
                       "Build-Scm-Version": scmVersion)
        }    
    }
    


    artifacts { testArtifacts testJar }

    ext {
        bshVersion = '2.0b6'
        commonsBeanUtilsVersion = '1.9.4'
        commonsCliVersion = '1.6.0'
        commonsDbcpVersion = '2.12.0'
        commonsFileuploadVersion = '2.0.0-M1'
        commonsIoVersion = '2.16.1'
        commonsLangVersion = '3.14.0'
        commonsTextVersion = '1.12.0'
        commonsCodecVersion = '1.16.1'
        commonsCollectionVersion = '4.5.0-M1'
        commonsVfs = '2.9.0'
        hamcrestVersion = '1.3'
        h2Version = '2.2.224'
        derbyVersion = '10.16.1.1'
        postgresqlVersion =  '42.7.3'
        hsqldbVersion = '2.7.0'
        sqliteVersion = '3.45.3.0'
        mssqlVersion = '12.6.1.jre8'
        jakartaMailVersion = '2.0.3'
        jdomVersion = '2.0.6.1'
        jaxbVersion = '4.0.5'
        gsonVersion = '2.10.1'
        jacksonVersion = '2.17.1'
        guavaVersion = '33.2.0-android'
        junitVersion = '5.10.2'
        spotBugsVersion = '4.8.5'
        log4jVersion = '2.23.1'
        slf4jVersion = '2.0.13'
        mockitoVersion = '5.11.0'
        powerMockVersion = '2.0.9'
        mysqlVersion = '8.4.0'
        servletVersion = '4.0.1'
        springVersion = '6.1.6'
        springBootVersion = '3.2.5'
        jtdsVersion = '1.3.1'
        bouncyCastleVersion = '1.78.1'
        animalSnifferVersion = '1.23'
        jnaVersion = '5.14.0'
        jettyVersion = '12.0.8'
        websocketVersion = '2.1.1'
        env = System.getenv()
    }

    dependencies {
        api "org.apache.logging.log4j:log4j-core:$log4jVersion"
        api "org.apache.logging.log4j:log4j-api:$log4jVersion"
        annotationProcessor "org.apache.logging.log4j:log4j-core:$log4jVersion"
        api "org.apache.logging.log4j:log4j-slf4j2-impl:$log4jVersion"
        api "org.apache.logging.log4j:log4j-web:$log4jVersion"
        api "org.slf4j:slf4j-api:$slf4jVersion"
        api "org.slf4j:jul-to-slf4j:$slf4jVersion"
        api "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        compileOnly "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"

        testImplementation fileTree(dir: System.getProperty("user.home") + '/.symmetricds/lib', include: '*.jar')
        testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
        
        testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion"
        testImplementation "org.mockito:mockito-core:$mockitoVersion"
        testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
        testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
        
        deployerJars "org.apache.maven.wagon:wagon-ssh:3.5.3"
    }    

    task develop {
        dependsOn tasks.cleanEclipse, tasks.eclipse, tasks.cleanIdea, tasks.idea, tasks.compileTestJava
        
        doLast {
            def wstFacetXml = "$projectDir/.settings/org.eclipse.wst.common.project.facet.core.xml"
            println "Deleting $wstFacetXml"
            delete wstFacetXml 
        }
    }
}
