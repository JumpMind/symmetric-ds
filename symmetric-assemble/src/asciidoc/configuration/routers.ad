
=== Routers
Routers ride on top of group links.  While a group link specifies that data should be moved from nodes in a source node group to 
nodes in a target node group, routers define more specifically which captured data from a source node should be sent to which
specific nodes in a target node group, all within the context of the node group link.  

ifdef::pro[]
image::images/router.png[]

.Required Fields
endif::pro[]

Router Id:: Unique description of a specific router
Group Link:: The group link used for the source and target node groups of this router
Router Type:: The type of router.  Standard router types are listed below.  Custom routers can be configured as extension points. If a router does not support non-DML data events, then it will send all non-DML data events to the default router instead.

.Router Types
[cols="<2,<9,^", options="header"]
|===
|Type
|Description
|Supports Non-DML

|default|A router that sends all captured data to all nodes that belong to the target node group defined in the router. See <<Default Router>>|✔

|column|A router that compares old or new column values in a captured data row to a constant value or the value of a target node's external id or node id.  See <<Column Match Router>>|

|audit|A router that inserts into an automatically created audit table. It records captured changes to tables that it is linked to.  See <<Audit Table Router>>|

|java|A router that executes a Java expression in order to select nodes to route to. The script can use the old and new column values.  See <<Java Router>>|✔

|lookuptable|A router which can be configured to determine routing based on an existing or ancillary table specifically for the purpose of routing data.  See <<Lookup Table Router>>|

|subselect|A router that executes a SQL expression against the database to select nodes to route to. This SQL expression can be passed values of old and new column values.  See <<Subselect Router>>|

|convertToReload|When subselect router is too slow and there are too many tables or rows for lookuptable router, a convertToReload router can efficiently sub-set data by converting multiple changes into a reload batch.  See <<ConvertToReload Router>>|

|bsh|A router that executes a Bean Shell script expression in order to select nodes to route to. The script can use the old and new column values.  See <<Beanshell Router>>|✔

|csv|A router that sends data from a CSV file to a target table of the target node group defined in the router. See <<CSV Router>>|

|dbf|A router that sends data from a dBase generated DBF file to a target table of the target node group defined in the router. See <<DBF Router>>|

|===

Router Expression:: An expression that is specific to the type of router that is configured in router type.  See the documentation for each router for more details.
[[use-source-catalog-schema]]Use Source Catalog/Schema:: If set then the source catalog and source schema are sent to the target to be used to find the target table.
[[router-target-catalog]]Target Catalog:: Optional name of catalog where a target table is located. 
If this field is unspecified, the catalog will be either the default catalog at the target node or the "source catalog name" from the table trigger, 
depending on how "use source catalog schema" is set for the router.  Variables are substituted for `$(sourceNodeId)`, `$(sourceExternalId)`, `$(sourceNodeGroupId)`, 
`$(targetNodeId)`, `$(targetExternalId)`, `$(targetNodeGroupId)`, `$(sourceCatalogName)`, and `$(sourceSchemaName)`.
Parameter values can be substituted using `$(name)` syntax.  See <<Variables>>.
[[router-target-schema]]Target Schema:: Optional name of schema where a target table is located. 
If this field is unspecified, the schema will be either the default schema at the target node or the "source schema name" from the table trigger,
depending on how "use source catalog schema" is set for the router.  Variables are substituted for `$(sourceNodeId)`, `$(sourceExternalId)`, `$(sourceNodeGroupId)`, 
`$(targetNodeId)`, `$(targetExternalId)`, `$(targetNodeGroupId)`, `$(sourceCatalogName)`, and `$(sourceSchemaName)`.
Parameter values can be substituted using `$(name)` syntax.  See <<Variables>>.

ifdef::pro[]
.Advanced Options
endif::pro[]

Sync on Update:: Flag that indicates that this router should send updated rows from nodes in the source node group to nodes in the target node group.
Sync on Insert:: Flag that indicates that this router should send inserted rows from nodes in the source node group to nodes in the target node group.
Sync on Delete:: Flag that indicates that this router should send deleted rows from nodes in the source node group to nodes in the target node group.
Target Table:: Optional name for a target table.  Only use this if the target table name is different than the source.

ifdef::pro[]
.Sample Routers
====
image::images/routers/routers-examples.png[]

* image:images/routers/link_break.png[] A router that is not linked to any triggers.
* image:images/routers/table.png[] A router that is linked to a single trigger.
* image:images/routers/table_multiple.png[] A router that is linked to multiple triggers.
====
endif::pro[]

include::{includedir}/configuration/routers/types.ad[]
