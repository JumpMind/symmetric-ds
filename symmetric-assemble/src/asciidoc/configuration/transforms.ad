
=== Transforms

Transforms allow you to manipulate data on a source node or target node, as the data is being loaded or extracted.

IMPORTANT: The source table must first be configured for synchronization (see <<Table Triggers>>) before it can be transformed.

The source trigger captures data changes that are passed through transformations during extraction from the source
and during loading at the target.  If any enhancement with additional data is needed, an extract transform can access the 
source database, while a load transform can access the target database.  A single row change may be processed by multiple 
transforms on the same group link, which transforms it into multiple target rows.  Rows for the same target table do not merge,
which means multiple transforms with the same target table results in multiple rows for that target table.

ifndef::pro[]
SymmetricDS stores its transformation configuration in two configuration tables, TRANSFORM_TABLE and TRANSFORM_COLUMN. 
Defining a transformation involves configuration in both tables, with the first table defining which source and destination 
tables are involved, and the second defining the columns involved in the transformation and the behavior of the data for 
those columns. We will explain the various options available in both tables and the various pre-defined transformation types.

To define a transformation, you will first define the source table and target table that applies to a particular transformation. 
The source and target tables, along with a unique identifier (the transform_id column) are defined in TRANSFORM_TABLE . In addition, 
you will specify the source_node_group_id and target_node_group_id to which the transform will apply, along with whether the transform 
should occur on the Extract step or the Load step (transform_point).
endif::pro[]

ifdef::pro[]
image::images/transforms/transform.png[]

.Required Fields
endif::pro[]
Transform Id:: Unique identifier of a specific transform.
Group Link:: The group link defining which direction the transform will process.
Transform Point:: Where this transform will occur. The options include:

.Transform Points
|===

|EXTRACT|The transform will execute while data is being extracted from the source.  This means the transform will have access to the source's database.
|LOAD|The transform will execute while data is being loaded into the target.  This means the transform will have access to the target's database.

|===

Column Policy:: Indicates whether unspecified columns are passed thru or if all columns must be explicitly defined. The options include:
.Column Policy
|===

|SPECIFIED|Indicates that only the transform columns that are defined will be the ones that end up as part of the transformation.

|IMPLIED|Indicates that if not specified, then columns from the source are passed through to the target. This is useful if you just 
want to map a table from one name to anther or from one schema to another. It is also useful if you want to transform a table, but 
also want to pass it through. You would define an implied transform from the source to the target and would not have to configure each column.
|===

Source Catalog:: Name of the catalog of the configured source table.  This should only be set if <<use-source-catalog-schema,Use Source Catalog/Schema>> or <<router-target-catalog,Target Catalog>> are set on the Router.  Parameter values can be substituted using `$(name)` syntax.
Source Schema:: Name of the schema for the configured source table.  This should only be set if <<use-source-catalog-schema,Use Source Catalog/Schema>> or <<router-target-schema,Target Schema>> are set on the Router.  Parameter values can be substituted using `$(name)` syntax.
Source Table:: The name of the source table that will be transformed.  Parameter values can be substituted using `$(name)` syntax.
Target Catalog:: Optional name for the catalog a target target table is in. Only use this if the target table is not in the default catalog.  Parameter values can be substituted using `$(name)` syntax.
Target Schema:: Optional name of the schema a target target table is in. Only use this if the target table is not in the default schema.  Parameter values can be substituted using `$(name)` syntax.
Target Table:: The name of the target table.  Parameter values can be substituted using `$(name)` syntax.

ifdef::pro[]
.Advanced Options
endif::pro[]

Update First:: This option overrides the default behavior for an Insert operation. Instead of attempting the Insert first, 
SymmetricDS will always perform an Update first and then fall back to an Insert if that fails. Note that, by default, fall 
back logic always applies for Insert and Updates. Here, all you a specifying is whether to always do an Update first, which 
can have performance benefits under certain situations you may run into.

Delete Action:: An action to take upon delete of a row. 

.Transform Points
|===

|DEL_ROW|The delete results in a delete of the row as specified by the pk columns defined in the transformation configuration.

|UPDATE_COL|The delete results in an update operation on the target which updates the specific rows and columns based 
on the defined transformation.

|NONE|The delete results in no target changes.
|===

Update Action:: An action to take upon update of a row. 

|===

|UPD_ROW|The update performs normally.

|INS_ROW|The update is transformed into an insert instead.

|DEL_ROW|The update is transformed into a delete instead.

|NONE|The update is ignored and no changes are made.
|===

Transform Order:: For a single source operation that is mapped to a transformation, there could be more than one 
target operation that takes place. You may control the order in which the target operations are applied through a 
configuration parameter defined for each source-target table combination. This might be important, for example, 
if the foreign key relationships on the target tables require you to execute the transformations in a particular order.

ifndef::pro[]
.Transform Example
====
[source, SQL]
----
insert into SYM_TRANSFORM_TABLE (
	transform_id, source_node_group_id, target_node_group_id, transform_point, source_table_name,
	target_table_name, update_action, delete_action, transform_order, column_policy, update_first,
	last_update_by, last_update_time, create_time
) values (
	'itemSellingPriceTransform', 'store', 'corp', 'EXTRACT', 'ITEM_SELLING_PRICE',
	'ITEM_SELLING_PRICE', 'UPDATE_COL', 'DEL_ROW', 1, 'IMPLIED', 1,
	'Documentation', current_timestamp, current_timestamp
);
----
====
endif::pro[]

include::{includedir}/configuration/transforms/columns.ad[]
include::{includedir}/configuration/transforms/data-format.ad[]
include::{includedir}/configuration/transforms/types.ad[]
include::{includedir}/configuration/transforms/virtual-columns.ad[]

