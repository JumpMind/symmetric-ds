
== Advanced Topics

This chapter focuses on a variety of topics, including deployment options, jobs, clustering, encryptions, synchronization control,
and configuration of SymmetricDS.
    
=== Advanced Synchronization

==== Disabling Synchronization

All data loading may be disabled by setting the `dataloader.enable` property to false. This has the effect of not allowing incoming
synchronizations, while allowing outgoing synchronizations. All data extractions may be disabled by setting the `dataextractor.enable`
property to false. These properties can be controlled by inserting into the master node's <<PARAMETER>>
table. These properties affect every channel with the exception of the
'config' channel.

==== Bi-Directional Synchronization
       
SymmetricDS allows tables to be synchronized bi-directionally.  Note that an outgoing
synchronization does not process changes during an incoming synchronization on the same node unless the trigger
was created with the `sync_on_incoming_batch` flag set.  If the `sync_on_incoming_batch` flag
is set, then update loops are prevented by a feature that is available in most database dialects.
More specifically, during an incoming synchronization the source `node_id` is put into a database session variable that is
available to the database trigger.  Data events are not generated if the target `node_id`
on an outgoing synchronization is equal to the source `node_id`.
     
By default, only the columns that changed will be updated in the target system.

Conflict resolution strategies can be configured for specific links and/or sets of tables.

==== Multi-Tiered Synchronization
       
There may be scenarios where data needs to flow through multiple tiers of nodes that
are organized in a tree-like network with each tier requiring a different subset of data.  For example,
you may have a system where the lowest tier may be a computer or device located in a store.  Those devices
may connect to a server located physically at that store.  Then the store server may communicate with
a corporate server for example.  In this case, the three tiers would be device, store, and corporate.
Each tier is typically represented by a node group.  Each node in
the tier would belong to the node group representing that tier.
    
A node can only pull and push data to other nodes that are represented in the node's <<NODE>>
table and in cases where that node's `sync_enabled` column is set to 1.
Because of this, a tree-like
hierarchy of nodes can be created by having only a subset of nodes belonging to the same node group represented at the different branches of the tree.
   
If auto registration is turned _off_, then this setup must occur manually by opening registration
for the desired nodes at the desired parent node and by configuring each node's `registration.url`
to be the parent node's URL.
The parent node is always tracked by the setting of the parent's `node_id` in the `created_at_node_id` column of the new node.
When a node registers and downloads its configuration it is always provided the configuration for nodes
that might register with the node itself based on the Node Group Links defined in the parent node.

===== Registration Redirect
       
When deploying a multi-tiered system it may be advantageous to have only one registration server, even though the parent node of a registering node
could be any of a number of nodes in the system.  In SymmetricDS the parent node is always the node that a child registers with.  The
<<REGISTRATION_REDIRECT>> table allows a single node, usually the root server in the network, to
redirect registering nodes to their true parents.  It does so based on a mapping found in the table of the external id (`registrant_external_id`) to the parent's node
id (`registration_node_id`).
        
For example, if it is desired to have a series of regional servers that workstations at retail stores get assigned to based on their `external_id`, the store number, then
you might insert into <<REGISTRATION_REDIRECT>> the store number as the `registrant_external_id` and the `node_id` of
the assigned region as the `registration_node_id`.  When a workstation at the store registers, the root server sends an HTTP redirect to the `sync_url` of the node
that matches the `registration_node_id`.
 
IMPORTANT: Please see <<Initial Loads>> for important details around initial loads
and registration when using registration redirect.


=== Offline Synchronization

include::advanced/offline.ad[]

=== Encrypted Passwords

ifdef::pro[]
NOTE: This section describes command line usage.  The Manage → Startup Parameters screen in the web console automatically encrypts database properties.
endif::pro[]
       
The `db.user` and `db.password` properties can be protected by encrypting them.
This encryption can be done two different ways.

The first option is to pass the text as an argument:
====

[source, cli]
----
symadmin encrypt-text "text-to-encrypt"
----
====
NOTE: The text-to-encrypt on the command line should be surrounded with double quotes if spaces or symbols are used.

The second option is without an argument, and it will prompt you to enter text:
====

[source, cli]
----
symadmin encrypt-text
Enter Text:
----
====

Encrypted text starts with "enc:" to differentiate it from plain text.
See the <<Keystores>> section for an explanation of the encryption key.

=== Secure Transport
       
By specifying the "https" protocol for a URL, SymmetricDS will communicate over
Secure Sockets Layer (SSL) for an encrypted transport.  The following properties
need to be set with "https" in the URL:
            
sync.url::  This is the URL of the current node, so if you want to force other
nodes to communicate over SSL with this node, you specify "https" in the URL.
 
registration.url::  This is the URL where the node will connect for registration when it
first starts up.  To protect the registration with SSL, you specify
"https" in the URL.
        
==== Standalone
           
The SymmetricDS service and the "sym" launch command use Jetty as an embedded web server.
Edit the `conf/symmetric-server.properties` file to change port numbers
to listen on and whether or not to use HTTP and/or HTTPS.
            
[source, cli]
----
http.enable=true
http.port=31415
https.enable=true
https.port=31417
----
            
==== Tomcat
           
If you deploy SymmetricDS to Apache Tomcat, it can be secured by editing the
`TOMCAT_HOME/conf/server.xml`
configuration file.  There is already a line that can be uncommented
and changed to the following:

[source, xml]
----
<Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true"
  maxThreads="150" scheme="https" secure="true"
  clientAuth="false" sslProtocol="TLS"
  keystoreFile="/symmetric-ds-1.x.x/security/keystore" />
----
            
==== Keystores
           
The `security` subdirectory contains a private keystore and a trusted keystore.  System properties are used to specify the location
of each keystore file and a password to protect it.
The system properties are set in the `bin/setenv` (or `bin\setenv.bat` on Windows) and `conf/sym_service.conf` files.

[cols="10,10,10,10,60", options="header"]
|===
|Filename|Store Type|System Property for File|System Property for Password|Description
|keystore|PKCS12|sym.keystore.file|javax.net.ssl.keyStorePassword|Contains private encryption key and TLS certificate.
|cacerts|JKS|javax.net.ssl.trustStore|javax.net.ssl.trustStorePassword|Contains public certificates for trusted authorities who sign keys.
|===

The following entries in the `keystore` file are used.

.Alias entries in keystore file
[cols="20,80"]
|===
|sym|The TLS certificate used for handling incoming HTTPS communication.
|sym.secret|The encryption key used for protecting secrets like database password.
|===

If an entry is missing when encryption is requested, SymmetricDS will automatically generate a random key for use.
It tries to use the strongest encryption algorithm and the largest key size available on the system.
If the `keystore` file is missing, it will be created.  Starting in SymmetricDS 3.14, it uses PKCS12 as the store type for new keystores,
but it is backwards compatible with the older JCEKS store type.

==== Finding Keystore Password

The keystores and each key entry is protected with a password.  The default password is `changeit`.
ifdef::pro[]
During installation, the setup program chooses a random password and obfuscates it for the private `keystore` file.
endif::pro[]

To obtain the current password, use the following steps:

* Look in the `bin/setenv` (or `bin\setenv.bat` on Windows) or the `conf/sym_service.conf` files.  (The password should be the same in both files.)

* For the password to `keystore`, look for the `javax.net.ssl.keyStorePassword` system property.

* For the password to `cacerts`, look for the `javax.net.ssl.trustStorePassword` system property.

* If the password starts with "obf:" then it is obfuscated.  To obtain the cleartext password, use the following command from the `bin` subdirectory:

[source, cli]
----
symadmin unobfuscate-text obf:cHVuYXRydmc=
----

* If the password does not start with "obf:" then it is the cleartext password.

==== Changing Keystore Password

To change the keystore password, use the following steps:
            
* Open a command prompt and navigate to the SymmetricDS installation.

* In the `security` subdirectory, use the following commands to enter the old and new password for the keystore and each key entry.

[source, cli]
----
keytool -keystore keystore -storepasswd
keytool -keystore keystore -alias sym -keypasswd
keytool -keystore keystore -alias sym.secret -keypasswd
----

* Edit `bin/setenv` (or `bin\setenv.bat` on Windows) and `conf/sym_service.conf` files to update the new password. 

[source, cli]
----
-Djavax.net.ssl.keyStorePassword=changeit
----

* Optionally, obfuscate the new password in the previous step to prevent casual observation.

[source, cli]
----
syadmin obfuscate-text changeit
----

            
==== Generating Certificates

ifdef::pro[]
NOTE: This section describes command line usage.  See <<Security>> for using the web console instead.
endif::pro[]
           
To generate new keys and install a server certificate, use the
following steps:
            
* Open a command prompt and navigate to the `security` subdirectory of SymmetricDS.
                    
* Delete the old key pair and certificate.
                   
[source, cli]
----
keytool -keystore keystore -delete -alias sym
keytool -keystore cacerts -delete -alias sym
----
IMPORTANT: If you receive a message like, "Alias <sym> does not exist" - then the key entry does not exist and you can skip this step.
                   
* Generate a new key pair.  Note that the first name/last name (the "CN") must match
    the fully qualified hostname the client will be using to communcate to the server.
                   
[source, cli]
----
keytool -keystore keystore -alias sym -genkey -keyalg RSA -validity 10950
----
 
* Export the certificate from the private keystore.
                   
[source, cli]
----
keytool -keystore keystore -export -alias sym -rfc -file sym.cer
----
                
* Install the certificate into the trusted keystore.
                   
[source, cli]
----
keytool -keystore cacerts -import -alias sym -file sym.cer
----

* Copy the `cacerts` file that is generated by this process to the `security` directory of each client's SymmetricDS installation.


=== Java Management Extensions
       
Monitoring and administrative operations can be performed using Java Management Extensions (JMX).
SymmetricDS exposes JMX attributes and operations that can be accessed
from the `jmx` command, Java's jconsole, or a third party tool.

In order to use jconsole, you must enable JMX remote management in the JVM. You can edit the startup scripts to set the following system
parameters.


[source,properties]   
----      
-Dcom.sun.management.jmxremote.port=31417
-Dcom.sun.management.jmxremote.authenticate=false
-Dcom.sun.management.jmxremote.ssl=false
----

More details about enabling JMX for JConsole can be found http://docs.oracle.com/javase/6/docs/technotes/guides/management/jconsole.html[here].
         
Using the Java jconsole command, SymmetricDS is listed as a local process named SymmetricLauncher.
In jconsole, SymmetricDS appears under the MBeans tab under the name defined by the `engine.name`
property.  The default value is SymmetricDS.
     
The management interfaces under SymmetricDS are organized as follows:

[horizontal]
Node::  administrative operations 
Parameters::  access to properties set through the parameter service 

=== JMS Publishing

With the proper configuration SymmetricDS can publish XML messages of captured data changes to
JMS during routing or transactionally while data loading synchronized data into a target database.
The following explains how to publish to JMS during synchronization to the target database.
       
The XmlPublisherDatabaseWriterFilter is a
<<IDatabaseWriterFilter>> that may be configured to
publish specific tables as an XML message to a JMS provider.
See <<Extensions>> for information on how
to configure an extension point.  If the publish to JMS fails, the batch will be marked in error,
the loaded data for the batch will be rolled back
and the batch will be retried during the next synchronization run.
       
The following is an example extension point configuration that will publish four tables in XML with a root
tag of _'sale'_.  Each XML message will be grouped by the batch and the column names identified by
the groupByColumnNames property which have the same values.
                
[source, xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <bean id="configuration-publishingFilter"
      class="org.jumpmind.symmetric.integrate.XmlPublisherDatabaseWriterFilter">
        <property name="xmlTagNameToUseForGroup" value="sale"/>
        <property name="tableNamesToPublishAsGroup">
            <list>
               <value>SALE_TX</value>
               <value>SALE_LINE_ITEM</value>
               <value>SALE_TAX</value>
               <value>SALE_TOTAL</value>
            </list>
        </property>
        <property name="groupByColumnNames">
            <list>
               <value>STORE_ID</value>
               <value>BUSINESS_DAY</value>
               <value>WORKSTATION_ID</value>
               <value>TRANSACTION_ID</value>
            </list>
        </property>
        <property name="publisher">
           <bean class="org.jumpmind.symmetric.integrate.SimpleJmsPublisher">
               <property name="jmsTemplate" ref="definedSpringJmsTemplate"/>
           </bean>
        </property>
    </bean>
</beans>
----

The publisher property on the XmlPublisherDatabaseWriterFilter takes an interface of type IPublisher.  The implementation
demonstrated here is an implementation that publishes to JMS using Spring's
http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jms.html#jms-jmstemplate[JMS template].
Other implementations of IPublisher could easily publish the XML to other targets like an HTTP server, the file system or secure copy it to another server.
       
The above configuration will publish XML similar to the following:

[source, xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<sale xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  id="0012010-01-220031234" nodeid="00001" time="1264187704155">
  <row entity="SALE_TX" dml="I">
    <data key="STORE_ID">001</data>
    <data key="BUSINESS_DAY">2010-01-22</data>
    <data key="WORKSTATION_ID">003</data>
    <data key="TRANSACTION_ID">1234</data>
    <data key="CASHIER_ID">010110</data>
  </row>
  <row entity="SALE_LINE_ITEM" dml="I">
    <data key="STORE_ID">001</data>
    <data key="BUSINESS_DAY">2010-01-22</data>
    <data key="WORKSTATION_ID">003</data>
    <data key="TRANSACTION_ID">1234</data>
    <data key="SKU">9999999</data>
    <data key="PRICE">10.00</data>
    <data key="DESC" xsi:nil="true"/>
  </row>
  <row entity="SALE_LINE_ITEM" dml="I">
    <data key="STORE_ID">001</data>
    <data key="BUSINESS_DAY">2010-01-22</data>
    <data key="WORKSTATION_ID">003</data>
    <data key="TRANSACTION_ID">1234</data>
    <data key="SKU">9999999</data>
    <data key="PRICE">10.00</data>
    <data key="DESC" xsi:nil="true"/>
  </row>
  <row entity="SALE_TAX" dml="I">
    <data key="STORE_ID">001</data>
    <data key="BUSINESS_DAY">2010-01-22</data>
    <data key="WORKSTATION_ID">003</data>
    <data key="TRANSACTION_ID">1234</data>
    <data key="AMOUNT">1.33</data>
  </row>
  <row entity="SALE_TOTAL" dml="I">
    <data key="STORE_ID">001</data>
    <data key="BUSINESS_DAY">2010-01-22</data>
    <data key="WORKSTATION_ID">003</data>
    <data key="TRANSACTION_ID">1234</data>
    <data key="AMOUNT">21.33</data>
  </row>
</sale>
----

To publish JMS messages during routing
the same pattern is valid, with the exception that the extension point would be the XmlPublisherDataRouter and the router
would be configured by setting the `router_type` of a <<ROUTER>> to the Spring bean
name of the registered extension point.  Of course, the router would need to be linked through <<TRIGGER_ROUTER>>s
to each <<TRIGGER>> table that needs published.

=== File Synchronization
SymmetricDS not only supports the synchronization of database tables, but it also supports the synchronization of 
files and folders from one node to another.

==== File Synchronization Overview

.File synchronization features include:
* Monitoring one or more file system directory locations for file and folder changes
* Support synchronizing a different target directory than the source directory
* Use of wild card expressions to “include” or “exclude” files
* Choice of whether to recurse into subfolders of monitored directories
* Use of existing SymmetricDS routers to subset target nodes based on file and directory metadata
* Ability to specify if files will be synchronized on creation, or deletion, and/or modification
* Ability to specify the frequency with which file systems are monitored for changes
* Ability to extend file synchronization through scripts that run before or after a file is copied to its source location
* Support for bidirectional file synchronization
* Like database synchronization, file synchronization is configured in a series of database tables. The configuration 
was designed to be similar to database synchronization in order to maintain consistency and to give database 
synchronization users a sense of familiarity.

For database synchronization, SymmetricDS uses <<Table Triggers>> to configure which tables will capture data for synchronization 
and <<Routers>> to designate which nodes will be the source of data changes and which nodes will receive the data changes. 
<<Table Routing>> links triggers to routers.

Likewise, for file synchronization, SymmetricDS uses <<File Triggers>> to designate which base directories will be monitored. 
Each entry in <<File Triggers>> designates one base directory to monitor for changes on the source system. The columns on 
<<File Triggers>> provide additional settings for choosing specific files in the base directory that will be monitored, and 
whether to recurse into subdirectories, etc. File triggers are linked to routers using <<File Routing>>. The file trigger 
router not only links the source and the target node groups, but it also optionally provides the ability to override the 
base directory name at the target. <<File Routing>> also provides a flag that indicates if the target node should be 
seeded with the files from the source node during SymmetricDS's initial load process.

NOTE: File synchronization does require a database for runtime information about the synchronization scenario.
File Triggers will also need to be linked to an appropriate router like table triggers in order to complete the setup.

TIP: H2 database works great as a small lightweight database to support file synchronization runtime information if you do 
not have a relational database readily available to support file sync. 

==== How File Synchronization Works 

Not only is file synchronization configured similar to database synchronization, but it also operates in a very similar way. 
The file system is monitored for changes via a background job that tracks the file system changes (this parallels the use of 
triggers to monitor for changes when synchronizing database changes). When a change is detected it is written to the 
<<FILE_SNAPSHOT>> table. The file snapshot table represents the most recent known state of the monitored files. The file snapshot 
table has a SymmetricDS database trigger automatically installed on it so that when it is updated the changes are captured by 
SymmetricDS on an internal channel named filesync.

The changes to <<FILE_SNAPSHOT>> are then routed and batched by a file-synchronization-specific router that delegates to the 
configured router based on the <<File Routing>> configuration. The file sync router can make routing decisions based on the 
column data of the snapshot table, columns which contain attributes of the file like the name, path, size, and last modified time. 
Both old and new file snapshot data are also available. The router can, for example, parse the path or name of the file and use it as 
the node id to route to.

Batches of file snapshot changes are stored on the filesync channel in <<OUTGOING_BATCH>>. The existing SymmetricDS pull and push jobs 
ignore the filesync channel. Instead, they are processed by file-synchronization-specific push and pull jobs. These jobs, file sync tracker,
file sync pull, and file sync push are turned off by default. They need to be started before any changes are processed. 

When transferring data, the file sync push and pull jobs build a zip file dynamically based on the batched snapshot data. The zip 
file contains a directory per batch. The directory name is the batch_id. A sync.bsh Bean Shell script is generated and placed in the 
root of each batch directory. The Bean Shell script contains the commands to copy or delete files at their file destination from an 
extracted zip in the staging directory on the target node. The zip file is downloaded in the case of a pull, or, in the case of a push, 
is uploaded as an HTTP multi-part attachment. Outgoing zip files are written and transferred from the outgoing staging directory. 
Incoming zip files are staged in the filesync_incoming staging directory by source node id. The filesync_incoming/{node_id} staging 
directory is cleared out before each subsequent delivery of files.

The acknowledgement of a batch happens the same way it is acknowledged in database synchronization. The client responds with an 
acknowledgement as part of the response during a file push or pull.

=== Variables

Variables can be used throughout configuration with the `$(variableName)` syntax.  Check the documentation for each configuration 
item to see which variables it supports.  A substring of the variable value can be specified with a starting index and an optional
ending index.  The first character is at index 0, and the end index is not included in the substring.
Therefore, the length of the substring will be end index minus start index.

[source, cli]
----
$(variableName:start)
$(variableName:start:end)
----

Examples when `$(externalId)` is set to `00001-002`:

[source, cli]
----
$(externalId:0:5) - returns 00001
$(externalId:6) - returns 002
----

The variable value can be formatted using a https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax[format string]
supported by `java.lang.String.format()`.

[source, cli]
----
$(variableName|format_string)
----

Examples when `$(externalId)` is set to `1`:

[source, cli]
----
$(variableName|%05d) - returns 00001
----

ifdef::pro[]

=== Display Settings

There are a number of display settings available for the web console. They are accessible by clicking the cog icon in the top right corner of the screen and navigating to the "Display" tab of the settings dialog. These settings apply to the console user that is currently logged in.

image::images/advanced/display-settings.png[]

Appearance:: Determines whether to display the web console in light mode or dark mode.

Date Format:: Determines what format dates are displayed in. Options include YYYY-MM-DD, DD/MM/YYYY, and MM/DD/YYYY.

Time Format:: Determines whether to display times in a 12-hour or 24-hour clock format.

Time Zone:: Determines what time zone dates and times are displayed in. Options include the system's time zone, the browser's time zone, and specific time zone offsets. In order to access this setting, the JVM's time zone must be set to GMT or UTC. The JVM's time zone is determined by the `user.timezone` property, which can be set in `conf/sym_service.conf`.

endif::pro[]



