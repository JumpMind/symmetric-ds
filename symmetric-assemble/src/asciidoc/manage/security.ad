
=== Security

The Security panel manages the SSL/TLS certificates and keys. It also manages break glass users.

==== Server Certificate

The server certificate and private key are used for encrypting the HTTPS transport of data.  The certificate can also be used to verify a node when client authentication is enabled.  The server certificate is stored in a protected keystore named `security/keystore`.
  
Import certificate and key from file:: Upload a file containing the server certificate and private key, which can then be imported.  If the file is a keystore with multiple entries, the user is prompted to select one from the list.  If the file is a protected keystore, the user is prompted for the password.  File types supported are PEM, CRT, CER, PFX, and P12, with support for PKCS 1, PKCS 8, and PKCS 12 standards.
Backup certificate key to file:: Backup the current server certificate and private key to a PEM-encoded text file.
Export certificate to file:: Export the current certificate to a PEM-encoded text file.
Generate self-signed certificate:: Generate a new key and self-signed certificate.

==== Certificate Authorities

The certificates for authorities are public keys used for verifying authorized certificates used for encryption and authentication.  Certificates are stored in a trusted keystore named `security/cacerts`.

View:: View one certicate to display its subject, issuer, effective date, expiration date, and key type.
Delete:: Delete one or more certificates from the keystore.
Export:: Export one public certificate to a file.
Import:: Import one public certificate from a file.

==== Client Authentication

Authentication of clients using certificates is enabled in the `conf/symmetric-server.properties` file.

[source, cli]
----
https.need.client.auth=true
----

The client will be required to send a valid certificate before HTTPS requests can be made.  During TLS negotiation, the server will send a list of certificate authorities to the client (See <<Certificate Authorities>>).  If the client has a certificate signed by one of the authorities, it will send it to the server as authentication (See <<Server Certificate>>).

==== Console Client Authentication

Authentication of console users using client certificates can be enabled with parameter `console.auth.client.cert`.  The console username is parsed from the distinguished name of the certificate's subject using the first matching group of a regular expression specified by parameter `console.auth.client.cert.subject.regex`.  By default, it will match on the common name of the subject.

==== Break Glass

If the user has the necessary permissions, they can break the glass for another user that has the `is_glass_break_required` flag set. This will generate a new password for the user and allow them to login for the selected duration. It is also possible to expire the glass break before the time period is over.
