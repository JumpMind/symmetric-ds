
== Installation

SymmetricDS at its core is a web application.  A SymmetricDS instance runs within the context of a web application container 
like Jetty or Tomcat, and uses web based protocols like HTTP to communicate with other instances.  

An instance has one of the following installation options:

. *<<Standalone Installation>>* - SymmetricDS is installed and run as a standalone process using the built-in
Jetty web server.  This is the simplest and recommended way to install an instance.  

. *<<Web Archive (WAR)>>* - A SymmetricDS web archive (WAR) file is deployed to an existing web application container that is
separately installed, maintained and run.    

. *<<Embedded>>* - SymmetricDS is embedded within an existing application.  In this option, a custom wrapper program is
written that calls the SymmetricDS API to synchronize data.

=== Standalone Installation

ifndef::pro[]
The SymmetricDS standalone ZIP file can be downloaded from https://sourceforge.net/projects/symmetricds/files[Sourceforge].  
It is installed by unzipping to the installation location.

The `sym` command line utility starts a standalone instance of SymmetricDS using
the built-in Jetty web server to handle requests.
The web server can be configured by changing properties in the
`conf/symmetric-server.properties` file.
           
The following example starts the server on the default port from the command line.  SymmetricDS will automatically create a node for each  
<<Node Properties File>> configured in the engines directory.
            
[source, cli]
----
bin/sym
----

To automatically start SymmetricDS when the machine boots, see <<Running as a Service>>.

endif::pro[]

ifdef::pro[]
The SymmetricDS Pro setup program is an executable JAR file that can run on any system 
with a Java Runtime Environment (JRE).  See <<System Requirements>> for prerequisites.
Download the setup program from https://support.jumpmind.com/downloads[SymmetricDS Pro Downloads].

Run the setup program:

* From a desktop environment, double click the *symmetric-pro-<version>-setup.jar* file
* If double clicking doesn't work, use a command prompt to run: `java -jar symmetric-pro-<version>-setup.jar`
* From a text-based environment, use a terminal to run: `java -jar symmetric-pro-<version>-setup.jar -console`


[.float-group]
--
[.left.text-left]
image::images/install/install1.png[]

The first screen shows the SymmetricDS Pro software version.
The setup program will ask a series of questions before writing files to disk.

To begin selecting options, click *Next*.

--

[.float-group]
--
[.left.text-left]
image::images/install/install2.png[]

Carefully read the SymmetricDS Pro License Agreement.

If you accept, select _I accept the terms of this license agreement_ and click *Next*.

--

[.float-group]
--
[.left.text-left]
image::images/install/install3.png[]

Specify _Install new software_ to install a new version of SymmetricDS for the first time.

For upgrading an existing installation of SymmetricDS, see <<Upgrading>>.

Click *Next* to continue.

--

[.float-group]
--
[.left.text-left]
image::images/install/install4.png[]

Choose the installation path where SymmetricDS will either be installed or upgraded.
If the directory does not already exist, it will be created for you.  Make sure your user has permission
to write to the file system.

After entering the directory path, click *Next*.

--

[.float-group]
--
[.left.text-left]
image::images/install/install5.png[]

Select the packages you want to install and verify disk space requirements are met.
By default, all packages are selected.
Drivers for popular databases are included, but they can be unselected if you
don't plan to use them.

After selecting packages, click *Next*.

--

[.float-group]
--
[.left.text-left]
image::images/install/install6.png[]

SymmetricDS can either be run automatically by the system or manually by the user.
Select the _Install service to run automatically_ checkbox to install a Windows service or Unix daemon that will
start SymmetricDS when the computer is restarted.  The service can installed or uninstalled later using
the Control Center or command line (see <<Running as a Service>>).

Select the _Run server after installing_ checkbox to also run SymmetricDS after installation so it can be used immediately.

After selecting options, click *Next*.

--

[.float-group]
--
[.left.text-left]
image::images/install/install7.png[]

HTTPS and HTTPS/2 protocols are recommended for protecting data security.
For testing without security or encryption, the HTTP protocol can be enabled.
Choose an available port number to listen on, which will be validated.

Java Management eXtension (JMX) is an optional way to manage the server
from third party tools like JConsole.
Most installations leave it disabled and use the web console for management.

Click *Next* to continue.

--

[.float-group]
--
[.left.text-left]
image::images/install/install8.png[]
Specify how much memory to use for sending and receive data changes.
More memory is needed to communicate with multiple clients and when data contains large objects (LOB). 
Estimate an extra 5 MB of memory for each client and each 500 MB/hour of data transfer.

Click *Next* to continue.

--

[.float-group]
--
[.left.text-left]
image::images/install/install9.png[]
Specify disk space options for temporarily staging incoming and outgoing data changes.
Using staging helps the overall performance of the system and minimizes use of the database.
The default location is the "tmp" sub-directory of the installation directory.
For <<Clustering>>, specify a common network share.

Click *Next* to continue.

--

[.float-group]
--
[.left.text-left]
image::images/install/install10.png[]

Confirm your installation settings look correct.

Click *Next* to begin installing files.

--

[.float-group]
--
[.left.text-left]
image::images/install/install11.png[]

The packages you selected are installed to disk.

After it finishes, click *Next*.

--

[.float-group]
--
[.left.text-left]
image::images/install/install12.png[]

During the finish step, it will install the service and start the service if you selected those options.

After it finishes, click *Next*.

--

[.float-group]
--
[.left.text-left]
image::images/install/install13.png[]

The installation is now complete.  Choose if you want to open the SymmetricDS Pro Control Center where
you can view the server status and open a web console.

Click *Done* to exit the setup program.

--

[.float-group]
--
[.left.text-left]
image::images/install/install14.png[]

From the SymmetricDS Pro Control Center, 
you can start/stop the server, open the web console, and install/uninstall the service.

To begin configuration of SymmetricDS, check that the server is running, and then click *Open Web Console*.  

--

To continue setup and configuration of SymmetricDS, refer to the <<Setup>> section.

endif::pro[]

=== Running as a Service
   
SymmetricDS can be configured to start automatically when the system boots, running as a Windows service or Linux/Unix daemon.
A wrapper process starts SymmetricDS and monitors it, so it can be restarted if it runs out of memory or exits unexpectedly.
The wrapper writes standard output and standard error to the `logs/wrapper.log` file.

ifdef::pro[]
For SymmetricDS Pro, you may have already installed as a service, so this section will show you how to manually install
the service from command line.
endif::pro[]

==== Running as a Windows Service
       
To install the service, run the following command as Administrator:

[source, cli]
----
bin\sym_service.bat install
----

Most configuration changes do not require the service to be re-installed.
To uninstall the service, run the following command as Administrator:

[source, cli]
----
bin\sym_service.bat uninstall
----
   
To start and stop the service manually, run the following commands as Administrator:
[source, cli]
----
bin\sym_service.bat start
bin\sym_service.bat stop
----

==== Running as a Linux/Unix daemon
       
An init script is written to the system `/etc/init.d` directory.
Symbolic links are created for starting on run levels 2, 3, and 5 and stopping on run levels 0, 1, and 6.
To install the script, running the following command as root:
[source, cli]
----
bin/sym_service install
----
   
Most configuration changes do not require the service to be re-installed.
To uninstall the service, run the following command as root:
[source, cli]
----
bin/sym_service uninstall
----
   
To start and stop the service manually, run the following commands:
[source, cli]
----
bin/sym_service start
bin/sym_service stop
----
    
=== Clustering
       
A single SymmetricDS node can be deployed across a series of servers to cooperate as a cluster.  A node can be clustered to provide load balancing and high availability.

ifndef::pro[]
NOTE: Clustering is available in https://www.jumpmind.com/products/symmetricds/symmetricds-overview[SymmetricDS Pro].
endif::pro[]

Each node in the cluster shares the same database.
A separate hardware or software load balancer is required to receive incoming requests and direct them to one of the backend nodes.
Use the following steps to setup a cluster:

1. Set the `cluster.lock.enabled` property to `true`
2. Optionally, set the `cluster.server.id` property to a unique name, otherwise the hostname will be used
3. Set the `sync.url` property to the URL of the load balancer
4. Set the `initial.load.use.extract.job.enabled` property to `false` if using local staging
5. Copy the engine properties, `security/keystore`, and `conf/sym_service.conf` files to each installation
6. Configure the load balancer for sticky sessions
7. If the load balancer requires cookies, then client nodes need to set the `server.http.cookies.enabled` property to `true` in `conf/symmetric-server.properties`

With the `cluster.lock.enabled` property set to `true`, jobs will acquire an entry in the <<LOCK>> table to ensure that only
one instance of the job runs across the cluster.  When a lock is acquired, a row is updated in the lock table with the time of the lock
and the server ID of the locking job.  The locking server ID defaults to the host name, but it can specified with the `cluster.server.id`
property if nodes are running on the same server.  Another instance of the job cannot acquire a lock until the locking instance releases 
the lock and sets the lock time back to null.  If an instance is terminated while the lock is still held, an instance with the same server ID
is allowed to re-acquire the lock.  If the locking instance remains down, the lock can be broken after it expires, specified by the 
`cluster.lock.timeout.ms` property.  Jobs refresh their lock periodically as they run, which prevents a lock from expiring due to a long run time.

The load balancer should be configured to use sticky sessions if the cluster will receive push synchronization.
Push connections first request a reservation from the target node and then connect again using the reservation to push changes.
Sticky sessions ensures that the push request is sent to the same server where the reservation is held.

Staging is writing batches to disk before sending over the network, which can use local disk or a shared network drive.
Staging can improve performance by reducing the time that resources are held open in the database and by extracting batches before they are served.
To use local staging in a cluster, disable the `initial.load.use.extract.job.enabled` property so the initial load will extract
batches on the node serving the request, rather than extracting in the background on a different node.
To use shared staging in a cluster, set the `staging.dir` property to the directory path of the network drive and enable the
`cluster.staging.enabled` property so files are locked during use.  With shared staging, the initial load extracts in the background on one node,
but batches can be served from any of the nodes in the cluster, which can improve performance.

When deploying nodes in a cluster to an application server like Tomcat or JBoss, the application server does NOT need any clustering of sessions configured.
 
=== Other Deployment Options

It is recommended that SymmetricDS is installed as a standalone service, however there are two other deployment options.

==== Web Archive (WAR)
           
           
This option means packaging a WAR file and deploying to your favorite
web server, like Apache Tomcat.  It's a little more work, but you
can configure the web server to do whatever you need.  SymmetricDS can also
be embedded in an existing web application, if desired.  As a web application archive, a WAR is deployed to an application server,
such as Tomcat, Jetty, or JBoss.  The structure of the archive will have a `web.xml`
file in the `WEB-INF` folder, an appropriately configured `symmetric.properties` file in the `WEB-INF/classes` folder,
and the required JAR files in the `WEB-INF/lib` folder.

.War
image::images/symmetric_war.gif[]

A war file can be generated using the standalone installation's `symadmin` utility and the
`create-war` subcommand.  The command requires the name of the war file to generate.  It
essentially packages up the web directory, the conf directory and includes an optional
properties file.  Note that if a properties file is included, it will be copied to
WEB-INF/classes/symmetric.properties.  This is the same location conf/symmetric.properties
would have been copied to.  The generated war distribution uses the same web.xml as the standalone
deployment.
            
[source, cli]           
----
bin/symadmin -p my-symmetric-ds.properties create-war /some/path/to/symmetric-ds.war
----

==== Embedded
           
This option means you must write a wrapper Java program that runs
SymmetricDS.  You would probably use Jetty web server, which is also embeddable.
You could bring up an embedded database like Derby or H2.  You could configure the
web server, database, or SymmetricDS to do whatever you needed, but it's also
the most work of the three options discussed thus far.
   
The deployment model you choose depends on how much flexibility you need versus how easy you
want it to be.  Both Jetty and Tomcat are excellent, scalable web servers that
compete with each other and have great performance.  Most people choose either
the _Standalone_ or _Web Archive_ with Tomcat 5.5 or 6.  Deploying to Tomcat
is a good middle-of-the-road decision that requires a little more work for more flexibility.

A Java application with the SymmetricDS Java Archive (JAR) library on its
classpath can use the `SymmetricWebServer` to start the server.
            
[source, java]
----
import org.jumpmind.symmetric.SymmetricWebServer;

public class StartSymmetricEngine {

    public static void main(String[] args) throws Exception {

        SymmetricWebServer node = new SymmetricWebServer(
                                   "classpath://my-application.properties", "conf/web_dir");

        // this will create the database, sync triggers, start jobs running
        node.start(8080);

        // this will stop the node
        node.stop();
    }
----
           
This example starts the SymmetricDS server on port 8080.
The configuration properties file, `my-application.properties`,
is packaged in the application to provide properties that override the SymmetricDS
default values.  The second parameter to the constructor points to the web directory.
The default location is `web`.  In this example the web directory is located
at `conf/web_dir`.  The web.xml is expected to be found at `conf/web_dir/WEB-INF/web.xml`.

==== Client Mode

This option runs the SymmetricDS engine without a web server, so it can initiate push and pull requests, but not receive them.
Without the web server, there are no open ports listening for sync requests, which can help with security requirements.
ifdef::pro[]
Be aware that this also means losing access to the web console at this node and any enhanced troubleshooting provided by remote status.
endif::pro[]

ifndef::pro[]
The `sym` command line utility has an option to start in client mode:
            
[source, cli]
----
bin/sym --client
----

endif::pro[]

The `conf/sym_service.conf` file has a parameter to start the service in client mode:

[source, cli]
----
wrapper.app.parameter.3=--client
----

