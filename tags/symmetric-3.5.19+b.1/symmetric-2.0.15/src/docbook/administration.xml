<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="administration" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml">
    <title>Administration</title>
    <section id="changing-triggers">
        <title>Changing Triggers</title>
        <para>
            A trigger row may be updated using SQL to change a synchronization definition.
            SymmetricDS will look for changes each night or whenever the Sync Triggers Job 
            is run (see below).  For example, a change to place the table <literal>price_changes</literal> 
            into the price channel would be accomplished with the following statement:
            <programlisting>
<![CDATA[update SYM_TRIGGER
set channel_id = 'price',
    last_update_by = 'jsmith',
    last_update_time = current_timestamp
where source_table_name = 'price_changes';
]]></programlisting>            
            All configuration should be managed centrally at the registration node.  If enabled, configuration 
            changes will be synchronized out to client nodes.  When trigger changes reach the client
            nodes the Sync Triggers Job will run automatically.
         </para>
         <para>   
            Centrally, the trigger changes will not take effect until the Sync Triggers Job runs.
            Instead of waiting for the Sync Triggers Job to run overnight after making a Trigger
            change, you can invoke the syncTriggers() method over JMX or simply restart the SymmetricDS
            server.
        </para>
    </section>
    <section id="changing-configuration">
        <title>Changing Configuration</title>
        <para>
            The configuration of your system as defined in the <literal>sym_*</literal> tables may be modified at runtime.  By default, any changes made to 
            the <literal>sym_*</literal> tables (with the exception of <literal>sym_node</literal>) should be made at the registration server.  The changes will
            be synchronized out to the leaf nodes by SymmetricDS triggers that are automatically created on the tables.
         </para>
         <para>   
            If this behavior is not desired, the feature can be turned off using a parameter.  Custom triggers may be added
            to the <literal>sym_*</literal> tables when the auto syncing feature is disabled.
        </para>
    </section> 
    
     <section id='logging'>
        <title>Logging Configuration</title>    
        <para>
        The standalone SymmetricDS installation uses <ulink url="http://logging.apache.org/log4j/1.2/index.html">Log4J</ulink> for logging.  The configuration file is  <literal>conf/log4j.xml</literal>.
        The <literal>log4j.xml</literal> file has hints as to what logging can be enabled for useful, finer-grained logging.
        </para>
        <para>
        SymmetricDS proxies all of its logging through <ulink url="http://commons.apache.org/logging/">Commons Logging</ulink>.  When deploying to an application server, if Log4J is not 
        being leveraged, then the general rules for for Commons Logging apply.
        </para>
    </section> 
    
     <section id="admin-jmx">
        <title>Java Management Extensions</title>
        <para>
          Monitoring and administrative operations can be performed using Java Management Extensions (JMX).
          SymmetricDS uses MX4J to expose JMX attributes and operations that can be accessed
          from the built-in web console, Java's jconsole, or an application server.  
          By default, the web management console can be opened from the following address:

          <programlisting><![CDATA[http://localhost:31416/]]></programlisting>

          Using the Java jconsole command, SymmetricDS is listed as a local process named SymmetricLauncher.
          In jconsole, SymmetricDS appears under the MBeans tab as DefaultDomain.
        </para>
        <para>
          The management interfaces under DefaultDomain are organized as follows:

            <itemizedlist>
                <listitem>
                    <para>Node - administrative operations </para>
                </listitem>
                <listitem>
                    <para>Incoming - statistics about incoming batches </para>
                </listitem>
                <listitem>
                    <para>Outgoing - statistics about outgoing batches </para>
                </listitem>
                <listitem>
                    <para>Parameters - access to properties set through the parameter service </para>
                </listitem>
                <listitem>
                    <para>Notifications - setting thresholds and receiving notifications </para>
                </listitem>
            </itemizedlist>
          
        </para>
    </section>
    
    
    
    <section id="temporary-files">
        <title>Temporary Files</title>
        <para>
        SymmetricDS creates temporary extraction and data load files with the CSV payload of a synchronization when
        the value of the <literal>stream.to.file.threshold.bytes</literal> SymmetricDS property has been reached.  Before reaching the threshold, files 
        are streamed to/from memory.  The default threshold value is 32,767 bytes. This feature may be turned off by setting the <literal>stream.to.file.enabled</literal> 
        property to false.
        </para>
        <para>
        SymmetricDS creates these temporary files in the directory specified by the <literal>java.io.tmpdir</literal> Java System property.  When  
        SymmmetricDS starts up, stranded temporary files are aways cleaned up.  Files will only be stranded if the SymmetricDS engine is force killed.
        </para>
        <para>
        The location of the temporary directory may be changed by setting the Java System property passed into the Java program at startup.  For example,
        <programlisting>
  -Djava.io.tmpdir=/home/.symmetricds/tmp
        </programlisting>   
        </para>
    </section>   
    
    
    <section id="purge">
        <title>Database Purging</title>
        <para>
            Purging is the act of cleaning up captured data that is no longer needed in SymmetricDS's runtime tables.  
            Data is purged through
            delete statements by the <emphasis>Purge Job</emphasis>.  Only data that has been successfully synchronized will be purged.  Purged tables include:
            <itemizedlist>
                <listitem>
                   <xref linkend="table_data" xrefstyle="table"/>
                </listitem>
                <listitem>
                    <xref linkend="table_data_event" xrefstyle="table"/>
                </listitem>
                <listitem>
                  <xref linkend="table_outgoing_batch" xrefstyle="table"/>
                </listitem>
                <listitem>
                    <xref linkend="table_incoming_batch" xrefstyle="table"/>
                </listitem>
                <listitem>
                   <xref linkend="table_statistic" xrefstyle="table"/>
                </listitem>                
            </itemizedlist>
            The purge job is enabled by the <literal>start.purge.job</literal> SymmetricDS property.  The job runs periodically according to the 
            <literal>job.purge.period.time.ms</literal> property.  The default period is to run every ten minutes.  
        </para>      
        <para>
            Two retention period properties
            indicate how much history SymmetricDS will retain before purging.  The <literal>purge.retention.minutes</literal> property indicates the period
            of history to keep for synchronization tables.  The default value is 5 days.
            The <literal>statistic.retention.minutes</literal> property
            indicates the period of history to keep for statistics.  The default value is also 5 days.            
        </para>
        <para>
            The purge properties should be adjusted according to how much data is flowing through the system and the amount of storage space the database has.
            For an initial deployment it is recommended that the purge properties be kept at the defaults, since it is often helpful to be able to look at 
            the captured data in order to triage problems and profile the synchronization patterns.  When scaling up to more nodes, it is recomended that the 
            purge parameters be scaled back to 24 hours or less.  
        </para>
        
    </section>
    <section id="debugging-issues">
        <title>Debugging Issues</title>
    </section>
    
    <section id="querying-for-errors">
        <title>Querying for Errors</title>
    </section>
    
    <section id="fixing-errors">
        <title>Fixing Errors</title>
    </section>
    
    <section id="measuring-performance">
        <title>Measuring Performance</title>
    </section>
  
    
    
 
  
    
</chapter>
