<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="ch07-administration" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml">
    <title>Administration</title>
    <section>
        <title>Changing Triggers</title>
        <para>
            When changing an entry in the Trigger table, always set the last_updated_time field 
            to a newer time in order for the change to be detected.  SymmetricDS will look for
            changes each night or whenever the Sync Triggers Job is run (see next section).
            For example, a change to place the table price_changes into the price channel
            would be accomplished with the following statement:

            <programlisting>
<![CDATA[update SYM_TRIGGER
set channel_id = 'price',
    last_updated_by = 'jsmith',
    last_updated_time = current_timestamp
where source_table_name = 'price_changes';
]]></programlisting>
            
            The Trigger entry can be inactivated, which would drop the triggers (and any functions 
            used by them) from the database.  For example, dropping all the triggers used by the
            client node group would be accomplished with the following statement:
            
            <programlisting>
<![CDATA[update SYM_TRIGGER
set inactive_time = current_timestamp,
    last_updated_by = 'jsmith',
    last_updated_time = current_timestamp
where source_node_group_id = 'client';
]]></programlisting>

            Instead of waiting for the Sync Triggers Job to run overnight after making a Trigger
            change, invoke the syncTriggers() method over JMX or simply restart the SymmetricDS
            server.
        </para>
    </section>
    <section>
        <title>Sync Triggers Job</title>
        <para>
            SymmetricDS examines the current configuration, corresponding database triggers,
            and the underlying tables to determine if database triggers need created or updated.
            The change activity is recorded on the Trigger Hist table with a reason for the
            change.  The following reasons for a change are possible:

            <itemizedlist>
                <listitem>
                    <para>N - New trigger that has not been created before</para>
                </listitem>
                <listitem>
                    <para>S - Schema changes in the table were detected</para>
                </listitem>
                <listitem>
                    <para>C - Configuration changes in Trigger</para>
                </listitem>
                <listitem>
                    <para>T - Trigger was missing</para>
                </listitem>
            </itemizedlist>

            A configuration entry in Trigger without any history in Trigger Hist results in a new
            trigger being created (N).  The Trigger Hist stores a hash of the underlying table, so
            any alteration to the table causes the trigger to be rebuilt (S).  When the 
            last_updated_time is changed on the Trigger entry, the configuration change causes
            the trigger to be rebuilt (C).  If an entry in Trigger Hist is missing the
            corresponding database trigger, the trigger is created (T).
        </para>
        <para>
            The process of examining triggers and rebuilding them is automatically run during startup and
            each night by the SyncTriggersJob.  The user can also manually run the process at any time 
            by invoking the syncTriggers() method over JMX.  The SyncTriggersJob is enabled by default 
            to run at 15 minutes past midnight.  If SymmetricDS is being run from a collection of servers
            (multiple instances of the same Node running against the same database), then locking
            should be enable to prevent database contention.  The following runtime properties
            control the behavior of the process.

            <variablelist>
                <varlistentry>
                    <term>
                        <command>start.synctriggers.job</command>
                    </term>
                    <listitem>
                        <para>
                            Whether the sync triggers job is enabled for this node.
                            [&#xA0;Default:&#xA0;true&#xA0;]
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>job.synctriggers.aftermidnight.minutes</command>
                    </term>
                    <listitem>
                        <para>
                            If scheduled, the sync triggers job will run nightly. This is how long after midnight
                            that job will run. [&#xA0;Default:&#xA0;15&#xA0;]
                        </para>
                    </listitem>
                </varlistentry>           
                <varlistentry>
                    <term>
                        <command>cluster.lock.during.sync.triggers</command>
                    </term>
                    <listitem>
                        <para>
                            Indicate if the sync triggers job is clustered and requires a lock before running.
                            [&#xA0;Default:&#xA0;false&#xA0;]
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </para>
    </section>
    <section>
        <title>Enabling and Disabling Synchronization</title>
        <para></para>
    </section>
    <section>
        <title>Java Management Extensions</title>
        <para>
          Monitoring and administrative operations can be performed using Java Management Extensions (JMX).
          SymmetricDS uses MX4J to expose JMX attributes and operations that can be accessed
          from the built-in web console, Java's jconsole, or an application server.  
          By default, the web management console can be opened from the following address:

          <programlisting><![CDATA[http://localhost:31416/]]></programlisting>

          Using the Java jconsole command, SymmetricDS is listed as a local process named SymmetricLauncher.
          In jconsole, SymmetricDS appears under the MBeans tab as DefaultDomain.
        </para>
        <para>
          The management interfaces under DefaultDomain are organized as follows:

            <itemizedlist>
                <listitem>
                    <para>Node - administrative operations </para>
                </listitem>
                <listitem>
                    <para>Incoming - statistics about incoming batches </para>
                </listitem>
                <listitem>
                    <para>Outgoing - statistics about outgoing batches </para>
                </listitem>
                <listitem>
                    <para>Parameters - access to properties set through the parameter service </para>
                </listitem>
                <listitem>
                    <para>Notifications - setting thresholds and receiving notifications </para>
                </listitem>
            </itemizedlist>
          
        </para>
    </section>
    <section>
        <title>Opening Registration</title>
        <para></para>
    </section>
    <section>
        <title>Viewing Batches</title>
        <para></para>
    </section>
    <section>
        <title>Statistics</title>
        <para></para>
    </section>
    
</chapter>
