<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="ch08-ip-filtering" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml">
    <title>IP Filtering</title>
    <section>
        <title>IP Filtering</title>
        <para>
            SymmetricDS supports restricting IP addresses of clients that are allowed to 
            connect to servers.The following filtering functionality is supported for IPv4
            addresses (IPv6 is currently not supported).
        </para> 
        <itemizedlist>
            <listitem>
                <para>CIDR (Classless Inter-Domain Routing) notation</para>
            </listitem>
            <listitem>
                <para>Wildcarding</para>
            </listitem>
            <listitem>
                <para>Range</para>
            </listitem>
            <listitem>
                <para>Literal</para>
            </listitem>            
        </itemizedlist>
    </section>
    <section xml:id="filter.cidr">
        <title>CIDR</title>
        <para>
            Classless Inter-Domain Routing, <link xlink:href='http://www.ietf.org/rfc/rfc1519.txt'>CIDR</link>, notation 
            is the preferred notation for restricting client connections to a server node in a SymmetricDS tree. 
            It is a commonly utilized format for IP address filtering. Many established frameworks, such as 
            <link xlink:href='http://httpd.apache.org/docs/1.3/mod/mod_access.html'>Apache</link>, utilize this notation for
            filtering IP addresses.
        </para>
        <para>
            The basis for implementing CIDR notation is defining the IP address block and significant
            bits of that address that are to be checked. The filter must be a well formatted IP address
            with a ending with a <quote>/</quote> followed by a numeric value between 0 and 32. The use
            of <quote>0</quote> denotes that all IP addresses are allowed (in which case it's fairly pointless
            to enable the filtering framework), and <quote>32</quote> signifies only the precesding IP address
            would be authorized. In the latter case, a <link linkend='filter.literal'>literal</link> filter string 
            would be recommended as it is significantly more obvious that only that address is allowed.
        </para>
        <example xml:id="ex.ip.cidr.filter">
        <title>CIDR Filter String Definition in symmetric.properties</title>
            <programlisting>
                #
                # Filter string definition to restrict connecting client
                # IP addresses
                #
                ip.filters=10.10.4.32/27, 10.5.0.0/16
            </programlisting>
        </example>

    </section>
    <section xml:id="filter.literal">
        <title>Literal Filters</title>
        <para>
            Literal filter definitions are just that. They define a single IP address that is authorized
            to connect to the server. The only requirement is that the filter string is a complete, well
            formatted IP address.
        </para>        
    </section>     
    <section xml:id="filter.wildcarding">
        <title>Wildcarding</title>
        <para>
            The wildcard notation allows all values for a specific piece of an IP address to be valid (0 to 255 for IPv4 addresses).
            This is denoted with a <quote>*</quote> within the specific piece (octet for IPv4) of an IP
            address. The wildcard character is the only allowable character within that piece of the address
            (no other characters included whitespace).
        </para>
        <para>
            Wildcard filters may be combined with <link linkend='filter.range'>Range</link> filters. 
            They may NOT be combined with <link linkend='filter.cidr'>CIDR</link> filters.
        </para>
        <example xml:id="ex.ip.wildcard.filter">
        <title>Wildcard Filter String Definition in symmetric.properties</title>
            <programlisting>
                #
                # Filter string definition to restrict connecting client
                # IP addresses
                #
                ip.filters=10.10.*.40
            </programlisting>
        </example>        
    </section>
    <section  xml:id="filter.range">
        <title>Range Filters</title>
        <para>
            Range filter definitions allow for a numeric range to be specified within an address filter. A
            range must be a valid numeric range for an piece of an IP address (i.e. an octet in IPv4). The range
            definition must be in the form: 
        </para>   
        <example xml:id="ex.ip.range.filter">
        <title>Filter String Definition in symmetric.properties</title>
            <programlisting>
                #
                # Filter string definition to restrict connecting client
                # IP addresses
                #
                ip.filters=10.10.40-20.200-1
            </programlisting>
        </example>         
    </section>   
    <section xml:id='filter.innerworking'>
        <title>Inner workings</title>
        <para>
            Filter strings are compiled on startup, so the hit (although very small) of compiling
            the authorizers is incurred only once. Once compiled each request is passed through
            the chain of authorizers until either a authorization is passed or the chain is exhausted. In
            the latter case the request is denied and a protocol specific response is sent to the client. In 
            the case of HTTP this would be a response code of 401 (FORBIDDEN).
        </para>
    </section>
    <section xml:id='filter.configuration'>
        <title>Configuration</title>
        <para>
            Configuring IP filter strings is done through defining the following property in the
            SymmetricDS configuration (one of the symmetric .properties files). One need only to 
            define the <varname>ip.filter</varname> property and assign a comma <quote>,</quote> delimited 
            string of filter tokens to provide to the filter framework.
        </para>
        <example xml:id="ex.ip.filter">
        <title>Filter String Definition in symmetric.properties</title>
            <programlisting>
                #
                # Filter string definition to restrict connecting client
                # IP addresses
                #
                ip.filters=10.10.4.32/27, 100.50-40.10-5.*, 35.58.124.89
            </programlisting>
        </example>
    </section>
    
    <important>
        <para>
            Note, that there is obvious overlap between the some of the filtering notation, and hence, functionality. 
            The <link linkend='filter.wildcarding'>Wildcarding</link> and <link linkend='filter.range'>Range</link> 
            functionality exists to provide workarounds for scenarios where <link linkend='filter.cidr'>CIDR</link>
            notation and <link linkend='filter.literal'>Literal</link> filters will not suffice.
        </para>
    </important>    
        
    <warning>
        <para>
            Take care in defining your filter string as it is possible to overlap filters. Also, as with
            the definition of any other property in the SymmetricDS configuration, if the property is
            defined in multiple properties files the property file that is read in last will override any
            previous filter string definitions.
        </para>
    </warning>

</chapter>
