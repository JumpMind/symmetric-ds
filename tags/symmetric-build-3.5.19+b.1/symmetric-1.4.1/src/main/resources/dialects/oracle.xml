<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd" default-lazy-init="true">

    <bean id="oracleDialect" class="org.jumpmind.symmetric.db.oracle.OracleDbDialect"
        scope="prototype">
        <property name="tablePrefix" value="${sync.table.prefix}" />
        <property name="parameterService" ref="parameterService" />
        <property name="streamingResultsFetchSize" value="${db.jdbc.streaming.results.fetch.size}" />
        <property name="sqlTemplate">
            <bean class="org.jumpmind.symmetric.db.SqlTemplate">
                <property name="triggerPrefix" value="${trigger.prefix}" />
                <property name="functionInstalledSql">
                    <value>
                        <![CDATA[select count(*) from user_source where line = 1 and (type = 'FUNCTION' or type = 'PACKAGE') and name=upper('$(functionName)')]]>
                    </value>
                </property>               
                <property name="functionTemplatesToInstall">
                    <map>
                        <entry key="fn_sym_blob2clob">
                            <value>
                                <![CDATA[ 
                                CREATE OR REPLACE FUNCTION fn_sym_blob2clob (blob_in IN BLOB)
                                  RETURN CLOB
                                AS
                                    v_clob    CLOB := null;
                                    v_varchar VARCHAR2(32767);
                                    v_start   PLS_INTEGER := 1;
                                    v_buffer  PLS_INTEGER := 999;
                                BEGIN
                                    IF blob_in IS NOT NULL THEN
                                        IF DBMS_LOB.GETLENGTH(blob_in) > 0 THEN
                                            DBMS_LOB.CREATETEMPORARY(v_clob, TRUE);
                                            FOR i IN 1..CEIL(DBMS_LOB.GETLENGTH(blob_in) / v_buffer)
                                            LOOP    
                                                v_varchar := UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.base64_encode(DBMS_LOB.SUBSTR(blob_in, v_buffer, v_start)));
                                                v_varchar := REPLACE(v_varchar,CHR(13)||CHR(10)); 
                                                DBMS_LOB.WRITEAPPEND(v_clob, LENGTH(v_varchar), v_varchar);
                                                v_start := v_start + v_buffer;
                                            END LOOP;
                                        END IF;
                                    END IF;
                                    RETURN v_clob; 
                                END fn_sym_blob2clob;
                                ]]>
                            </value>
                        </entry>
                        <entry key="fn_transaction_id">
                            <value>
                                <![CDATA[ 
                                CREATE OR REPLACE function fn_transaction_id
                                    return varchar is
                                    begin
                                       return DBMS_TRANSACTION.local_transaction_id(false);
                                    end;
                                ]]>
                            </value>
                        </entry>
                        <entry key="fn_trigger_disabled">
                            <value>
                                <![CDATA[ 
                                CREATE OR REPLACE function fn_trigger_disabled return varchar is 
                                  begin 
                                     return pack_symmetric.disable_trigger;
                                  end;
                                ]]>
                            </value>
                        </entry>
                    </map>
                </property>
                <property name="stringColumnTemplate" >
                    <value>
                        <![CDATA[ case when $(tableAlias)."$(columnName)" is null then '' else concat(concat('"',replace(replace($(tableAlias)."$(columnName)",'\','\\'),'"','\"')),'"') end ||','||]]>
                    </value>
                </property>
                <property name="clobColumnTemplate">
                    <value>
                        <![CDATA[concat(concat('"',replace(replace($(tableAlias)."$(columnName)",to_clob('\'),to_clob('\\')),to_clob('"'),to_clob('\"'))),'"') ||','||]]>
                    </value>
                </property>
                <property name="blobColumnTemplate">
                    <value>
                        <![CDATA[fn_sym_blob2clob($(tableAlias)."$(columnName)")||','||]]>
                    </value>
                </property>
                <property name="numberColumnTemplate">
                    <value>
                        <![CDATA[case when $(tableAlias)."$(columnName)" is null then '' else '"'||cast($(tableAlias)."$(columnName)" as varchar(50))||'"' end ||','||]]>
                    </value>
                </property>
                <property name="datetimeColumnTemplate" >
                    <value>
                        <![CDATA[ case when $(tableAlias)."$(columnName)" is null then '' else concat(concat('"',to_char($(tableAlias)."$(columnName)", 'YYYY-MM-DD HH24:MI:SS')),'"') end ||','||]]>
                    </value>
                </property>
                <property name="triggerConcatCharacter" value="||"/>
                <property name="newTriggerValue" value=":new"/>
                <property name="oldTriggerValue" value=":old"/>
                <property name="sqlTemplates">
                    <map>
                        <entry key="insertTriggerTemplate">
                            <value>
                                <![CDATA[
                                create or replace trigger $(triggerName) after insert on $(schemaName)$(tableName)
                                for each row begin
                                  if $(syncOnInsertCondition) and $(syncOnIncomingBatchCondition) then
                                    insert into $(defaultSchema)$(prefixName)_data (table_name, event_type, trigger_hist_id, row_data, create_time)
                                    values(
                                      '$(targetTableName)',
                                      'I',
                                      $(triggerHistoryId),
                                      $(columns),                                
                                      CURRENT_TIMESTAMP
                                    );
                                    insert into $(defaultSchema)$(prefixName)_data_event (node_id, data_id, channel_id, transaction_id) (select node_id, $(defaultSchema)SEQ_$(prefixName)_data_data_id.CURRVAL, '$(channelName)', $(txIdExpression) from $(prefixName)_node c where 
                                    c.node_group_id='$(targetGroupId)' and c.sync_enabled=1 $(nodeSelectWhere));
                                  end if;
                                end;
                                ]]>
                            </value>
                        </entry>
                        <entry key="updateTriggerTemplate">
                            <value>
                                <![CDATA[
                                 create or replace trigger $(triggerName) after update on $(schemaName)$(tableName)
                                for each row begin
                                  if $(syncOnUpdateCondition) and $(syncOnIncomingBatchCondition) then
                                    insert into $(defaultSchema)$(prefixName)_data (table_name, event_type, trigger_hist_id, pk_data, row_data, create_time)
                                    values(
                                      '$(targetTableName)',
                                      'U',
                                      $(triggerHistoryId),
                                      $(oldKeys),
                                      $(columns),
                                      CURRENT_TIMESTAMP
                                    );
                                    insert into $(defaultSchema)$(prefixName)_data_event (node_id, data_id, channel_id, transaction_id) (select node_id, $(defaultSchema)SEQ_$(prefixName)_data_data_id.CURRVAL,'$(channelName)',$(txIdExpression) from $(prefixName)_node c where 
                                    c.node_group_id='$(targetGroupId)' and c.sync_enabled=1 $(nodeSelectWhere));
                                  end if;
                                end;
                                ]]>
                            </value>
                        </entry>
                        <entry key="deleteTriggerTemplate">
                            <value>
                                <![CDATA[
                                 create or replace trigger  $(triggerName) after delete on $(schemaName)$(tableName)
                                for each row begin
                                  if $(syncOnDeleteCondition) and $(syncOnIncomingBatchCondition) then
                                    insert into $(defaultSchema)$(prefixName)_data (table_name, event_type, trigger_hist_id, pk_data, create_time)
                                    values(
                                      '$(targetTableName)',
                                      'D',
                                      $(triggerHistoryId),
                                      $(oldKeys),
                                      CURRENT_TIMESTAMP
                                    );
                                    insert into $(defaultSchema)$(prefixName)_data_event (node_id, data_id, channel_id, transaction_id) (select node_id, $(defaultSchema)SEQ_$(prefixName)_data_data_id.CURRVAL, '$(channelName)', $(txIdExpression) from $(prefixName)_node c where 
                                    c.node_group_id='$(targetGroupId)' and c.sync_enabled=1 $(nodeSelectWhere));
                                  end if;
                                end;
                                ]]>
                            </value>
                        </entry>
                        <entry key="initialLoadSqlTemplate">
                            <value>
                                <![CDATA[select $(columns) from $(schemaName)$(tableName) t  where $(whereClause)]]>
                            </value>
                        </entry>
                    </map>
                </property>
            </bean>
        </property>
    </bean>

</beans>