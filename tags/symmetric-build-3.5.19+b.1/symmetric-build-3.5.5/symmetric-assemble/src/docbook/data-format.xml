<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to JumpMind Inc under one or more contributor
    license agreements.  See the NOTICE file distributed
    with this work for additional information regarding
    copyright ownership.  JumpMind Inc licenses this file
    to you under the GNU General Public License, version 3.0 (GPLv3)
    (the "License"); you may not use this file except in compliance
    with the License.

    You should have received a copy of the GNU General Public License,
    version 3.0 (GPLv3) along with this library; if not, see
    <http://www.gnu.org/licenses/>.

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<appendix version="5.0" xml:id="data-format" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml">
    <title>Data Format</title>
    <para>
        The SymmetricDS Data Format is used to stream data from one node to another. The data format
        reader and writer are pluggable with an initial implementation using a format based on
        Comma Separated Values (CSV). Each line in the stream is a record with fields separated
        by commas. String fields are surrounded with double quotes. Double quotes and
        backslashes used in a string field are escaped with a backslash. Binary values are
        represented as a string with hex values in "\0xab" format. The absence of any value in
        the field indicates a null value. Extra spacing is ignored and lines starting with a
        hash are ignored.
    </para>
    <para>
        The first field of each line gives the directive for the line. The following directives
        are used:

        <variablelist>
            <varlistentry>
                <term>
                    <command>nodeid, {node_id}</command>
                </term>
                <listitem>
                    <para>Identifies which node the data is coming from.  Occurs once in CSV file.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <command>binary, {BASE64|NONE|HEX}</command>
                </term>
                <listitem>
                    <para>Identifies the type of decoding the loader needs to use to decode binary data in the pay load.  This varies depending on what database is the source of the data.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <command>channel, {channel_id}</command>
                </term>
                <listitem>
                    <para>Identifies which channel a batch belongs to.  The SymmetricDS data loader expects the channel to be specified before the batch.</para>
                </listitem>
            </varlistentry>   
            <varlistentry>
                <term>
                    <command>batch, {batch_id}</command>
                </term>
                <listitem>
                    <para>Uniquely identifies a batch.  Used to track whether a batch has been loaded before. A batch of -9999 is considered a virtual batch and will be loaded, but will not be recorded in incoming_batch.</para>
                </listitem>
            </varlistentry>             
            <varlistentry>
                <term>
                    <command>schema, {schema name}</command>
                </term>
                <listitem>
                    <para>The name of the schema that is being targeted.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <command>catalog, {catalog name}</command>
                </term>
                <listitem>
                    <para>The name of the catalog that is being targeted.</para>
                </listitem>
            </varlistentry>                     
            <varlistentry>
                <term>
                    <command>table, {table name}</command>
                </term>
                <listitem>
                    <para>The name of the table that is being targeted.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <command>keys, {column name...}</command>
                </term>
                <listitem>
                    <para>
                        Lists the column names that are used as the primary key for the table.
                        Only needs to occur after the first occurrence of the table.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <command>columns, {column name...}</command>
                </term>
                <listitem>
                    <para>
                        Lists all the column names (including key columns) of the table. Only needs to occur after the
                        first occurrence of the table.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <command>insert, {column value...}</command>
                </term>
                <listitem>
                    <para>
                        Insert into the table with the values that correspond with the columns.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <command>update, {new column value...},{old key value...}</command>
                </term>
                <listitem>
                    <para>
                        Update the table using the old key values to set the new column values.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <command>old, {old column value...}</command>
                </term>
                <listitem>
                    <para>
                        Represent all the old values of the data.  This data can be used for conflict 
                        resolution.
                    </para>
                </listitem>
            </varlistentry>            
            <varlistentry>
                <term>
                    <command>delete, {old key value...}</command>
                </term>
                <listitem>
                    <para>Delete from the table using the old key values.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <command>sql, {sql statement}</command>
                </term>
                <listitem>
                    <para>Optional notation that instructs the data loader to run the accompanying SQL statement.</para>
                </listitem>
            </varlistentry>            
            <varlistentry>
                <term>
                    <command>bsh, {bsh script}</command>
                </term>
                <listitem>
                    <para>Optional notation that instructs the data loader to run the accompanying  <ulink url="http://www.beanshell.org/">BeanShell</ulink> snippet.</para>
                </listitem>
            </varlistentry>              
            <varlistentry>
                <term>
                    <command>create, {xml}</command>
                </term>
                <listitem>
                    <para>Optional notation that instructs the data loader to run the accompanying <ulink url="http://db.apache.org/ddlutils/">DdlUtils</ulink> XML table definition in order to create a database table.</para>
                </listitem>
            </varlistentry>              
            <varlistentry>
                <term>
                    <command>commit, {batch_id}</command>
                </term>
                <listitem>
                    <para>An indicator that the batch has been transmitted and the data can be committed to the database.</para>
                </listitem>
            </varlistentry>            
        </variablelist>
    </para>
    <example>
        <title>Data Format Stream</title>
        <programlisting>
<![CDATA[nodeid, 1001
channel, pricing
binary, BASE64
batch, 100
schema,
catalog,
table, item_selling_price
keys, price_id
columns, price_id, price, cost
insert, 55, 0.65, 0.55
schema,
catalog,
table, item
keys, item_id 
columns, item_id, price_id, name
insert, 110000055, 55, "Soft Drink"
delete, 110000001
schema,
catalog,
table, item_selling_price
update, 55, 0.75, 0.65, 55
commit, 100]]>
        </programlisting>
    </example>
</appendix>
