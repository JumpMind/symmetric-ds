<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="architecture" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml">
    <title>Architecture</title>
    <para>
        The SymmetricDS software allows for outgoing and incoming changes to be synchronized
        to/from other databases.  The node that initiates a synchronization connection is the client, and the
        node receiving a connection is the host.  Because synchronization is configurable to
        push or pull in either direction, the same node can act as either a client or a host
        in different circumstances.
    </para>
    <para>
        The SymmetricDS software consists of a series of background jobs, managers, Servlets, and services wired together
        via dependency injection using the <ulink url="http://springframework.org">Spring Framework</ulink>.
    </para>    
    <para>
        <figure>
            <title>Software Stack</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/software-stack.gif" format="GIF" />
                </imageobject>
            </mediaobject>
        </figure>
    </para>    
    <para>
        As a client, the node runs the router job, push job and pull job on a timer thread.  
        The router job uses services to create batches that are targeted at certain nodes.  
        The push job uses services to extract and stream data to
        another node (that is, it pushes data).  The response from a push is a list
        of batch acknowlegements to indicate that data was loaded.
        The pull job uses services to load data that is streamed from another node
        (<emphasis>i.e.</emphasis>, it pulls data).  After loading data, a second connection is made to send a list
        of batch acknowlegements.
    </para>
    <para>
        As a host, the node waits for incoming connections that pull, push, or acknowledge data changes.
        The push Servlet uses services to load data that is pushed from a client node.
        After loading data, it responds with a list of batch acknowledgements.
        The pull Servlet uses services to extract, and stream data back to the client node.
        The ack Servlet uses services to update the status of data that was loaded at a client node.  The router
        job batches and routes data.
    </para>
    <para>
        By default, data is extracted from the source database into memory until a threshold size is reached.
        If the threshold size is reached, data is streamed to a temporary file in the JVM's default temporary 
        directory.  Next, the data is streamed to the target node across the transport layer.  The receiving
        node will cache the data in memory until the threshold size is reached, writing to a temporary file if
        necessary.  At last, the data is loaded into the target database by the data loader.  This step by step
        approach allows for extract time, transport time, and load time to all be measured independently.  It 
        also allows database resources to be used most optimally.
    </para>    
    <para>
        The transport manager handles the incoming and outgoing streams of data between nodes.
        The default transport is based on a simple implementation over HTTP.  An internal transport
        is also provided.  It is possible to add other implementations, such as a socket-based transport manager.
    </para> 
    <para>
        Node communication over HTTP is represented in the following figure.
    </para> 
    <para>
        <figure>
            <title>Node Communication</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/seq-node-communication.gif" format="GIF" />
                </imageobject>
            </mediaobject>
        </figure>
    </para>    
    <para>
        The <literal>StandaloneSymmetricEngine</literal> is wrapper API that can be used to directly start the client services only.  The 
        <literal>SymmetricWebServer</literal> is a wrapper API that can be used to directly start <emphasis>both</emphasis> the
        client and host services inside a Jetty web container.  The <literal>SymmetricLauncher</literal> provides command line tools to work 
        with and start SymmetricDS.
    </para>   
    <!-- TODO
    <section id="ch04-components">
        <title>Software Components</title>
        <para>
            <figure>
                <title>Startup Sequence Diagram</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/seq-startup.gif" format="GIF" />
                    </imageobject>
                </mediaobject>
            </figure>
        </para>
        <para>
            <figure>
                <title>Client Side Pull Sequence Diagram</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/seq-pull-client.gif" format="GIF"  />
                    </imageobject>
                </mediaobject>
            </figure>
        </para>
        <para>
            <figure>
                <title>Host Side Pull Sequence Diagram</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/seq-pull-host.gif" format="GIF"  />
                    </imageobject>
                </mediaobject>
            </figure>
        </para>
        <para>
            <figure>
                <title>Client Side Push Sequence Diagram</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/seq-push-client.gif" format="GIF"  />
                    </imageobject>
                </mediaobject>
            </figure>
        </para>
        <para>
            <figure>
                <title>Host Side Push Sequence Diagram</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/seq-push-host.gif" format="GIF"  />
                    </imageobject>
                </mediaobject>
            </figure>
        </para>        
    </section>
     -->
    <section id="ch04-deploy">
        <title>Deployment Options</title>
        <para>The following deployment options are possible:</para>
        <itemizedlist>
            <listitem>
                <para>Web application archive (WAR) deployed to an application server</para>
                <para>
                    This option means packaging a WAR file and deploying to your favorite
                    web server, like Apache Tomcat.  It's a little more work, but you
                    can configure the web server to do whatever you need.  SymmetricDS can also 
                    be embedded in an existing web application, if desired.
                </para>                
            </listitem>
            <listitem>
                <para>Standalone service that embeds Jetty web server</para>
                <para>
                    This option means running the <emphasis>sym</emphasis> command line, which launches the built-in Jetty web server.  
                    This is a simple option because it is already provided, but you lose the flexibility to configure 
                    the web server any further.
                </para>
            </listitem>
            <listitem>
                <para>Embedded as a Java library in an application</para>
                <para>
                    This option means you must write a wrapper Java program that runs
                    SymmetricDS.  You would probably use Jetty web server, which is also embeddable.
                    You could bring up an embedded database like Derby or H2.  You could configure the
                    web server, database, or SymmetricDS to do whatever you needed, but it's also
                    the most work of the three options discussed thus far.
                </para>
            </listitem>
            <listitem>
                <para>Grails Application</para>
                <para>                
                    A <ulink url="http://grails.org/plugin/symmetricds">Grails SymmetricDS plugin</ulink> is 
                    provided at the default Grails plugin site.  This option ends up being a WAR deployment, but allows 
                    for the use of the Grails SDK for configuring and building the deployment.  The plugin also
                    provides Gorm (Hibernate) access to many of the core database tables.   
                </para>
            </listitem>            
        </itemizedlist>
        <para>
            The deployment model you choose depends on how much flexibility you need versus how easy you
            want it to be.  Both Jetty and Tomcat are excellent, scalable web servers that
            compete with each other and have great performance.  Most people choose either
            the <emphasis>Standalone</emphasis> or <emphasis>Web Archive</emphasis> with Tomcat 5.5 or 6.  Deploying to Tomcat
            is a good middle-of-the-road decision that requires a little more work for more flexibility.
        </para>
        <para>Next, we will go into a little more detail on the first three deployment options listed above.</para>
        <section id="ch04-deploy-war">
            <title>Web Archive</title>
            <para>
                As a web application archive, a WAR or EAR file is deployed to an application server,
                such as Tomcat, Jetty, or JBoss.  The structure of the archive should have a <literal>web.xml</literal>
                file in the <literal>WEB-INF</literal> folder, the <filename>symmetric.properties</filename> file in the <literal>WEB-INF/classes</literal> folder,
                and the required JAR files in the <literal>WEB-INF/lib</literal> folder.
            </para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/symmetric_war.gif" format="GIF" />
                </imageobject>
            </mediaobject>
            <para>
                The <filename>WEB-INF/web.xml</filename> file
                is configured with a <literal>SymmetricEngineContextLoaderListener</literal>,
                the required SymmetricFilter mapping, and the required SymmetricServlet mapping.
           
            </para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
        http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    version="2.5">

    <display-name>sync</display-name>
    
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <!-- You can optionally specify other Spring files to 
                load into same context here -->
        <param-value>classpath:symmetric.xml</param-value>
    </context-param>
    
    <filter>
        <filter-name>SymmetricFilter</filter-name>
        <filter-class>
            org.jumpmind.symmetric.web.SymmetricFilter
        </filter-class>
    </filter>
    
    <filter-mapping>
        <filter-name>SymmetricFilter</filter-name>
        <servlet-name>/*</servlet-name>
    </filter-mapping>
    
    <listener>
        <listener-class>
            org.jumpmind.symmetric.SymmetricEngineContextLoaderListener
        </listener-class>
    </listener>
    
    <servlet>
        <servlet-name>SymmetricServlet</servlet-name>
        <servlet-class>
            org.jumpmind.symmetric.web.SymmetricServlet
        </servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>SymmetricServlet</servlet-name>
        <url-pattern>/*</url-pattern>
    </servlet-mapping>

</web-app>]]></programlisting>
            <para>
                This example starts all the SymmetricDS Servlets with Filters to compress the
                stream, authenticate nodes, and reject nodes when the server is too busy.
            </para>
            <para>
                The <literal>web.base.servlet.path</literal> property in <filename>symmetric.properties</filename> can be set if the SymmetricServlet needs to
                coexist with other Servlets.
            </para>            
        </section>
        <section id="ch04-deploy-standalone">
            <title>Standalone</title>
            <para>
                A standalone service can use the <literal>sym</literal> command line options to start
                a server.  An embedded instance of Jetty is used to service web
                requests for all the servlets.
            </para>
            <programlisting><![CDATA[/symmetric/bin/sym --properties root.properties --port 8080 --server
]]></programlisting>
            <para>
                This example starts the SymmetricDS server on port 8080 with the startup
                properties found in the <filename>root.properties</filename> file.
            </para>
        </section>
        <section id="ch04-deploy-embedded">
            <title>Embedded</title>
            <para>
                A Java application with the SymmetricDS Java Archive (JAR) library on its
                classpath can use the <literal>SymmetricWebServer</literal> to start the server.
            </para>
            <programlisting><![CDATA[
import org.jumpmind.symmetric.SymmetricWebServer;

public class StartSymmetricEngine {

    /**
     * Start an engine that is configured by two properties files. One is
     * packaged with the application and contains overridden properties that are
     * specific to the application. The other is found in the application's
     * working directory. It can be used to setup environment specific
     * properties.
     */
    public static void main(String[] args) throws Exception {
    
        SymmetricWebServer node = new SymmetricWebServer(
                                   "classpath://my-application.properties");

        // this will create the database, sync triggers, start jobs running
        node.start(8080);
        
        // this will stop the node
        node.stop();
    }   

}]]></programlisting>
            <para>
                This example starts the SymmetricDS server on port 8080 with startup properies found
                in two locations.  The first file, <filename>my-application.properties</filename>,
                is packaged in the application to provide properties that override the SymmetricDS 
                default values.
            </para>
        </section>
    </section>
</chapter>
